From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: catmoska <84236986+catmoska@users.noreply.github.com>
Date: Sat, 12 Apr 2025 15:16:57 +0300
Subject: [PATCH] f1


diff --git a/src/main/java/net/fabricmc/fabric/impl/client/event/lifecycle/ClientLifecycleEventsImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/event/lifecycle/ClientLifecycleEventsImpl.java
deleted file mode 100644
index bfa85316b007bfb809308f43e9570e5e64d1925f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/event/lifecycle/ClientLifecycleEventsImpl.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.event.lifecycle;
-
-import net.fabricmc.api.ClientModInitializer;
-import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientBlockEntityEvents;
-import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientChunkEvents;
-import net.fabricmc.fabric.impl.event.lifecycle.LoadedChunksCache;
-
-public final class ClientLifecycleEventsImpl implements ClientModInitializer {
-	@Override
-	public void onInitializeClient() {
-		// Part of impl for block entity events
-		ClientChunkEvents.CHUNK_LOAD.register((world, chunk) -> {
-			((LoadedChunksCache) world).fabric_markLoaded(chunk);
-		});
-
-		ClientChunkEvents.CHUNK_UNLOAD.register((world, chunk) -> {
-			((LoadedChunksCache) world).fabric_markUnloaded(chunk);
-		});
-
-		ClientChunkEvents.CHUNK_UNLOAD.register((world, chunk) -> {
-			for (BlockEntity blockEntity : chunk.getBlockEntities().values()) {
-				ClientBlockEntityEvents.BLOCK_ENTITY_UNLOAD.invoker().onUnload(blockEntity, world);
-			}
-		});
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/event/lifecycle/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/event/lifecycle/package-info.java
deleted file mode 100644
index 0ce8aedf3fc4ca44983f7d76b4155a9f36b058e7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/event/lifecycle/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-lifecycle-events-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.event.lifecycle;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/Indigo.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/Indigo.java
deleted file mode 100644
index b1a94ce9a151b02a925ce7a2dea74f88638a46cd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/Indigo.java
+++ /dev/null
@@ -1,150 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.Locale;
-import java.util.Properties;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import net.fabricmc.api.ClientModInitializer;
-import net.fabricmc.fabric.api.renderer.v1.RendererAccess;
-import net.fabricmc.fabric.api.util.TriState;
-import net.fabricmc.fabric.impl.client.indigo.renderer.IndigoRenderer;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoConfig;
-import net.fabricmc.loader.api.FabricLoader;
-
-public class Indigo implements ClientModInitializer {
-	public static final boolean ALWAYS_TESSELATE_INDIGO;
-	public static final boolean ENSURE_VERTEX_FORMAT_COMPATIBILITY;
-	public static final AoConfig AMBIENT_OCCLUSION_MODE;
-	/** Set true in dev env to confirm results match vanilla when they should. */
-	public static final boolean DEBUG_COMPARE_LIGHTING;
-	public static final boolean FIX_SMOOTH_LIGHTING_OFFSET;
-	public static final boolean FIX_MEAN_LIGHT_CALCULATION;
-	/**
-	 * Same value as {@link #FIX_MEAN_LIGHT_CALCULATION} because it is only required when the mean formula is changed,
-	 * but different field to clearly separate code paths where we change emissive handling.
-	 */
-	public static final boolean FIX_EMISSIVE_LIGHTING;
-	public static final boolean FIX_EXTERIOR_VERTEX_LIGHTING;
-	public static final boolean FIX_LUMINOUS_AO_SHADE;
-
-	public static final Logger LOGGER = LoggerFactory.getLogger(Indigo.class);
-
-	private static boolean asBoolean(String property, boolean defValue) {
-		switch (asTriState(property)) {
-		case TRUE:
-			return true;
-		case FALSE:
-			return false;
-		default:
-			return defValue;
-		}
-	}
-
-	@SuppressWarnings({ "rawtypes", "unchecked" })
-	private static <T extends Enum> T asEnum(String property, T defValue) {
-		if (property == null || property.isEmpty()) {
-			return defValue;
-		} else {
-			for (Enum obj : defValue.getClass().getEnumConstants()) {
-				if (property.equalsIgnoreCase(obj.name())) {
-					//noinspection unchecked
-					return (T) obj;
-				}
-			}
-
-			return defValue;
-		}
-	}
-
-	private static TriState asTriState(String property) {
-		if (property == null || property.isEmpty()) {
-			return TriState.DEFAULT;
-		} else {
-			switch (property.toLowerCase(Locale.ROOT)) {
-			case "true":
-				return TriState.TRUE;
-			case "false":
-				return TriState.FALSE;
-			case "auto":
-			default:
-				return TriState.DEFAULT;
-			}
-		}
-	}
-
-	static {
-		File configDir = FabricLoader.getInstance().getConfigDir().resolve("fabric").toFile();
-
-		if (!configDir.exists()) {
-			if (!configDir.mkdir()) {
-				LOGGER.warn("[Indigo] Could not create configuration directory: " + configDir.getAbsolutePath());
-			}
-		}
-
-		File configFile = new File(configDir, "indigo-renderer.properties");
-		Properties properties = new Properties();
-
-		if (configFile.exists()) {
-			try (FileInputStream stream = new FileInputStream(configFile)) {
-				properties.load(stream);
-			} catch (IOException e) {
-				LOGGER.warn("[Indigo] Could not read property file '" + configFile.getAbsolutePath() + "'", e);
-			}
-		}
-
-		final boolean forceCompatibility = IndigoMixinConfigPlugin.shouldForceCompatibility();
-		ENSURE_VERTEX_FORMAT_COMPATIBILITY = forceCompatibility;
-		// necessary because OF alters the BakedModel vertex format and will confuse the fallback model consumer
-		ALWAYS_TESSELATE_INDIGO = !forceCompatibility && asBoolean((String) properties.computeIfAbsent("always-tesselate-blocks", (a) -> "auto"), true);
-		AMBIENT_OCCLUSION_MODE = asEnum((String) properties.computeIfAbsent("ambient-occlusion-mode", (a) -> "hybrid"), AoConfig.HYBRID);
-		DEBUG_COMPARE_LIGHTING = asBoolean((String) properties.computeIfAbsent("debug-compare-lighting", (a) -> "auto"), false);
-		FIX_SMOOTH_LIGHTING_OFFSET = asBoolean((String) properties.computeIfAbsent("fix-smooth-lighting-offset", (a) -> "auto"), true);
-		FIX_MEAN_LIGHT_CALCULATION = asBoolean((String) properties.computeIfAbsent("fix-mean-light-calculation", (a) -> "auto"), true);
-		FIX_EMISSIVE_LIGHTING = FIX_MEAN_LIGHT_CALCULATION;
-		FIX_EXTERIOR_VERTEX_LIGHTING = asBoolean((String) properties.computeIfAbsent("fix-exterior-vertex-lighting", (a) -> "auto"), true);
-		FIX_LUMINOUS_AO_SHADE = asBoolean((String) properties.computeIfAbsent("fix-luminous-block-ambient-occlusion", (a) -> "auto"), false);
-
-		try (FileOutputStream stream = new FileOutputStream(configFile)) {
-			properties.store(stream, "Indigo properties file");
-		} catch (IOException e) {
-			LOGGER.warn("[Indigo] Could not store property file '" + configFile.getAbsolutePath() + "'", e);
-		}
-	}
-
-	@Override
-	public void onInitializeClient() {
-		if (IndigoMixinConfigPlugin.shouldApplyIndigo()) {
-			LOGGER.info("[Indigo] Registering Indigo renderer!");
-
-			if (IndigoMixinConfigPlugin.shouldForceCompatibility()) {
-				LOGGER.info("[Indigo] Compatibility mode enabled.");
-			}
-
-			RendererAccess.INSTANCE.registerRenderer(IndigoRenderer.INSTANCE);
-		} else {
-			LOGGER.info("[Indigo] Different rendering plugin detected; not applying Indigo.");
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/IndigoMixinConfigPlugin.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/IndigoMixinConfigPlugin.java
deleted file mode 100644
index 4e13d3094addff7bb041685186093e3f2c9e3c85..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/IndigoMixinConfigPlugin.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo;
-
-import java.util.List;
-import java.util.Set;
-
-import org.objectweb.asm.tree.ClassNode;
-import org.spongepowered.asm.mixin.extensibility.IMixinConfigPlugin;
-import org.spongepowered.asm.mixin.extensibility.IMixinInfo;
-
-import net.fabricmc.loader.api.FabricLoader;
-import net.fabricmc.loader.api.ModContainer;
-import net.fabricmc.loader.api.metadata.ModMetadata;
-
-public class IndigoMixinConfigPlugin implements IMixinConfigPlugin {
-	/** Set by other renderers to disable loading of Indigo. */
-	private static final String JSON_KEY_DISABLE_INDIGO = "fabric-renderer-api-v1:contains_renderer";
-	/**
-	 * Disables vanilla block tesselation and ensures vertex format compatibility.
-	 */
-	private static final String JSON_KEY_FORCE_COMPATIBILITY = "fabric-renderer-indigo:force_compatibility";
-
-	private static boolean needsLoad = true;
-
-	private static boolean indigoApplicable = true;
-	private static boolean forceCompatibility = false;
-
-	private static void loadIfNeeded() {
-		if (needsLoad) {
-			for (ModContainer container : FabricLoader.getInstance().getAllMods()) {
-				final ModMetadata meta = container.getMetadata();
-
-				if (meta.containsCustomValue(JSON_KEY_DISABLE_INDIGO)) {
-					indigoApplicable = false;
-				} else if (meta.containsCustomValue(JSON_KEY_FORCE_COMPATIBILITY)) {
-					forceCompatibility = true;
-				}
-			}
-
-			needsLoad = false;
-		}
-	}
-
-	static boolean shouldApplyIndigo() {
-		loadIfNeeded();
-		return indigoApplicable;
-	}
-
-	static boolean shouldForceCompatibility() {
-		loadIfNeeded();
-		return forceCompatibility;
-	}
-
-	@Override
-	public void onLoad(String mixinPackage) { }
-
-	@Override
-	public String getRefMapperConfig() {
-		return null;
-	}
-
-	@Override
-	public boolean shouldApplyMixin(String targetClassName, String mixinClassName) {
-		return shouldApplyIndigo();
-	}
-
-	@Override
-	public void acceptTargets(Set<String> myTargets, Set<String> otherTargets) { }
-
-	@Override
-	public List<String> getMixins() {
-		return null;
-	}
-
-	@Override
-	public void preApply(String targetClassName, ClassNode targetClass, String mixinClassName, IMixinInfo mixinInfo) { }
-
-	@Override
-	public void postApply(String targetClassName, ClassNode targetClass, String mixinClassName, IMixinInfo mixinInfo) { }
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/package-info.java
deleted file mode 100644
index 67ba200c7dba1ffa7554e8c018156034b1361d0b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/IndigoRenderer.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/IndigoRenderer.java
deleted file mode 100644
index bac4298f390ff88c40d86b5dc86d2be92aff9f59..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/IndigoRenderer.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer;
-
-import java.util.HashMap;
-import net.fabricmc.fabric.api.renderer.v1.Renderer;
-import net.fabricmc.fabric.api.renderer.v1.material.MaterialFinder;
-import net.fabricmc.fabric.api.renderer.v1.material.RenderMaterial;
-import net.fabricmc.fabric.api.renderer.v1.mesh.MeshBuilder;
-import net.fabricmc.fabric.impl.client.indigo.renderer.material.MaterialFinderImpl;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.MeshBuilderImpl;
-import net.minecraft.resources.ResourceLocation;
-
-/**
- * The Fabric default renderer implementation. Supports all
- * features defined in the API except shaders and offers no special materials.
- */
-public class IndigoRenderer implements Renderer {
-	public static final IndigoRenderer INSTANCE = new IndigoRenderer();
-
-	public static final RenderMaterial MATERIAL_STANDARD = INSTANCE.materialFinder().find();
-
-	static {
-		INSTANCE.registerMaterial(RenderMaterial.MATERIAL_STANDARD, MATERIAL_STANDARD);
-	}
-
-	private final HashMap<ResourceLocation, RenderMaterial> materialMap = new HashMap<>();
-
-	private IndigoRenderer() { }
-
-	@Override
-	public MeshBuilder meshBuilder() {
-		return new MeshBuilderImpl();
-	}
-
-	@Override
-	public MaterialFinder materialFinder() {
-		return new MaterialFinderImpl();
-	}
-
-	@Override
-	public RenderMaterial materialById(ResourceLocation id) {
-		return materialMap.get(id);
-	}
-
-	@Override
-	public boolean registerMaterial(ResourceLocation id, RenderMaterial material) {
-		if (materialMap.containsKey(id)) return false;
-
-		// cast to prevent acceptance of impostor implementations
-		materialMap.put(id, material);
-		return true;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/accessor/AccessChunkRendererRegion.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/accessor/AccessChunkRendererRegion.java
deleted file mode 100644
index ab67ce09880d49249918115d5d4df1d8e6172e98..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/accessor/AccessChunkRendererRegion.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.accessor;
-
-import net.fabricmc.fabric.impl.client.indigo.renderer.render.TerrainRenderContext;
-
-/**
- * Used to stash block renderer reference in local scope during
- * chunk rebuild, thus avoiding repeated thread-local lookups.
- */
-public interface AccessChunkRendererRegion {
-	TerrainRenderContext fabric_getRenderer();
-
-	void fabric_setRenderer(TerrainRenderContext renderer);
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/accessor/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/accessor/package-info.java
deleted file mode 100644
index 2e521859a15aef88629663db848a89d59d7bc56b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/accessor/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo.renderer.accessor;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoCalculator.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoCalculator.java
deleted file mode 100644
index 19e261e503a7f5bc5a400b21afc9c359bf799cd8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoCalculator.java
+++ /dev/null
@@ -1,601 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-import static net.fabricmc.fabric.impl.client.indigo.renderer.helper.GeometryHelper.AXIS_ALIGNED_FLAG;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.helper.GeometryHelper.CUBIC_FLAG;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.helper.GeometryHelper.LIGHT_FACE_FLAG;
-import static net.minecraft.core.Direction.DOWN;
-import static net.minecraft.core.Direction.EAST;
-import static net.minecraft.core.Direction.NORTH;
-import static net.minecraft.core.Direction.SOUTH;
-import static net.minecraft.core.Direction.UP;
-import static net.minecraft.core.Direction.WEST;
-
-import java.util.BitSet;
-
-import org.joml.Vector3f;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import net.fabricmc.fabric.impl.client.indigo.Indigo;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoFace.WeightFunction;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.MutableQuadViewImpl;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.QuadViewImpl;
-import net.fabricmc.fabric.impl.client.indigo.renderer.render.BlockRenderInfo;
-import net.minecraft.client.renderer.LevelRenderer;
-import net.minecraft.client.renderer.LightTexture;
-import net.minecraft.client.renderer.block.ModelBlockRenderer;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.util.Mth;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.LightLayer;
-import net.minecraft.world.level.block.state.BlockState;
-
-/**
- * Adaptation of inner, non-static class in BlockModelRenderer that serves same purpose.
- */
-public abstract class AoCalculator {
-	/**
-	 * Vanilla models with cubic quads have vertices in a certain order, which allows
-	 * us to map them using a lookup. Adapted from enum in vanilla AoCalculator.
-	 */
-	private static final int[][] VERTEX_MAP = new int[6][4];
-	static {
-		VERTEX_MAP[DOWN.get3DDataValue()] = new int[] { 0, 1, 2, 3 };
-		VERTEX_MAP[UP.get3DDataValue()] = new int[] { 2, 3, 0, 1 };
-		VERTEX_MAP[NORTH.get3DDataValue()] = new int[] { 3, 0, 1, 2 };
-		VERTEX_MAP[SOUTH.get3DDataValue()] = new int[] { 0, 1, 2, 3 };
-		VERTEX_MAP[WEST.get3DDataValue()] = new int[] { 3, 0, 1, 2 };
-		VERTEX_MAP[EAST.get3DDataValue()] = new int[] { 1, 2, 3, 0 };
-	}
-
-	private static final Logger LOGGER = LoggerFactory.getLogger(AoCalculator.class);
-
-	private final ModelBlockRenderer.AmbientOcclusionFace vanillaCalc;
-	private final BlockPos.MutableBlockPos lightPos = new BlockPos.MutableBlockPos();
-	private final BlockPos.MutableBlockPos searchPos = new BlockPos.MutableBlockPos();
-	protected final BlockRenderInfo blockInfo;
-
-	public abstract int light(BlockPos pos, BlockState state);
-
-	public abstract float ao(BlockPos pos, BlockState state);
-
-	/** caches results of {@link #computeFace(Direction, boolean, boolean)} for the current block. */
-	private final AoFaceData[] faceData = new AoFaceData[24];
-
-	/** indicates which elements of {@link #faceData} have been computed for the current block. */
-	private int completionFlags = 0;
-
-	/** holds per-corner weights - used locally to avoid new allocation. */
-	private final float[] w = new float[4];
-
-	// outputs
-	public final float[] ao = new float[4];
-	public final int[] light = new int[4];
-
-	public AoCalculator(BlockRenderInfo blockInfo) {
-		this.blockInfo = blockInfo;
-		this.vanillaCalc = new ModelBlockRenderer.AmbientOcclusionFace();
-
-		for (int i = 0; i < 24; i++) {
-			faceData[i] = new AoFaceData();
-		}
-	}
-
-	/** call at start of each new block. */
-	public void clear() {
-		completionFlags = 0;
-	}
-
-	public void compute(MutableQuadViewImpl quad, boolean isVanilla) {
-		final AoConfig config = Indigo.AMBIENT_OCCLUSION_MODE;
-		final boolean shouldCompare;
-
-		switch (config) {
-		case VANILLA:
-			calcVanilla(quad);
-
-			// no point in comparing vanilla with itself
-			shouldCompare = false;
-			break;
-
-		case EMULATE:
-			calcFastVanilla(quad);
-			shouldCompare = Indigo.DEBUG_COMPARE_LIGHTING && isVanilla;
-			break;
-
-		case HYBRID:
-		default:
-			if (isVanilla) {
-				shouldCompare = Indigo.DEBUG_COMPARE_LIGHTING;
-				calcFastVanilla(quad);
-			} else {
-				shouldCompare = false;
-				calcEnhanced(quad);
-			}
-
-			break;
-
-		case ENHANCED:
-			shouldCompare = false;
-			calcEnhanced(quad);
-		}
-
-		if (shouldCompare) {
-			float[] vanillaAo = new float[4];
-			int[] vanillaLight = new int[4];
-			calcVanilla(quad, vanillaAo, vanillaLight);
-
-			for (int i = 0; i < 4; i++) {
-				if (light[i] != vanillaLight[i] || !Mth.equal(ao[i], vanillaAo[i])) {
-					LOGGER.info(String.format("Mismatch for %s @ %s", blockInfo.blockState.toString(), blockInfo.blockPos.toString()));
-					LOGGER.info(String.format("Flags = %d, LightFace = %s", quad.geometryFlags(), quad.lightFace().toString()));
-					LOGGER.info(String.format("    Old Multiplier: %.2f, %.2f, %.2f, %.2f", vanillaAo[0], vanillaAo[1], vanillaAo[2], vanillaAo[3]));
-					LOGGER.info(String.format("    New Multiplier: %.2f, %.2f, %.2f, %.2f", ao[0], ao[1], ao[2], ao[3]));
-					LOGGER.info(String.format("    Old Brightness: %s, %s, %s, %s", Integer.toHexString(vanillaLight[0]), Integer.toHexString(vanillaLight[1]), Integer.toHexString(vanillaLight[2]), Integer.toHexString(vanillaLight[3])));
-					LOGGER.info(String.format("    New Brightness: %s, %s, %s, %s", Integer.toHexString(light[0]), Integer.toHexString(light[1]), Integer.toHexString(light[2]), Integer.toHexString(light[3])));
-					break;
-				}
-			}
-		}
-	}
-
-	private void calcVanilla(MutableQuadViewImpl quad) {
-		calcVanilla(quad, ao, light);
-	}
-
-	// These are what vanilla AO calc wants, per its usage in vanilla code
-	// Because this instance is effectively thread-local, we preserve instances
-	// to avoid making a new allocation each call.
-	private final float[] vanillaAoData = new float[Direction.values().length * 2];
-	private final BitSet vanillaAoControlBits = new BitSet(3);
-	private final int[] vertexData = new int[EncodingFormat.QUAD_STRIDE];
-
-	private void calcVanilla(MutableQuadViewImpl quad, float[] aoDest, int[] lightDest) {
-		vanillaAoControlBits.clear();
-		final Direction lightFace = quad.lightFace();
-		quad.toVanilla(vertexData, 0);
-
-		VanillaAoHelper.updateShape(blockInfo.blockView, blockInfo.blockState, blockInfo.blockPos, vertexData, lightFace, vanillaAoData, vanillaAoControlBits);
-		vanillaCalc.apply(blockInfo.blockView, blockInfo.blockState, blockInfo.blockPos, lightFace, vanillaAoData, vanillaAoControlBits, quad.hasShade());
-
-		System.arraycopy(vanillaCalc.brightness, 0, aoDest, 0, 4);
-		System.arraycopy(vanillaCalc.light, 0, lightDest, 0, 4);
-	}
-
-	private void calcFastVanilla(MutableQuadViewImpl quad) {
-		int flags = quad.geometryFlags();
-
-		// force to block face if shape is full cube - matches vanilla logic
-		if ((flags & LIGHT_FACE_FLAG) == 0 && (flags & AXIS_ALIGNED_FLAG) != 0 && blockInfo.blockState.isCollisionShapeFullBlock(blockInfo.blockView, blockInfo.blockPos)) {
-			flags |= LIGHT_FACE_FLAG;
-		}
-
-		if ((flags & CUBIC_FLAG) == 0) {
-			vanillaPartialFace(quad, quad.lightFace(), (flags & LIGHT_FACE_FLAG) != 0, quad.hasShade());
-		} else {
-			vanillaFullFace(quad, quad.lightFace(), (flags & LIGHT_FACE_FLAG) != 0, quad.hasShade());
-		}
-	}
-
-	private void calcEnhanced(MutableQuadViewImpl quad) {
-		switch (quad.geometryFlags()) {
-		case AXIS_ALIGNED_FLAG | CUBIC_FLAG | LIGHT_FACE_FLAG:
-		case AXIS_ALIGNED_FLAG | LIGHT_FACE_FLAG:
-			vanillaPartialFace(quad, quad.lightFace(), true, quad.hasShade());
-			break;
-
-		case AXIS_ALIGNED_FLAG | CUBIC_FLAG:
-		case AXIS_ALIGNED_FLAG:
-			blendedPartialFace(quad, quad.lightFace(), quad.hasShade());
-			break;
-
-		default:
-			irregularFace(quad, quad.hasShade());
-			break;
-		}
-	}
-
-	private void vanillaFullFace(QuadViewImpl quad, Direction lightFace, boolean isOnLightFace, boolean shade) {
-		computeFace(lightFace, isOnLightFace, shade).toArray(ao, light, VERTEX_MAP[lightFace.get3DDataValue()]);
-	}
-
-	private void vanillaPartialFace(QuadViewImpl quad, Direction lightFace, boolean isOnLightFace, boolean shade) {
-		AoFaceData faceData = computeFace(lightFace, isOnLightFace, shade);
-		final WeightFunction wFunc = AoFace.get(lightFace).weightFunc;
-		final float[] w = this.w;
-
-		for (int i = 0; i < 4; i++) {
-			wFunc.apply(quad, i, w);
-			light[i] = faceData.weightedCombinedLight(w);
-			ao[i] = faceData.weigtedAo(w);
-		}
-	}
-
-	/** used in {@link #blendedInsetFace(QuadViewImpl quad, int vertexIndex, Direction lightFace, boolean shade)} as return variable to avoid new allocation. */
-	AoFaceData tmpFace = new AoFaceData();
-
-	/** Returns linearly interpolated blend of outer and inner face based on depth of vertex in face. */
-	private AoFaceData blendedInsetFace(QuadViewImpl quad, int vertexIndex, Direction lightFace, boolean shade) {
-		final float w1 = AoFace.get(lightFace).depthFunc.apply(quad, vertexIndex);
-		final float w0 = 1 - w1;
-		return AoFaceData.weightedMean(computeFace(lightFace, true, shade), w0, computeFace(lightFace, false, shade), w1, tmpFace);
-	}
-
-	/**
-	 * Like {@link #blendedInsetFace(QuadViewImpl quad, int vertexIndex, Direction lightFace, boolean shade)} but optimizes if depth is 0 or 1.
-	 * Used for irregular faces when depth varies by vertex to avoid unneeded interpolation.
-	 */
-	private AoFaceData gatherInsetFace(QuadViewImpl quad, int vertexIndex, Direction lightFace, boolean shade) {
-		final float w1 = AoFace.get(lightFace).depthFunc.apply(quad, vertexIndex);
-
-		if (Mth.equal(w1, 0)) {
-			return computeFace(lightFace, true, shade);
-		} else if (Mth.equal(w1, 1)) {
-			return computeFace(lightFace, false, shade);
-		} else {
-			final float w0 = 1 - w1;
-			return AoFaceData.weightedMean(computeFace(lightFace, true, shade), w0, computeFace(lightFace, false, shade), w1, tmpFace);
-		}
-	}
-
-	private void blendedPartialFace(QuadViewImpl quad, Direction lightFace, boolean shade) {
-		AoFaceData faceData = blendedInsetFace(quad, 0, lightFace, shade);
-		final WeightFunction wFunc = AoFace.get(lightFace).weightFunc;
-
-		for (int i = 0; i < 4; i++) {
-			wFunc.apply(quad, i, w);
-			light[i] = faceData.weightedCombinedLight(w);
-			ao[i] = faceData.weigtedAo(w);
-		}
-	}
-
-	/** used exclusively in irregular face to avoid new heap allocations each call. */
-	private final Vector3f vertexNormal = new Vector3f();
-
-	private void irregularFace(MutableQuadViewImpl quad, boolean shade) {
-		final Vector3f faceNorm = quad.faceNormal();
-		Vector3f normal;
-		final float[] w = this.w;
-		final float[] aoResult = this.ao;
-		final int[] lightResult = this.light;
-
-		for (int i = 0; i < 4; i++) {
-			normal = quad.hasNormal(i) ? quad.copyNormal(i, vertexNormal) : faceNorm;
-			float ao = 0, sky = 0, block = 0, maxAo = 0;
-			int maxSky = 0, maxBlock = 0;
-
-			final float x = normal.x();
-
-			if (!Mth.equal(0f, x)) {
-				final Direction face = x > 0 ? Direction.EAST : Direction.WEST;
-				final AoFaceData fd = gatherInsetFace(quad, i, face, shade);
-				AoFace.get(face).weightFunc.apply(quad, i, w);
-				final float n = x * x;
-				final float a = fd.weigtedAo(w);
-				final int s = fd.weigtedSkyLight(w);
-				final int b = fd.weigtedBlockLight(w);
-				ao += n * a;
-				sky += n * s;
-				block += n * b;
-				maxAo = a;
-				maxSky = s;
-				maxBlock = b;
-			}
-
-			final float y = normal.y();
-
-			if (!Mth.equal(0f, y)) {
-				final Direction face = y > 0 ? Direction.UP : Direction.DOWN;
-				final AoFaceData fd = gatherInsetFace(quad, i, face, shade);
-				AoFace.get(face).weightFunc.apply(quad, i, w);
-				final float n = y * y;
-				final float a = fd.weigtedAo(w);
-				final int s = fd.weigtedSkyLight(w);
-				final int b = fd.weigtedBlockLight(w);
-				ao += n * a;
-				sky += n * s;
-				block += n * b;
-				maxAo = Math.max(maxAo, a);
-				maxSky = Math.max(maxSky, s);
-				maxBlock = Math.max(maxBlock, b);
-			}
-
-			final float z = normal.z();
-
-			if (!Mth.equal(0f, z)) {
-				final Direction face = z > 0 ? Direction.SOUTH : Direction.NORTH;
-				final AoFaceData fd = gatherInsetFace(quad, i, face, shade);
-				AoFace.get(face).weightFunc.apply(quad, i, w);
-				final float n = z * z;
-				final float a = fd.weigtedAo(w);
-				final int s = fd.weigtedSkyLight(w);
-				final int b = fd.weigtedBlockLight(w);
-				ao += n * a;
-				sky += n * s;
-				block += n * b;
-				maxAo = Math.max(maxAo, a);
-				maxSky = Math.max(maxSky, s);
-				maxBlock = Math.max(maxBlock, b);
-			}
-
-			aoResult[i] = (ao + maxAo) * 0.5f;
-			lightResult[i] = (((int) ((sky + maxSky) * 0.5f) & 0xF0) << 16) | ((int) ((block + maxBlock) * 0.5f) & 0xF0);
-		}
-	}
-
-	private AoFaceData computeFace(Direction lightFace, boolean isOnBlockFace, boolean shade) {
-		final int faceDataIndex = shade ? (isOnBlockFace ? lightFace.get3DDataValue() : lightFace.get3DDataValue() + 6) : (isOnBlockFace ? lightFace.get3DDataValue() + 12 : lightFace.get3DDataValue() + 18);
-		final int mask = 1 << faceDataIndex;
-		final AoFaceData result = faceData[faceDataIndex];
-
-		if ((completionFlags & mask) == 0) {
-			completionFlags |= mask;
-			computeFace(result, lightFace, isOnBlockFace, shade);
-		}
-
-		return result;
-	}
-
-	/**
-	 * Computes smoothed brightness and Ao shading for four corners of a block face.
-	 * Outer block face is what you normally see and what you get when the second
-	 * parameter is true. Inner is light *within* the block and usually darker.
-	 * It is blended with the outer face for inset surfaces, but is also used directly
-	 * in vanilla logic for some blocks that aren't full opaque cubes.
-	 * Except for parameterization, the logic itself is practically identical to vanilla.
-	 */
-	private void computeFace(AoFaceData result, Direction lightFace, boolean isOnBlockFace, boolean shade) {
-		final BlockAndTintGetter world = blockInfo.blockView;
-		final BlockPos pos = blockInfo.blockPos;
-		final BlockState blockState = blockInfo.blockState;
-		final BlockPos.MutableBlockPos lightPos = this.lightPos;
-		final BlockPos.MutableBlockPos searchPos = this.searchPos;
-		BlockState searchState;
-
-		if (isOnBlockFace) {
-			lightPos.setWithOffset(pos, lightFace);
-		} else {
-			lightPos.set(pos);
-		}
-
-		AoFace aoFace = AoFace.get(lightFace);
-
-		// Vanilla was further offsetting the positions for opaque block checks in the
-		// direction of the light face, but it was actually mis-sampling and causing
-		// visible artifacts in certain situations
-
-		searchPos.setWithOffset(lightPos, aoFace.neighbors[0]);
-		searchState = world.getBlockState(searchPos);
-		final int light0 = light(searchPos, searchState);
-		final float ao0 = ao(searchPos, searchState);
-		final boolean em0 = hasEmissiveLighting(world, searchPos, searchState);
-
-		if (!Indigo.FIX_SMOOTH_LIGHTING_OFFSET) {
-			searchPos.move(lightFace);
-			searchState = world.getBlockState(searchPos);
-		}
-
-		final boolean isClear0 = !searchState.isViewBlocking(world, searchPos) || searchState.getLightBlock(world, searchPos) == 0;
-
-		searchPos.setWithOffset(lightPos, aoFace.neighbors[1]);
-		searchState = world.getBlockState(searchPos);
-		final int light1 = light(searchPos, searchState);
-		final float ao1 = ao(searchPos, searchState);
-		final boolean em1 = hasEmissiveLighting(world, searchPos, searchState);
-
-		if (!Indigo.FIX_SMOOTH_LIGHTING_OFFSET) {
-			searchPos.move(lightFace);
-			searchState = world.getBlockState(searchPos);
-		}
-
-		final boolean isClear1 = !searchState.isViewBlocking(world, searchPos) || searchState.getLightBlock(world, searchPos) == 0;
-
-		searchPos.setWithOffset(lightPos, aoFace.neighbors[2]);
-		searchState = world.getBlockState(searchPos);
-		final int light2 = light(searchPos, searchState);
-		final float ao2 = ao(searchPos, searchState);
-		final boolean em2 = hasEmissiveLighting(world, searchPos, searchState);
-
-		if (!Indigo.FIX_SMOOTH_LIGHTING_OFFSET) {
-			searchPos.move(lightFace);
-			searchState = world.getBlockState(searchPos);
-		}
-
-		final boolean isClear2 = !searchState.isViewBlocking(world, searchPos) || searchState.getLightBlock(world, searchPos) == 0;
-
-		searchPos.setWithOffset(lightPos, aoFace.neighbors[3]);
-		searchState = world.getBlockState(searchPos);
-		final int light3 = light(searchPos, searchState);
-		final float ao3 = ao(searchPos, searchState);
-		final boolean em3 = hasEmissiveLighting(world, searchPos, searchState);
-
-		if (!Indigo.FIX_SMOOTH_LIGHTING_OFFSET) {
-			searchPos.move(lightFace);
-			searchState = world.getBlockState(searchPos);
-		}
-
-		final boolean isClear3 = !searchState.isViewBlocking(world, searchPos) || searchState.getLightBlock(world, searchPos) == 0;
-
-		// c = corner - values at corners of face
-		int cLight0, cLight1, cLight2, cLight3;
-		float cAo0, cAo1, cAo2, cAo3;
-		boolean cEm0, cEm1, cEm2, cEm3;
-
-		// If neighbors on both sides of the corner are opaque, then apparently we use the light/shade
-		// from one of the sides adjacent to the corner.  If either neighbor is clear (no light subtraction)
-		// then we use values from the outwardly diagonal corner. (outwardly = position is one more away from light face)
-		if (!isClear2 && !isClear0) {
-			cAo0 = ao0;
-			cLight0 = light0;
-			cEm0 = em0;
-		} else {
-			searchPos.set(lightPos).move(aoFace.neighbors[0]).move(aoFace.neighbors[2]);
-			searchState = world.getBlockState(searchPos);
-			cAo0 = ao(searchPos, searchState);
-			cLight0 = light(searchPos, searchState);
-			cEm0 = hasEmissiveLighting(world, searchPos, searchState);
-		}
-
-		if (!isClear3 && !isClear0) {
-			cAo1 = ao0;
-			cLight1 = light0;
-			cEm1 = em0;
-		} else {
-			searchPos.set(lightPos).move(aoFace.neighbors[0]).move(aoFace.neighbors[3]);
-			searchState = world.getBlockState(searchPos);
-			cAo1 = ao(searchPos, searchState);
-			cLight1 = light(searchPos, searchState);
-			cEm1 = hasEmissiveLighting(world, searchPos, searchState);
-		}
-
-		if (!isClear2 && !isClear1) {
-			cAo2 = ao1;
-			cLight2 = light1;
-			cEm2 = em1;
-		} else {
-			searchPos.set(lightPos).move(aoFace.neighbors[1]).move(aoFace.neighbors[2]);
-			searchState = world.getBlockState(searchPos);
-			cAo2 = ao(searchPos, searchState);
-			cLight2 = light(searchPos, searchState);
-			cEm2 = hasEmissiveLighting(world, searchPos, searchState);
-		}
-
-		if (!isClear3 && !isClear1) {
-			cAo3 = ao1;
-			cLight3 = light1;
-			cEm3 = em1;
-		} else {
-			searchPos.set(lightPos).move(aoFace.neighbors[1]).move(aoFace.neighbors[3]);
-			searchState = world.getBlockState(searchPos);
-			cAo3 = ao(searchPos, searchState);
-			cLight3 = light(searchPos, searchState);
-			cEm3 = hasEmissiveLighting(world, searchPos, searchState);
-		}
-
-		// If on block face or neighbor isn't occluding, "center" will be neighbor brightness
-		// Doesn't use light pos because logic not based solely on this block's geometry
-		int lightCenter;
-		boolean emCenter;
-		searchPos.setWithOffset(pos, lightFace);
-		searchState = world.getBlockState(searchPos);
-
-		if (isOnBlockFace || !searchState.isSolidRender(world, searchPos)) {
-			lightCenter = light(searchPos, searchState);
-			emCenter = hasEmissiveLighting(world, searchPos, searchState);
-		} else {
-			lightCenter = light(pos, blockState);
-			emCenter = hasEmissiveLighting(world, pos, blockState);
-		}
-
-		float aoCenter = ao(lightPos, world.getBlockState(lightPos));
-		float worldBrightness = world.getShade(lightFace, shade);
-
-		result.a0 = ((ao3 + ao0 + cAo1 + aoCenter) * 0.25F) * worldBrightness;
-		result.a1 = ((ao2 + ao0 + cAo0 + aoCenter) * 0.25F) * worldBrightness;
-		result.a2 = ((ao2 + ao1 + cAo2 + aoCenter) * 0.25F) * worldBrightness;
-		result.a3 = ((ao3 + ao1 + cAo3 + aoCenter) * 0.25F) * worldBrightness;
-
-		result.l0(meanBrightness(light3, light0, cLight1, lightCenter, em3, em0, cEm1, emCenter));
-		result.l1(meanBrightness(light2, light0, cLight0, lightCenter, em2, em0, cEm0, emCenter));
-		result.l2(meanBrightness(light2, light1, cLight2, lightCenter, em2, em1, cEm2, emCenter));
-		result.l3(meanBrightness(light3, light1, cLight3, lightCenter, em3, em1, cEm3, emCenter));
-	}
-
-	public static int getLightmapCoordinates(BlockAndTintGetter world, BlockState state, BlockPos pos) {
-		if (Indigo.FIX_EMISSIVE_LIGHTING) {
-			// Same as WorldRenderer.getLightmapCoordinates but without the hasEmissiveLighting check.
-			// We don't want emissive lighting to influence the minimum lightmap in a quad,
-			// so when the fix is enabled we apply emissive lighting after the quad minimum is computed.
-			// See AoCalculator#meanBrightness.
-			int i = world.getBrightness(LightLayer.SKY, pos);
-			int j = world.getBrightness(LightLayer.BLOCK, pos);
-			int k = state.getLightEmission();
-
-			if (j < k) {
-				j = k;
-			}
-
-			return i << 20 | j << 4;
-		} else {
-			return LevelRenderer.getLightColor(world, state, pos);
-		}
-	}
-
-	private boolean hasEmissiveLighting(BlockAndTintGetter world, BlockPos pos, BlockState state) {
-		if (Indigo.FIX_EMISSIVE_LIGHTING) {
-			return state.emissiveRendering(world, pos);
-		} else {
-			// When the fix is disabled, emissive lighting was already applied and does not need to be accounted for.
-			return false;
-		}
-	}
-
-	/**
-	 * Vanilla code excluded missing light values from mean but was not isotropic.
-	 * Still need to substitute or edges are too dark but consistently use the min
-	 * value from all four samples.
-	 */
-	private static int meanBrightness(int lightA, int lightB, int lightC, int lightD, boolean emA, boolean emB, boolean emC, boolean emD) {
-		if (Indigo.FIX_MEAN_LIGHT_CALCULATION) {
-			if (lightA == 0 || lightB == 0 || lightC == 0 || lightD == 0) {
-				// Normalize values to non-zero minimum
-				final int min = nonZeroMin(nonZeroMin(lightA, lightB), nonZeroMin(lightC, lightD));
-
-				lightA = Math.max(lightA, min);
-				lightB = Math.max(lightB, min);
-				lightC = Math.max(lightC, min);
-				lightD = Math.max(lightD, min);
-			}
-
-			if (Indigo.FIX_EMISSIVE_LIGHTING) {
-				// Apply the fullbright lightmap from emissive blocks at the very end so it cannot influence
-				// the minimum lightmap and produce incorrect results (for example, sculk sensors in a dark room)
-				if (emA) lightA = LightTexture.FULL_BRIGHT;
-				if (emB) lightB = LightTexture.FULL_BRIGHT;
-				if (emC) lightC = LightTexture.FULL_BRIGHT;
-				if (emD) lightD = LightTexture.FULL_BRIGHT;
-			}
-
-			return meanInnerBrightness(lightA, lightB, lightC, lightD);
-		} else {
-			return vanillaMeanBrightness(lightA, lightB, lightC, lightD);
-		}
-	}
-
-	/** vanilla logic - excludes missing light values from mean and has anisotropy defect mentioned above. */
-	private static int vanillaMeanBrightness(int a, int b, int c, int d) {
-		if (a == 0) a = d;
-		if (b == 0) b = d;
-		if (c == 0) c = d;
-		// bitwise divide by 4, clamp to expected (positive) range
-		return a + b + c + d >> 2 & 0xFF00FF;
-	}
-
-	private static int meanInnerBrightness(int a, int b, int c, int d) {
-		// bitwise divide by 4, clamp to expected (positive) range
-		return a + b + c + d >> 2 & 0xFF00FF;
-	}
-
-	private static int nonZeroMin(int a, int b) {
-		if (a == 0) return b;
-		if (b == 0) return a;
-		return Math.min(a, b);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoConfig.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoConfig.java
deleted file mode 100644
index 38c7fd54abeea277484f53076b3836e70946c23c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoConfig.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-/**
- * Defines the configuration modes for the AoCalculator.
- * This determine the appearance of smooth lighting.
- */
-public enum AoConfig {
-	/**
-	 * Quads will be lit with a slightly modified copy of the vanilla ambient
-	 * occlusion calculator. Quads with triangles, non-square or slopes will
-	 * not look good in this model.  This model also requires a fixed vertex
-	 * winding order for all quads.
-	 */
-	VANILLA,
-
-	/**
-	 * Quads are lit with enhanced lighting logic.  Enhanced lighting will be
-	 * similar to vanilla lighting for face-aligned quads, and will be different
-	 * (generally better) for triangles, non-square and sloped quads.  Axis-
-	 * aligned quads not on the block face will have interpolated brightness based
-	 * on depth instead of the all-or-nothing brightness of vanilla.
-	 *
-	 * <p>Non-vanilla quads can have vertices in any (counter-clockwise) order.
-	 */
-	ENHANCED,
-
-	/**
-	 * Enhanced lighting is configured to mimic vanilla lighting. Results will be
-	 * identical to vanilla except that non-square quads, triangles, etc. will
-	 * not be sensitive to vertex order.  However shading will not be interpolated
-	 * as it is with enhanced. These quads do not occur in vanilla models.
-	 * Not recommended for models with complex geometry, but may be faster than
-	 * the vanilla calculator when vanilla lighting is desired.
-	 */
-	EMULATE,
-
-	/**
-	 * Quads from vanilla models are lit using {@link #EMULATE} mode and all
-	 * other quads are lit using {@link #ENHANCED} mode.  This mode ensures
-	 * all vanilla models retain their normal appearance while providing
-	 * better lighting for models with more complex geometry.  However,
-	 * inconsistencies may be visible when vanilla and non-vanilla models are
-	 * near each other.
-	 */
-	HYBRID;
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoFace.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoFace.java
deleted file mode 100644
index 828492fbf1702573ea32a40b22a8893159f9a5d4..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoFace.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-import static net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoVertexClampFunction.CLAMP_FUNC;
-import static net.minecraft.core.Direction.DOWN;
-import static net.minecraft.core.Direction.EAST;
-import static net.minecraft.core.Direction.NORTH;
-import static net.minecraft.core.Direction.SOUTH;
-import static net.minecraft.core.Direction.UP;
-import static net.minecraft.core.Direction.WEST;
-
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.QuadViewImpl;
-import net.minecraft.Util;
-import net.minecraft.core.Direction;
-
-/**
- * Adapted from vanilla BlockModelRenderer.AoCalculator.
- */
-enum AoFace {
-	AOF_DOWN(new Direction[] { WEST, EAST, NORTH, SOUTH }, (q, i) -> CLAMP_FUNC.clamp(q.y(i)), (q, i, w) -> {
-		final float u = CLAMP_FUNC.clamp(q.x(i));
-		final float v = CLAMP_FUNC.clamp(q.z(i));
-		w[0] = (1 - u) * v;
-		w[1] = (1 - u) * (1 - v);
-		w[2] = u * (1 - v);
-		w[3] = u * v;
-	}),
-	AOF_UP(new Direction[] { EAST, WEST, NORTH, SOUTH }, (q, i) -> 1 - CLAMP_FUNC.clamp(q.y(i)), (q, i, w) -> {
-		final float u = CLAMP_FUNC.clamp(q.x(i));
-		final float v = CLAMP_FUNC.clamp(q.z(i));
-		w[0] = u * v;
-		w[1] = u * (1 - v);
-		w[2] = (1 - u) * (1 - v);
-		w[3] = (1 - u) * v;
-	}),
-	AOF_NORTH(new Direction[] { UP, DOWN, EAST, WEST }, (q, i) -> CLAMP_FUNC.clamp(q.z(i)), (q, i, w) -> {
-		final float u = CLAMP_FUNC.clamp(q.y(i));
-		final float v = CLAMP_FUNC.clamp(q.x(i));
-		w[0] = u * (1 - v);
-		w[1] = u * v;
-		w[2] = (1 - u) * v;
-		w[3] = (1 - u) * (1 - v);
-	}),
-	AOF_SOUTH(new Direction[] { WEST, EAST, DOWN, UP }, (q, i) -> 1 - CLAMP_FUNC.clamp(q.z(i)), (q, i, w) -> {
-		final float u = CLAMP_FUNC.clamp(q.y(i));
-		final float v = CLAMP_FUNC.clamp(q.x(i));
-		w[0] = u * (1 - v);
-		w[1] = (1 - u) * (1 - v);
-		w[2] = (1 - u) * v;
-		w[3] = u * v;
-	}),
-	AOF_WEST(new Direction[] { UP, DOWN, NORTH, SOUTH }, (q, i) -> CLAMP_FUNC.clamp(q.x(i)), (q, i, w) -> {
-		final float u = CLAMP_FUNC.clamp(q.y(i));
-		final float v = CLAMP_FUNC.clamp(q.z(i));
-		w[0] = u * v;
-		w[1] = u * (1 - v);
-		w[2] = (1 - u) * (1 - v);
-		w[3] = (1 - u) * v;
-	}),
-	AOF_EAST(new Direction[] { DOWN, UP, NORTH, SOUTH }, (q, i) -> 1 - CLAMP_FUNC.clamp(q.x(i)), (q, i, w) -> {
-		final float u = CLAMP_FUNC.clamp(q.y(i));
-		final float v = CLAMP_FUNC.clamp(q.z(i));
-		w[0] = (1 - u) * v;
-		w[1] = (1 - u) * (1 - v);
-		w[2] = u * (1 - v);
-		w[3] = u * v;
-	});
-
-	final Direction[] neighbors;
-	final WeightFunction weightFunc;
-	final Vertex2Float depthFunc;
-
-	AoFace(Direction[] faces, Vertex2Float depthFunc, WeightFunction weightFunc) {
-		this.neighbors = faces;
-		this.depthFunc = depthFunc;
-		this.weightFunc = weightFunc;
-	}
-
-	private static final AoFace[] values = Util.make(new AoFace[6], (neighborData) -> {
-		neighborData[DOWN.get3DDataValue()] = AOF_DOWN;
-		neighborData[UP.get3DDataValue()] = AOF_UP;
-		neighborData[NORTH.get3DDataValue()] = AOF_NORTH;
-		neighborData[SOUTH.get3DDataValue()] = AOF_SOUTH;
-		neighborData[WEST.get3DDataValue()] = AOF_WEST;
-		neighborData[EAST.get3DDataValue()] = AOF_EAST;
-	});
-
-	public static AoFace get(Direction direction) {
-		return values[direction.get3DDataValue()];
-	}
-
-	/**
-	 * Implementations handle bilinear interpolation of a point on a light face
-	 * by computing weights for each corner of the light face. Relies on the fact
-	 * that each face is a unit cube. Uses coordinates from axes orthogonal to face
-	 * as distance from the edge of the cube, flipping as needed. Multiplying distance
-	 * coordinate pairs together gives sub-area that are the corner weights.
-	 * Weights sum to 1 because it is a unit cube. Values are stored in the provided array.
-	 */
-	@FunctionalInterface
-	interface WeightFunction {
-		void apply(QuadViewImpl q, int vertexIndex, float[] out);
-	}
-
-	@FunctionalInterface
-	interface Vertex2Float {
-		float apply(QuadViewImpl q, int vertexIndex);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoFaceData.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoFaceData.java
deleted file mode 100644
index 06f091b370e99344fc9bea1a236320cdddde2154..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoFaceData.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-/**
- * Holds per-corner results for a single block face.
- * Handles caching and provides various utility methods to simplify code elsewhere.
- */
-class AoFaceData {
-	float a0;
-	float a1;
-	float a2;
-	float a3;
-	int b0;
-	int b1;
-	int b2;
-	int b3;
-	int s0;
-	int s1;
-	int s2;
-	int s3;
-
-	void l0(int l0) {
-		this.b0 = l0 & 0xFFFF;
-		this.s0 = (l0 >>> 16) & 0xFFFF;
-	}
-
-	void l1(int l1) {
-		this.b1 = l1 & 0xFFFF;
-		this.s1 = (l1 >>> 16) & 0xFFFF;
-	}
-
-	void l2(int l2) {
-		this.b2 = l2 & 0xFFFF;
-		this.s2 = (l2 >>> 16) & 0xFFFF;
-	}
-
-	void l3(int l3) {
-		this.b3 = l3 & 0xFFFF;
-		this.s3 = (l3 >>> 16) & 0xFFFF;
-	}
-
-	int weigtedBlockLight(float[] w) {
-		return (int) (b0 * w[0] + b1 * w[1] + b2 * w[2] + b3 * w[3]) & 0xFF;
-	}
-
-	int weigtedSkyLight(float[] w) {
-		return (int) (s0 * w[0] + s1 * w[1] + s2 * w[2] + s3 * w[3]) & 0xFF;
-	}
-
-	int weightedCombinedLight(float[] w) {
-		return weigtedSkyLight(w) << 16 | weigtedBlockLight(w);
-	}
-
-	float weigtedAo(float[] w) {
-		return a0 * w[0] + a1 * w[1] + a2 * w[2] + a3 * w[3];
-	}
-
-	void toArray(float[] aOut, int[] bOut, int[] vertexMap) {
-		aOut[vertexMap[0]] = a0;
-		aOut[vertexMap[1]] = a1;
-		aOut[vertexMap[2]] = a2;
-		aOut[vertexMap[3]] = a3;
-		bOut[vertexMap[0]] = s0 << 16 | b0;
-		bOut[vertexMap[1]] = s1 << 16 | b1;
-		bOut[vertexMap[2]] = s2 << 16 | b2;
-		bOut[vertexMap[3]] = s3 << 16 | b3;
-	}
-
-	static AoFaceData weightedMean(AoFaceData in0, float w0, AoFaceData in1, float w1, AoFaceData out) {
-		out.a0 = in0.a0 * w0 + in1.a0 * w1;
-		out.a1 = in0.a1 * w0 + in1.a1 * w1;
-		out.a2 = in0.a2 * w0 + in1.a2 * w1;
-		out.a3 = in0.a3 * w0 + in1.a3 * w1;
-
-		out.b0 = (int) (in0.b0 * w0 + in1.b0 * w1);
-		out.b1 = (int) (in0.b1 * w0 + in1.b1 * w1);
-		out.b2 = (int) (in0.b2 * w0 + in1.b2 * w1);
-		out.b3 = (int) (in0.b3 * w0 + in1.b3 * w1);
-
-		out.s0 = (int) (in0.s0 * w0 + in1.s0 * w1);
-		out.s1 = (int) (in0.s1 * w0 + in1.s1 * w1);
-		out.s2 = (int) (in0.s2 * w0 + in1.s2 * w1);
-		out.s3 = (int) (in0.s3 * w0 + in1.s3 * w1);
-
-		return out;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoLuminanceFix.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoLuminanceFix.java
deleted file mode 100644
index dc6bbfd420d7f63efd16977b6b658003317cd099..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoLuminanceFix.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-import net.fabricmc.fabric.impl.client.indigo.Indigo;
-import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.BlockGetter;
-import net.minecraft.world.level.block.state.BlockState;
-
-/**
- * Implements a fix to prevent luminous blocks from casting AO shade.
- * Will give normal result if fix is disabled.
- */
-@FunctionalInterface
-public interface AoLuminanceFix {
-	float apply(BlockGetter view, BlockPos pos, BlockState state);
-
-	AoLuminanceFix INSTANCE = Indigo.FIX_LUMINOUS_AO_SHADE ? AoLuminanceFix::fixed : AoLuminanceFix::vanilla;
-
-	static float vanilla(BlockGetter view, BlockPos pos, BlockState state) {
-		return state.getShadeBrightness(view, pos);
-	}
-
-	static float fixed(BlockGetter view, BlockPos pos, BlockState state) {
-		return state.getLightEmission() == 0 ? state.getShadeBrightness(view, pos) : 1f;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoVertexClampFunction.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoVertexClampFunction.java
deleted file mode 100644
index 108b18d6e75a5d75ff5764d36054261df607e841..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/AoVertexClampFunction.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-import net.fabricmc.fabric.impl.client.indigo.Indigo;
-
-@FunctionalInterface
-interface AoVertexClampFunction {
-	float clamp(float x);
-
-	AoVertexClampFunction CLAMP_FUNC = Indigo.FIX_EXTERIOR_VERTEX_LIGHTING ? x -> x < 0f ? 0f : (x > 1f ? 1f : x) : x -> x;
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/VanillaAoHelper.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/VanillaAoHelper.java
deleted file mode 100644
index 2b917adbc020d9ea8df239b32417b98d07585ffc..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/VanillaAoHelper.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-import java.util.BitSet;
-import net.minecraft.client.renderer.block.ModelBlockRenderer;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.block.state.BlockState;
-
-public class VanillaAoHelper {
-	// Renderer method we call isn't declared as static, but uses no
-	// instance data and is called from multiple threads in vanilla also.
-	private static ModelBlockRenderer blockRenderer;
-
-	public static void initialize(ModelBlockRenderer instance) {
-		blockRenderer = instance;
-	}
-
-	public static void updateShape(BlockAndTintGetter blockRenderView, BlockState blockState, BlockPos pos, int[] vertexData, Direction face, float[] aoData, BitSet controlBits) {
-		blockRenderer.calculateShape(blockRenderView, blockState, pos, vertexData, face, aoData, controlBits);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/package-info.java
deleted file mode 100644
index 3dd9240e7f1b45717338260b39b8de2834e302b1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/aocalc/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo.renderer.aocalc;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/ColorHelper.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/ColorHelper.java
deleted file mode 100644
index e5fe8fda52ea39ab7316e0d489a2c271eb7a6143..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/ColorHelper.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.helper;
-
-import java.nio.ByteOrder;
-
-/**
- * Static routines of general utility for renderer implementations.
- * Renderers are not required to use these helpers, but they were
- * designed to be usable without the default renderer.
- */
-public abstract class ColorHelper {
-	private ColorHelper() { }
-
-	private static final boolean BIG_ENDIAN = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;
-
-	/** Component-wise multiply. Components need to be in same order in both inputs! */
-	public static int multiplyColor(int color1, int color2) {
-		if (color1 == -1) {
-			return color2;
-		} else if (color2 == -1) {
-			return color1;
-		}
-
-		final int alpha = ((color1 >>> 24) & 0xFF) * ((color2 >>> 24) & 0xFF) / 0xFF;
-		final int red = ((color1 >>> 16) & 0xFF) * ((color2 >>> 16) & 0xFF) / 0xFF;
-		final int green = ((color1 >>> 8) & 0xFF) * ((color2 >>> 8) & 0xFF) / 0xFF;
-		final int blue = (color1 & 0xFF) * (color2 & 0xFF) / 0xFF;
-
-		return (alpha << 24) | (red << 16) | (green << 8) | blue;
-	}
-
-	/** Multiplies three lowest components by shade. High byte (usually alpha) unchanged. */
-	public static int multiplyRGB(int color, float shade) {
-		final int alpha = ((color >>> 24) & 0xFF);
-		final int red = (int) (((color >>> 16) & 0xFF) * shade);
-		final int green = (int) (((color >>> 8) & 0xFF) * shade);
-		final int blue = (int) ((color & 0xFF) * shade);
-
-		return (alpha << 24) | (red << 16) | (green << 8) | blue;
-	}
-
-	/**
-	 * Component-wise max.
-	 */
-	public static int maxBrightness(int b0, int b1) {
-		if (b0 == 0) return b1;
-		if (b1 == 0) return b0;
-
-		return Math.max(b0 & 0xFFFF, b1 & 0xFFFF) | Math.max(b0 & 0xFFFF0000, b1 & 0xFFFF0000);
-	}
-
-	/*
-	Renderer color format: ARGB (0xAARRGGBB)
-	Vanilla color format (little endian): ABGR (0xAABBGGRR)
-	Vanilla color format (big endian): RGBA (0xRRGGBBAA)
-
-	Why does the vanilla color format change based on endianness?
-	See VertexConsumer#quad. Quad data is loaded as integers into
-	a native byte order buffer. Color is read directly from bytes
-	12, 13, 14 of each vertex. A different byte order will yield
-	different results.
-
-	The renderer always uses ARGB because the API color methods
-	always consume and return ARGB. Vanilla block and item colors
-	also use ARGB.
-	 */
-
-	/**
-	 * Converts from ARGB color to ABGR color if little endian or RGBA color if big endian.
-	 */
-	public static int toVanillaColor(int color) {
-		if (color == -1) {
-			return -1;
-		}
-
-		if (BIG_ENDIAN) {
-			// ARGB to RGBA
-			return ((color & 0x00FFFFFF) << 8) | ((color & 0xFF000000) >>> 24);
-		} else {
-			// ARGB to ABGR
-			return (color & 0xFF00FF00) | ((color & 0x00FF0000) >>> 16) | ((color & 0x000000FF) << 16);
-		}
-	}
-
-	/**
-	 * Converts to ARGB color from ABGR color if little endian or RGBA color if big endian.
-	 */
-	public static int fromVanillaColor(int color) {
-		if (color == -1) {
-			return -1;
-		}
-
-		if (BIG_ENDIAN) {
-			// RGBA to ARGB
-			return ((color & 0xFFFFFF00) >>> 8) | ((color & 0x000000FF) << 24);
-		} else {
-			// ABGR to ARGB
-			return (color & 0xFF00FF00) | ((color & 0x00FF0000) >>> 16) | ((color & 0x000000FF) << 16);
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/GeometryHelper.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/GeometryHelper.java
deleted file mode 100644
index 01ceca52159a39c9d882442534dbbc65f806a2af..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/GeometryHelper.java
+++ /dev/null
@@ -1,239 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.helper;
-
-import static net.minecraft.util.Mth.equal;
-
-import org.joml.Vector3f;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadView;
-import net.minecraft.client.renderer.block.model.BakedQuad;
-import net.minecraft.core.Direction;
-import net.minecraft.core.Direction.Axis;
-import net.minecraft.core.Direction.AxisDirection;
-
-/**
- * Static routines of general utility for renderer implementations.
- * Renderers are not required to use these helpers, but they were
- * designed to be usable without the default renderer.
- */
-public abstract class GeometryHelper {
-	private GeometryHelper() { }
-
-	/** set when a quad touches all four corners of a unit cube. */
-	public static final int CUBIC_FLAG = 1;
-
-	/** set when a quad is parallel to (but not necessarily on) a its light face. */
-	public static final int AXIS_ALIGNED_FLAG = CUBIC_FLAG << 1;
-
-	/** set when a quad is coplanar with its light face. Implies {@link #AXIS_ALIGNED_FLAG} */
-	public static final int LIGHT_FACE_FLAG = AXIS_ALIGNED_FLAG << 1;
-
-	/** how many bits quad header encoding should reserve for encoding geometry flags. */
-	public static final int FLAG_BIT_COUNT = 3;
-
-	private static final float EPS_MIN = 0.0001f;
-	private static final float EPS_MAX = 1.0f - EPS_MIN;
-
-	/**
-	 * Analyzes the quad and returns a value with some combination
-	 * of {@link #AXIS_ALIGNED_FLAG}, {@link #LIGHT_FACE_FLAG} and {@link #CUBIC_FLAG}.
-	 * Intended use is to optimize lighting when the geometry is regular.
-	 * Expects convex quads with all points co-planar.
-	 */
-	public static int computeShapeFlags(QuadView quad) {
-		Direction lightFace = quad.lightFace();
-		int bits = 0;
-
-		if (isQuadParallelToFace(lightFace, quad)) {
-			bits |= AXIS_ALIGNED_FLAG;
-
-			if (isParallelQuadOnFace(lightFace, quad)) {
-				bits |= LIGHT_FACE_FLAG;
-			}
-		}
-
-		if (isQuadCubic(lightFace, quad)) {
-			bits |= CUBIC_FLAG;
-		}
-
-		return bits;
-	}
-
-	/**
-	 * Returns true if quad is parallel to the given face.
-	 * Does not validate quad winding order.
-	 * Expects convex quads with all points co-planar.
-	 */
-	public static boolean isQuadParallelToFace(Direction face, QuadView quad) {
-		int i = face.getAxis().ordinal();
-		final float val = quad.posByIndex(0, i);
-		return method_15347(val, quad.posByIndex(1, i)) && method_15347(val, quad.posByIndex(2, i)) && method_15347(val, quad.posByIndex(3, i));
-	}
-
-	/**
-	 * True if quad - already known to be parallel to a face - is actually coplanar with it.
-	 * For compatibility with vanilla resource packs, also true if quad is outside the face.
-	 *
-	 * <p>Test will be unreliable if not already parallel, use {@link #isQuadParallelToFace(Direction, QuadView)}
-	 * for that purpose. Expects convex quads with all points co-planar.
-	 */
-	public static boolean isParallelQuadOnFace(Direction lightFace, QuadView quad) {
-		final float x = quad.posByIndex(0, lightFace.getAxis().ordinal());
-		return lightFace.getAxisDirection() == AxisDirection.POSITIVE ? x >= EPS_MAX : x <= EPS_MIN;
-	}
-
-	/**
-	 * Returns true if quad is truly a quad (not a triangle) and fills a full block cross-section.
-	 * If known to be true, allows use of a simpler/faster AO lighting algorithm.
-	 *
-	 * <p>Does not check if quad is actually coplanar with the light face, nor does it check that all
-	 * quad vertices are coplanar with each other.
-	 *
-	 * <p>Expects convex quads with all points co-planar.
-	 */
-	public static boolean isQuadCubic(Direction lightFace, QuadView quad) {
-		int a, b;
-
-		switch (lightFace) {
-		case EAST:
-		case WEST:
-			a = 1;
-			b = 2;
-			break;
-		case UP:
-		case DOWN:
-			a = 0;
-			b = 2;
-			break;
-		case SOUTH:
-		case NORTH:
-			a = 1;
-			b = 0;
-			break;
-		default:
-			// handle WTF case
-			return false;
-		}
-
-		return confirmSquareCorners(a, b, quad);
-	}
-
-	/**
-	 * Used by {@link #isQuadCubic(Direction, QuadView)}.
-	 * True if quad touches all four corners of unit square.
-	 *
-	 * <p>For compatibility with resource packs that contain models with quads exceeding
-	 * block boundaries, considers corners outside the block to be at the corners.
-	 */
-	private static boolean confirmSquareCorners(int aCoordinate, int bCoordinate, QuadView quad) {
-		int flags = 0;
-
-		for (int i = 0; i < 4; i++) {
-			final float a = quad.posByIndex(i, aCoordinate);
-			final float b = quad.posByIndex(i, bCoordinate);
-
-			if (a <= EPS_MIN) {
-				if (b <= EPS_MIN) {
-					flags |= 1;
-				} else if (b >= EPS_MAX) {
-					flags |= 2;
-				} else {
-					return false;
-				}
-			} else if (a >= EPS_MAX) {
-				if (b <= EPS_MIN) {
-					flags |= 4;
-				} else if (b >= EPS_MAX) {
-					flags |= 8;
-				} else {
-					return false;
-				}
-			} else {
-				return false;
-			}
-		}
-
-		return flags == 15;
-	}
-
-	/**
-	 * Identifies the face to which the quad is most closely aligned.
-	 * This mimics the value that {@link BakedQuad#getDirection()} returns, and is
-	 * used in the vanilla renderer for all diffuse lighting.
-	 *
-	 * <p>Derived from the quad face normal and expects convex quads with all points co-planar.
-	 */
-	public static Direction lightFace(QuadView quad) {
-		final Vector3f normal = quad.faceNormal();
-		switch (GeometryHelper.longestAxis(normal)) {
-		case X:
-			return normal.x() > 0 ? Direction.EAST : Direction.WEST;
-
-		case Y:
-			return normal.y() > 0 ? Direction.UP : Direction.DOWN;
-
-		case Z:
-			return normal.z() > 0 ? Direction.SOUTH : Direction.NORTH;
-
-		default:
-			// handle WTF case
-			return Direction.UP;
-		}
-	}
-
-	/**
-	 * Simple 4-way compare, doesn't handle NaN values.
-	 */
-	public static float min(float a, float b, float c, float d) {
-		final float x = a < b ? a : b;
-		final float y = c < d ? c : d;
-		return x < y ? x : y;
-	}
-
-	/**
-	 * Simple 4-way compare, doesn't handle NaN values.
-	 */
-	public static float max(float a, float b, float c, float d) {
-		final float x = a > b ? a : b;
-		final float y = c > d ? c : d;
-		return x > y ? x : y;
-	}
-
-	/**
-	 * @see #longestAxis(float, float, float)
-	 */
-	public static Axis longestAxis(Vector3f vec) {
-		return longestAxis(vec.x(), vec.y(), vec.z());
-	}
-
-	/**
-	 * Identifies the largest (max absolute magnitude) component (X, Y, Z) in the given vector.
-	 */
-	public static Axis longestAxis(float normalX, float normalY, float normalZ) {
-		Axis result = Axis.Y;
-		float longest = Math.abs(normalY);
-		float a = Math.abs(normalX);
-
-		if (a > longest) {
-			result = Axis.X;
-			longest = a;
-		}
-
-		return Math.abs(normalZ) > longest
-				? Axis.Z : result;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/NormalHelper.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/NormalHelper.java
deleted file mode 100644
index 3fa40d90cb1de2c9ec9cd8af762dd91d20f02860..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/NormalHelper.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.helper;
-
-import org.jetbrains.annotations.NotNull;
-import org.joml.Vector3f;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadView;
-import net.minecraft.core.Direction;
-import net.minecraft.core.Vec3i;
-import net.minecraft.util.Mth;
-
-/**
- * Static routines of general utility for renderer implementations.
- * Renderers are not required to use these helpers, but they were
- * designed to be usable without the default renderer.
- */
-public abstract class NormalHelper {
-	private NormalHelper() { }
-
-	private static final float PACK = 127.0f;
-	private static final float UNPACK = 1.0f / PACK;
-
-	/**
-	 * Stores a normal plus an extra value as a quartet of signed bytes.
-	 * This is the same normal format that vanilla rendering expects.
-	 * The extra value is for use by shaders.
-	 */
-	public static int packNormal(float x, float y, float z, float w) {
-		x = Mth.clamp(x, -1, 1);
-		y = Mth.clamp(y, -1, 1);
-		z = Mth.clamp(z, -1, 1);
-		w = Mth.clamp(w, -1, 1);
-
-		return ((int) (x * PACK) & 0xFF) | (((int) (y * PACK) & 0xFF) << 8) | (((int) (z * PACK) & 0xFF) << 16) | (((int) (w * PACK) & 0xFF) << 24);
-	}
-
-	/**
-	 * Version of {@link #packNormal(float, float, float, float)} that accepts a vector type.
-	 */
-	public static int packNormal(Vector3f normal, float w) {
-		return packNormal(normal.x(), normal.y(), normal.z(), w);
-	}
-
-	/**
-	 * Like {@link #packNormal(float, float, float, float)}, but without a {@code w} value.
-	 */
-	public static int packNormal(float x, float y, float z) {
-		x = Mth.clamp(x, -1, 1);
-		y = Mth.clamp(y, -1, 1);
-		z = Mth.clamp(z, -1, 1);
-
-		return ((int) (x * PACK) & 0xFF) | (((int) (y * PACK) & 0xFF) << 8) | (((int) (z * PACK) & 0xFF) << 16);
-	}
-
-	/**
-	 * Like {@link #packNormal(Vector3f, float)}, but without a {@code w} value.
-	 */
-	public static int packNormal(Vector3f normal) {
-		return packNormal(normal.x(), normal.y(), normal.z());
-	}
-
-	public static float unpackNormalX(int packedNormal) {
-		return ((byte) (packedNormal & 0xFF)) * UNPACK;
-	}
-
-	public static float unpackNormalY(int packedNormal) {
-		return ((byte) ((packedNormal >>> 8) & 0xFF)) * UNPACK;
-	}
-
-	public static float unpackNormalZ(int packedNormal) {
-		return ((byte) ((packedNormal >>> 16) & 0xFF)) * UNPACK;
-	}
-
-	public static float unpackNormalW(int packedNormal) {
-		return ((byte) ((packedNormal >>> 24) & 0xFF)) * UNPACK;
-	}
-
-	public static void unpackNormal(int packedNormal, Vector3f target) {
-		target.set(unpackNormalX(packedNormal), unpackNormalY(packedNormal), unpackNormalZ(packedNormal));
-	}
-
-	/**
-	 * Computes the face normal of the given quad and saves it in the provided non-null vector.
-	 * If {@link QuadView#nominalFace()} is set will optimize by confirming quad is parallel to that
-	 * face and, if so, use the standard normal for that face direction.
-	 *
-	 * <p>Will work with triangles also. Assumes counter-clockwise winding order, which is the norm.
-	 * Expects convex quads with all points co-planar.
-	 */
-	public static void computeFaceNormal(@NotNull Vector3f saveTo, QuadView q) {
-		final Direction nominalFace = q.nominalFace();
-
-		if (nominalFace != null && GeometryHelper.isQuadParallelToFace(nominalFace, q)) {
-			Vec3i vec = nominalFace.getNormal();
-			saveTo.set(vec.getX(), vec.getY(), vec.getZ());
-			return;
-		}
-
-		final float x0 = q.x(0);
-		final float y0 = q.y(0);
-		final float z0 = q.z(0);
-		final float x1 = q.x(1);
-		final float y1 = q.y(1);
-		final float z1 = q.z(1);
-		final float x2 = q.x(2);
-		final float y2 = q.y(2);
-		final float z2 = q.z(2);
-		final float x3 = q.x(3);
-		final float y3 = q.y(3);
-		final float z3 = q.z(3);
-
-		final float dx0 = x2 - x0;
-		final float dy0 = y2 - y0;
-		final float dz0 = z2 - z0;
-		final float dx1 = x3 - x1;
-		final float dy1 = y3 - y1;
-		final float dz1 = z3 - z1;
-
-		float normX = dy0 * dz1 - dz0 * dy1;
-		float normY = dz0 * dx1 - dx0 * dz1;
-		float normZ = dx0 * dy1 - dy0 * dx1;
-
-		float l = (float) Math.sqrt(normX * normX + normY * normY + normZ * normZ);
-
-		if (l != 0) {
-			normX /= l;
-			normY /= l;
-			normZ /= l;
-		}
-
-		saveTo.set(normX, normY, normZ);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/TextureHelper.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/TextureHelper.java
deleted file mode 100644
index 6ff88c9f6570432ffa86edc5f614340e049206e7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/TextureHelper.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.helper;
-
-import net.fabricmc.fabric.api.renderer.v1.mesh.MutableQuadView;
-import net.minecraft.client.renderer.texture.TextureAtlasSprite;
-import net.minecraft.core.Direction;
-
-/**
- * Handles most texture-baking use cases for model loaders and model libraries
- * via {@link #bakeSprite(MutableQuadView, Sprite, int)}. Also used by the API
- * itself to implement automatic block-breaking models for enhanced models.
- */
-public class TextureHelper {
-	private TextureHelper() { }
-
-	private static final float NORMALIZER = 1f / 16f;
-
-	/**
-	 * Bakes textures in the provided vertex data, handling UV locking,
-	 * rotation, interpolation, etc. Textures must not be already baked.
-	 */
-	public static void bakeSprite(MutableQuadView quad, TextureAtlasSprite sprite, int bakeFlags) {
-		if (quad.nominalFace() != null && (MutableQuadView.BAKE_LOCK_UV & bakeFlags) != 0) {
-			// Assigns normalized UV coordinates based on vertex positions
-			applyModifier(quad, UVLOCKERS[quad.nominalFace().getId()]);
-		} else if ((MutableQuadView.BAKE_NORMALIZED & bakeFlags) == 0) { // flag is NOT set, UVs are assumed to not be normalized yet as is the default, normalize through dividing by 16
-			// Scales from 0-16 to 0-1
-			applyModifier(quad, (q, i) -> q.uv(i, q.u(i) * NORMALIZER, q.v(i) * NORMALIZER));
-		}
-
-		final int rotation = bakeFlags & 3;
-
-		if (rotation != 0) {
-			// Rotates texture around the center of sprite.
-			// Assumes normalized coordinates.
-			applyModifier(quad, ROTATIONS[rotation]);
-		}
-
-		if ((MutableQuadView.BAKE_FLIP_U & bakeFlags) != 0) {
-			// Inverts U coordinates.  Assumes normalized (0-1) values.
-			applyModifier(quad, (q, i) -> q.uv(i, 1 - q.u(i), q.v(i)));
-		}
-
-		if ((MutableQuadView.BAKE_FLIP_V & bakeFlags) != 0) {
-			// Inverts V coordinates.  Assumes normalized (0-1) values.
-			applyModifier(quad, (q, i) -> q.uv(i, q.u(i), 1 - q.v(i)));
-		}
-
-		interpolate(quad, sprite);
-	}
-
-	/**
-	 * Faster than sprite method. Sprite computes span and normalizes inputs each call,
-	 * so we'd have to denormalize before we called, only to have the sprite renormalize immediately.
-	 */
-	private static void interpolate(MutableQuadView q, TextureAtlasSprite sprite) {
-		final float uMin = sprite.getU0();
-		final float uSpan = sprite.getU1() - uMin;
-		final float vMin = sprite.getV0();
-		final float vSpan = sprite.getV1() - vMin;
-
-		for (int i = 0; i < 4; i++) {
-			q.uv(i, uMin + q.u(i) * uSpan, vMin + q.v(i) * vSpan);
-		}
-	}
-
-	@FunctionalInterface
-	private interface VertexModifier {
-		void apply(MutableQuadView quad, int vertexIndex);
-	}
-
-	private static void applyModifier(MutableQuadView quad, VertexModifier modifier) {
-		for (int i = 0; i < 4; i++) {
-			modifier.apply(quad, i);
-		}
-	}
-
-	private static final VertexModifier[] ROTATIONS = new VertexModifier[] {
-			null,
-			(q, i) -> q.uv(i, q.v(i), 1 - q.u(i)), //90
-			(q, i) -> q.uv(i, 1 - q.u(i), 1 - q.v(i)), //180
-			(q, i) -> q.uv(i, 1 - q.v(i), q.u(i)) // 270
-	};
-
-	private static final VertexModifier[] UVLOCKERS = new VertexModifier[6];
-
-	static {
-		UVLOCKERS[Direction.EAST.get3DDataValue()] = (q, i) -> q.uv(i, 1 - q.z(i), 1 - q.y(i));
-		UVLOCKERS[Direction.WEST.get3DDataValue()] = (q, i) -> q.uv(i, q.z(i), 1 - q.y(i));
-		UVLOCKERS[Direction.NORTH.get3DDataValue()] = (q, i) -> q.uv(i, 1 - q.x(i), 1 - q.y(i));
-		UVLOCKERS[Direction.SOUTH.get3DDataValue()] = (q, i) -> q.uv(i, q.x(i), 1 - q.y(i));
-		UVLOCKERS[Direction.DOWN.get3DDataValue()] = (q, i) -> q.uv(i, q.x(i), 1 - q.z(i));
-		UVLOCKERS[Direction.UP.get3DDataValue()] = (q, i) -> q.uv(i, q.x(i), q.z(i));
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/package-info.java
deleted file mode 100644
index ab70374c0133d012f3ee3b7eafd8e2a9a1c693bf..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/helper/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo.renderer.helper;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/MaterialFinderImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/MaterialFinderImpl.java
deleted file mode 100644
index cfae150f4d890ebcd9f288068322d7f4ef40f141..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/MaterialFinderImpl.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.material;
-
-import java.util.Objects;
-
-import net.fabricmc.fabric.api.renderer.v1.material.BlendMode;
-import net.fabricmc.fabric.api.renderer.v1.material.MaterialFinder;
-import net.fabricmc.fabric.api.renderer.v1.material.MaterialView;
-import net.fabricmc.fabric.api.renderer.v1.material.RenderMaterial;
-import net.fabricmc.fabric.api.util.TriState;
-
-public class MaterialFinderImpl extends MaterialViewImpl implements MaterialFinder {
-	private static int defaultBits = 0;
-
-	static {
-		MaterialFinderImpl finder = new MaterialFinderImpl();
-		finder.ambientOcclusion(TriState.DEFAULT);
-		finder.glint(TriState.DEFAULT);
-		defaultBits = finder.bits;
-
-		if (!areBitsValid(defaultBits)) {
-			throw new AssertionError("Default MaterialFinder bits are not valid!");
-		}
-	}
-
-	public MaterialFinderImpl() {
-		super(defaultBits);
-	}
-
-	@Override
-	public MaterialFinder blendMode(BlendMode blendMode) {
-		Objects.requireNonNull(blendMode, "BlendMode may not be null");
-
-		bits = (bits & ~BLEND_MODE_MASK) | (blendMode.ordinal() << BLEND_MODE_BIT_OFFSET);
-		return this;
-	}
-
-	@Override
-	public MaterialFinder disableColorIndex(boolean disable) {
-		bits = disable ? (bits | COLOR_DISABLE_FLAG) : (bits & ~COLOR_DISABLE_FLAG);
-		return this;
-	}
-
-	@Override
-	public MaterialFinder emissive(boolean isEmissive) {
-		bits = isEmissive ? (bits | EMISSIVE_FLAG) : (bits & ~EMISSIVE_FLAG);
-		return this;
-	}
-
-	@Override
-	public MaterialFinder disableDiffuse(boolean disable) {
-		bits = disable ? (bits | DIFFUSE_FLAG) : (bits & ~DIFFUSE_FLAG);
-		return this;
-	}
-
-	@Override
-	public MaterialFinder ambientOcclusion(TriState mode) {
-		Objects.requireNonNull(mode, "ambient occlusion TriState may not be null");
-
-		bits = (bits & ~AO_MASK) | (mode.ordinal() << AO_BIT_OFFSET);
-		return this;
-	}
-
-	@Override
-	public MaterialFinder glint(TriState mode) {
-		Objects.requireNonNull(mode, "glint TriState may not be null");
-
-		bits = (bits & ~GLINT_MASK) | (mode.ordinal() << GLINT_BIT_OFFSET);
-		return this;
-	}
-
-	@Override
-	public MaterialFinder copyFrom(MaterialView material) {
-		bits = ((MaterialViewImpl) material).bits;
-		return this;
-	}
-
-	@Override
-	public MaterialFinder clear() {
-		bits = defaultBits;
-		return this;
-	}
-
-	@Override
-	public RenderMaterial find() {
-		return RenderMaterialImpl.byIndex(bits);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/MaterialViewImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/MaterialViewImpl.java
deleted file mode 100644
index f773dbd0bdc7f25a8cf4264f8fdb53efca8e3145..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/MaterialViewImpl.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.material;
-
-import net.fabricmc.fabric.api.renderer.v1.material.BlendMode;
-import net.fabricmc.fabric.api.renderer.v1.material.MaterialView;
-import net.fabricmc.fabric.api.util.TriState;
-import net.minecraft.util.Mth;
-
-/**
- * Default implementation of the standard render materials.
- * The underlying representation is simply an int with bit-wise
- * packing of the various material properties. This offers
- * easy/fast interning via int/object hashmap.
- */
-public class MaterialViewImpl implements MaterialView {
-	private static final BlendMode[] BLEND_MODES = BlendMode.values();
-	private static final int BLEND_MODE_COUNT = BLEND_MODES.length;
-	private static final TriState[] TRI_STATES = TriState.values();
-	private static final int TRI_STATE_COUNT = TRI_STATES.length;
-
-	protected static final int BLEND_MODE_BIT_LENGTH = Mth.ceillog2(BLEND_MODE_COUNT);
-	protected static final int COLOR_DISABLE_BIT_LENGTH = 1;
-	protected static final int EMISSIVE_BIT_LENGTH = 1;
-	protected static final int DIFFUSE_BIT_LENGTH = 1;
-	protected static final int AO_BIT_LENGTH = Mth.ceillog2(TRI_STATE_COUNT);
-	protected static final int GLINT_BIT_LENGTH = Mth.ceillog2(TRI_STATE_COUNT);
-
-	protected static final int BLEND_MODE_BIT_OFFSET = 0;
-	protected static final int COLOR_DISABLE_BIT_OFFSET = BLEND_MODE_BIT_OFFSET + BLEND_MODE_BIT_LENGTH;
-	protected static final int EMISSIVE_BIT_OFFSET = COLOR_DISABLE_BIT_OFFSET + COLOR_DISABLE_BIT_LENGTH;
-	protected static final int DIFFUSE_BIT_OFFSET = EMISSIVE_BIT_OFFSET + EMISSIVE_BIT_LENGTH;
-	protected static final int AO_BIT_OFFSET = DIFFUSE_BIT_OFFSET + DIFFUSE_BIT_LENGTH;
-	protected static final int GLINT_BIT_OFFSET = AO_BIT_OFFSET + AO_BIT_LENGTH;
-	protected static final int TOTAL_BIT_LENGTH = GLINT_BIT_OFFSET + GLINT_BIT_LENGTH;
-
-	protected static final int BLEND_MODE_MASK = bitMask(BLEND_MODE_BIT_LENGTH, BLEND_MODE_BIT_OFFSET);
-	protected static final int COLOR_DISABLE_FLAG = bitMask(COLOR_DISABLE_BIT_LENGTH, COLOR_DISABLE_BIT_OFFSET);
-	protected static final int EMISSIVE_FLAG = bitMask(EMISSIVE_BIT_LENGTH, EMISSIVE_BIT_OFFSET);
-	protected static final int DIFFUSE_FLAG = bitMask(DIFFUSE_BIT_LENGTH, DIFFUSE_BIT_OFFSET);
-	protected static final int AO_MASK = bitMask(AO_BIT_LENGTH, AO_BIT_OFFSET);
-	protected static final int GLINT_MASK = bitMask(GLINT_BIT_LENGTH, GLINT_BIT_OFFSET);
-
-	protected static int bitMask(int bitLength, int bitOffset) {
-		return ((1 << bitLength) - 1) << bitOffset;
-	}
-
-	protected static boolean areBitsValid(int bits) {
-		int blendMode = (bits & BLEND_MODE_MASK) >>> BLEND_MODE_BIT_OFFSET;
-		int ao = (bits & AO_MASK) >>> AO_BIT_OFFSET;
-		int glint = (bits & GLINT_MASK) >>> GLINT_BIT_OFFSET;
-
-		return blendMode < BLEND_MODE_COUNT
-				&& ao < TRI_STATE_COUNT
-				&& glint < TRI_STATE_COUNT;
-	}
-
-	protected int bits;
-
-	protected MaterialViewImpl(int bits) {
-		this.bits = bits;
-	}
-
-	@Override
-	public BlendMode blendMode() {
-		return BLEND_MODES[(bits & BLEND_MODE_MASK) >>> BLEND_MODE_BIT_OFFSET];
-	}
-
-	@Override
-	public boolean disableColorIndex() {
-		return (bits & COLOR_DISABLE_FLAG) != 0;
-	}
-
-	@Override
-	public boolean emissive() {
-		return (bits & EMISSIVE_FLAG) != 0;
-	}
-
-	@Override
-	public boolean disableDiffuse() {
-		return (bits & DIFFUSE_FLAG) != 0;
-	}
-
-	@Override
-	public TriState ambientOcclusion() {
-		return TRI_STATES[(bits & AO_MASK) >>> AO_BIT_OFFSET];
-	}
-
-	@Override
-	public TriState glint() {
-		return TRI_STATES[(bits & GLINT_MASK) >>> GLINT_BIT_OFFSET];
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/RenderMaterialImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/RenderMaterialImpl.java
deleted file mode 100644
index ce313c08f08595535d45dc398e2682baa0439792..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/RenderMaterialImpl.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.material;
-
-import net.fabricmc.fabric.api.renderer.v1.material.RenderMaterial;
-
-public class RenderMaterialImpl extends MaterialViewImpl implements RenderMaterial {
-	public static final int VALUE_COUNT = 1 << TOTAL_BIT_LENGTH;
-	private static final RenderMaterialImpl[] BY_INDEX = new RenderMaterialImpl[VALUE_COUNT];
-
-	static {
-		for (int i = 0; i < VALUE_COUNT; i++) {
-			if (areBitsValid(i)) {
-				BY_INDEX[i] = new RenderMaterialImpl(i);
-			}
-		}
-	}
-
-	private RenderMaterialImpl(int bits) {
-		super(bits);
-	}
-
-	public int index() {
-		return bits;
-	}
-
-	public static RenderMaterialImpl byIndex(int index) {
-		return BY_INDEX[index];
-	}
-
-	public static RenderMaterialImpl setDisableDiffuse(RenderMaterialImpl material, boolean disable) {
-		if (material.disableDiffuse() != disable) {
-			return byIndex(disable ? (material.bits | DIFFUSE_FLAG) : (material.bits & ~DIFFUSE_FLAG));
-		}
-
-		return material;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/package-info.java
deleted file mode 100644
index 657caa845a32840b710c527ff21abcf40db5e42a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/material/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo.renderer.material;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/EncodingFormat.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/EncodingFormat.java
deleted file mode 100644
index a796953c54ccba7461c04666a3b76c00a28764d2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/EncodingFormat.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.mesh;
-
-import com.google.common.base.Preconditions;
-import com.mojang.blaze3d.vertex.DefaultVertexFormat;
-import com.mojang.blaze3d.vertex.VertexFormat;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadView;
-import net.fabricmc.fabric.api.renderer.v1.model.ModelHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.GeometryHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.material.RenderMaterialImpl;
-import net.minecraft.core.Direction;
-import net.minecraft.util.Mth;
-
-/**
- * Holds all the array offsets and bit-wise encoders/decoders for
- * packing/unpacking quad data in an array of integers.
- * All of this is implementation-specific - that's why it isn't a "helper" class.
- */
-public abstract class EncodingFormat {
-	private EncodingFormat() { }
-
-	static final int HEADER_BITS = 0;
-	static final int HEADER_FACE_NORMAL = 1;
-	static final int HEADER_COLOR_INDEX = 2;
-	static final int HEADER_TAG = 3;
-	public static final int HEADER_STRIDE = 4;
-
-	static final int VERTEX_X;
-	static final int VERTEX_Y;
-	static final int VERTEX_Z;
-	static final int VERTEX_COLOR;
-	static final int VERTEX_U;
-	static final int VERTEX_V;
-	static final int VERTEX_LIGHTMAP;
-	static final int VERTEX_NORMAL;
-	public static final int VERTEX_STRIDE;
-
-	public static final int QUAD_STRIDE;
-	public static final int QUAD_STRIDE_BYTES;
-	public static final int TOTAL_STRIDE;
-
-	static {
-		final VertexFormat format = DefaultVertexFormat.BLOCK;
-		VERTEX_X = HEADER_STRIDE + 0;
-		VERTEX_Y = HEADER_STRIDE + 1;
-		VERTEX_Z = HEADER_STRIDE + 2;
-		VERTEX_COLOR = HEADER_STRIDE + 3;
-		VERTEX_U = HEADER_STRIDE + 4;
-		VERTEX_V = VERTEX_U + 1;
-		VERTEX_LIGHTMAP = HEADER_STRIDE + 6;
-		VERTEX_NORMAL = HEADER_STRIDE + 7;
-		VERTEX_STRIDE = format.getIntegerSize();
-		QUAD_STRIDE = VERTEX_STRIDE * 4;
-		QUAD_STRIDE_BYTES = QUAD_STRIDE * 4;
-		TOTAL_STRIDE = HEADER_STRIDE + QUAD_STRIDE;
-
-		Preconditions.checkState(VERTEX_STRIDE == QuadView.VANILLA_VERTEX_STRIDE, "Indigo vertex stride (%s) mismatched with rendering API (%s)", VERTEX_STRIDE, QuadView.VANILLA_VERTEX_STRIDE);
-		Preconditions.checkState(QUAD_STRIDE == QuadView.VANILLA_QUAD_STRIDE, "Indigo quad stride (%s) mismatched with rendering API (%s)", QUAD_STRIDE, QuadView.VANILLA_QUAD_STRIDE);
-	}
-
-	/** used for quick clearing of quad buffers. */
-	static final int[] EMPTY = new int[TOTAL_STRIDE];
-
-	private static final int DIRECTION_MASK = Mth.smallestEncompassingPowerOfTwo(ModelHelper.NULL_FACE_ID) - 1;
-	private static final int DIRECTION_BIT_COUNT = Integer.bitCount(DIRECTION_MASK);
-	private static final int CULL_SHIFT = 0;
-	private static final int CULL_INVERSE_MASK = ~(DIRECTION_MASK << CULL_SHIFT);
-	private static final int LIGHT_SHIFT = CULL_SHIFT + DIRECTION_BIT_COUNT;
-	private static final int LIGHT_INVERSE_MASK = ~(DIRECTION_MASK << LIGHT_SHIFT);
-	private static final int NORMALS_SHIFT = LIGHT_SHIFT + DIRECTION_BIT_COUNT;
-	private static final int NORMALS_COUNT = 4;
-	private static final int NORMALS_MASK = (1 << NORMALS_COUNT) - 1;
-	private static final int NORMALS_INVERSE_MASK = ~(NORMALS_MASK << NORMALS_SHIFT);
-	private static final int GEOMETRY_SHIFT = NORMALS_SHIFT + NORMALS_COUNT;
-	private static final int GEOMETRY_MASK = (1 << GeometryHelper.FLAG_BIT_COUNT) - 1;
-	private static final int GEOMETRY_INVERSE_MASK = ~(GEOMETRY_MASK << GEOMETRY_SHIFT);
-	private static final int MATERIAL_SHIFT = GEOMETRY_SHIFT + GeometryHelper.FLAG_BIT_COUNT;
-	private static final int MATERIAL_MASK = Mth.smallestEncompassingPowerOfTwo(RenderMaterialImpl.VALUE_COUNT) - 1;
-	private static final int MATERIAL_BIT_COUNT = Integer.bitCount(MATERIAL_MASK);
-	private static final int MATERIAL_INVERSE_MASK = ~(MATERIAL_MASK << MATERIAL_SHIFT);
-
-	static {
-		Preconditions.checkArgument(MATERIAL_SHIFT + MATERIAL_BIT_COUNT <= 32, "Indigo header encoding bit count (%s) exceeds integer bit length)", TOTAL_STRIDE);
-	}
-
-	static Direction cullFace(int bits) {
-		return ModelHelper.faceFromIndex((bits >>> CULL_SHIFT) & DIRECTION_MASK);
-	}
-
-	static int cullFace(int bits, Direction face) {
-		return (bits & CULL_INVERSE_MASK) | (ModelHelper.toFaceIndex(face) << CULL_SHIFT);
-	}
-
-	static Direction lightFace(int bits) {
-		return ModelHelper.faceFromIndex((bits >>> LIGHT_SHIFT) & DIRECTION_MASK);
-	}
-
-	static int lightFace(int bits, Direction face) {
-		return (bits & LIGHT_INVERSE_MASK) | (ModelHelper.toFaceIndex(face) << LIGHT_SHIFT);
-	}
-
-	/** indicate if vertex normal has been set - bits correspond to vertex ordinals. */
-	static int normalFlags(int bits) {
-		return (bits >>> NORMALS_SHIFT) & NORMALS_MASK;
-	}
-
-	static int normalFlags(int bits, int normalFlags) {
-		return (bits & NORMALS_INVERSE_MASK) | ((normalFlags & NORMALS_MASK) << NORMALS_SHIFT);
-	}
-
-	static int geometryFlags(int bits) {
-		return (bits >>> GEOMETRY_SHIFT) & GEOMETRY_MASK;
-	}
-
-	static int geometryFlags(int bits, int geometryFlags) {
-		return (bits & GEOMETRY_INVERSE_MASK) | ((geometryFlags & GEOMETRY_MASK) << GEOMETRY_SHIFT);
-	}
-
-	static RenderMaterialImpl material(int bits) {
-		return RenderMaterialImpl.byIndex((bits >>> MATERIAL_SHIFT) & MATERIAL_MASK);
-	}
-
-	static int material(int bits, RenderMaterialImpl material) {
-		return (bits & MATERIAL_INVERSE_MASK) | (material.index() << MATERIAL_SHIFT);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MeshBuilderImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MeshBuilderImpl.java
deleted file mode 100644
index b0798c2d93e986c695b6df85a4e6b2ae92f811bd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MeshBuilderImpl.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.mesh;
-
-import net.fabricmc.fabric.api.renderer.v1.mesh.Mesh;
-import net.fabricmc.fabric.api.renderer.v1.mesh.MeshBuilder;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadEmitter;
-
-/**
- * Our implementation of {@link MeshBuilder}, used for static mesh creation and baking.
- * Not much to it - mainly it just needs to grow the int[] array as quads are appended
- * and maintain/provide a properly-configured {@link net.fabricmc.fabric.api.renderer.v1.mesh.MutableQuadView} instance.
- * All the encoding and other work is handled in the quad base classes.
- * The one interesting bit is in {@link Maker#emitDirectly()}.
- */
-public class MeshBuilderImpl implements MeshBuilder {
-	private int[] data = new int[256];
-	private int index = 0;
-	private int limit = data.length;
-	private final Maker maker = new Maker();
-
-	public MeshBuilderImpl() {
-		ensureCapacity(EncodingFormat.TOTAL_STRIDE);
-		maker.data = data;
-		maker.baseIndex = index;
-		maker.clear();
-	}
-
-	protected void ensureCapacity(int stride) {
-		if (stride > limit - index) {
-			limit *= 2;
-			final int[] bigger = new int[limit];
-			System.arraycopy(data, 0, bigger, 0, index);
-			data = bigger;
-			maker.data = data;
-		}
-	}
-
-	@Override
-	public QuadEmitter getEmitter() {
-		maker.clear();
-		return maker;
-	}
-
-	@Override
-	public Mesh build() {
-		final int[] packed = new int[index];
-		System.arraycopy(data, 0, packed, 0, index);
-		index = 0;
-		maker.baseIndex = index;
-		maker.clear();
-		return new MeshImpl(packed);
-	}
-
-	/**
-	 * Our base classes are used differently so we define final
-	 * encoding steps in subtypes. This will be a static mesh used
-	 * at render time so we want to capture all geometry now and
-	 * apply non-location-dependent lighting.
-	 */
-	private class Maker extends MutableQuadViewImpl {
-		@Override
-		public void emitDirectly() {
-			computeGeometry();
-			index += EncodingFormat.TOTAL_STRIDE;
-			ensureCapacity(EncodingFormat.TOTAL_STRIDE);
-			baseIndex = index;
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MeshImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MeshImpl.java
deleted file mode 100644
index 58479ebd4ecd5603647dd39ad68810846a3f7624..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MeshImpl.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.mesh;
-
-import java.util.function.Consumer;
-
-import net.fabricmc.fabric.api.renderer.v1.mesh.Mesh;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadEmitter;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadView;
-
-/**
- * Implementation of {@link Mesh}.
- * The way we encode meshes makes it very simple.
- */
-public class MeshImpl implements Mesh {
-	/** Used to satisfy external calls to {@link #forEach(Consumer)}. */
-	private final ThreadLocal<QuadViewImpl> cursorPool = ThreadLocal.withInitial(QuadViewImpl::new);
-
-	final int[] data;
-
-	MeshImpl(int[] data) {
-		this.data = data;
-	}
-
-	@Override
-	public void forEach(Consumer<QuadView> consumer) {
-		forEach(consumer, cursorPool.get());
-	}
-
-	/**
-	 * The renderer can call this with its own cursor
-	 * to avoid the performance hit of a thread-local lookup.
-	 * Also means renderer can hold final references to quad buffers.
-	 */
-	void forEach(Consumer<QuadView> consumer, QuadViewImpl cursor) {
-		final int limit = data.length;
-		int index = 0;
-		cursor.data = this.data;
-
-		while (index < limit) {
-			cursor.baseIndex = index;
-			cursor.load();
-			consumer.accept(cursor);
-			index += EncodingFormat.TOTAL_STRIDE;
-		}
-	}
-
-	@Override
-	public void outputTo(QuadEmitter emitter) {
-		MutableQuadViewImpl e = (MutableQuadViewImpl) emitter;
-		final int[] data = this.data;
-		final int limit = data.length;
-		int index = 0;
-
-		while (index < limit) {
-			System.arraycopy(data, index, e.data, e.baseIndex, EncodingFormat.TOTAL_STRIDE);
-			e.load();
-			e.emitDirectly();
-			index += EncodingFormat.TOTAL_STRIDE;
-		}
-
-		e.clear();
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MutableQuadViewImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MutableQuadViewImpl.java
deleted file mode 100644
index 8b341090f696afca6722e55ea397b2dacc0e5469..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/MutableQuadViewImpl.java
+++ /dev/null
@@ -1,222 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.mesh;
-
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.EMPTY;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_BITS;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_COLOR_INDEX;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_STRIDE;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_TAG;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_COLOR;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_LIGHTMAP;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_NORMAL;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_STRIDE;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_U;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_X;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.renderer.v1.material.RenderMaterial;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadEmitter;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadView;
-import net.fabricmc.fabric.impl.client.indigo.renderer.IndigoRenderer;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.ColorHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.NormalHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.TextureHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.material.RenderMaterialImpl;
-import net.minecraft.client.renderer.block.model.BakedQuad;
-import net.minecraft.client.renderer.texture.TextureAtlasSprite;
-import net.minecraft.core.Direction;
-
-/**
- * Almost-concrete implementation of a mutable quad. The only missing part is {@link #emitDirectly()},
- * because that depends on where/how it is used. (Mesh encoding vs. render-time transformation).
- *
- * <p>In many cases an instance of this class is used as an "editor quad". The editor quad's
- * {@link #emitDirectly()} method calls some other internal method that transforms the quad
- * data and then buffers it. Transformations should be the same as they would be in a vanilla
- * render - the editor is serving mainly as a way to access vertex data without magical
- * numbers. It also allows for a consistent interface for those transformations.
- */
-public abstract class MutableQuadViewImpl extends QuadViewImpl implements QuadEmitter {
-	public void clear() {
-		System.arraycopy(EMPTY, 0, data, baseIndex, EncodingFormat.TOTAL_STRIDE);
-		isGeometryInvalid = true;
-		nominalFace = null;
-		normalFlags(0);
-		tag(0);
-		colorIndex(-1);
-		cullFace(null);
-		material(IndigoRenderer.MATERIAL_STANDARD);
-	}
-
-	@Override
-	public MutableQuadViewImpl pos(int vertexIndex, float x, float y, float z) {
-		final int index = baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_X;
-		data[index] = Float.floatToRawIntBits(x);
-		data[index + 1] = Float.floatToRawIntBits(y);
-		data[index + 2] = Float.floatToRawIntBits(z);
-		isGeometryInvalid = true;
-		return this;
-	}
-
-	@Override
-	public MutableQuadViewImpl color(int vertexIndex, int color) {
-		data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_COLOR] = color;
-		return this;
-	}
-
-	@Override
-	public MutableQuadViewImpl uv(int vertexIndex, float u, float v) {
-		final int i = baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_U;
-		data[i] = Float.floatToRawIntBits(u);
-		data[i + 1] = Float.floatToRawIntBits(v);
-		return this;
-	}
-
-	@Override
-	public MutableQuadViewImpl spriteBake(TextureAtlasSprite sprite, int bakeFlags) {
-		TextureHelper.bakeSprite(this, sprite, bakeFlags);
-		return this;
-	}
-
-	@Override
-	public MutableQuadViewImpl lightmap(int vertexIndex, int lightmap) {
-		data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_LIGHTMAP] = lightmap;
-		return this;
-	}
-
-	protected void normalFlags(int flags) {
-		data[baseIndex + HEADER_BITS] = EncodingFormat.normalFlags(data[baseIndex + HEADER_BITS], flags);
-	}
-
-	@Override
-	public MutableQuadViewImpl normal(int vertexIndex, float x, float y, float z) {
-		normalFlags(normalFlags() | (1 << vertexIndex));
-		data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_NORMAL] = NormalHelper.packNormal(x, y, z);
-		return this;
-	}
-
-	/**
-	 * Internal helper method. Copies face normals to vertex normals lacking one.
-	 */
-	public final void populateMissingNormals() {
-		final int normalFlags = this.normalFlags();
-
-		if (normalFlags == 0b1111) return;
-
-		final int packedFaceNormal = packedFaceNormal();
-
-		for (int v = 0; v < 4; v++) {
-			if ((normalFlags & (1 << v)) == 0) {
-				data[baseIndex + v * VERTEX_STRIDE + VERTEX_NORMAL] = packedFaceNormal;
-			}
-		}
-
-		normalFlags(0b1111);
-	}
-
-	@Override
-	public final MutableQuadViewImpl cullFace(@Nullable Direction face) {
-		data[baseIndex + HEADER_BITS] = EncodingFormat.cullFace(data[baseIndex + HEADER_BITS], face);
-		nominalFace(face);
-		return this;
-	}
-
-	@Override
-	public final MutableQuadViewImpl nominalFace(@Nullable Direction face) {
-		nominalFace = face;
-		return this;
-	}
-
-	@Override
-	public final MutableQuadViewImpl material(RenderMaterial material) {
-		if (material == null) {
-			material = IndigoRenderer.MATERIAL_STANDARD;
-		}
-
-		data[baseIndex + HEADER_BITS] = EncodingFormat.material(data[baseIndex + HEADER_BITS], (RenderMaterialImpl) material);
-		return this;
-	}
-
-	@Override
-	public final MutableQuadViewImpl colorIndex(int colorIndex) {
-		data[baseIndex + HEADER_COLOR_INDEX] = colorIndex;
-		return this;
-	}
-
-	@Override
-	public final MutableQuadViewImpl tag(int tag) {
-		data[baseIndex + HEADER_TAG] = tag;
-		return this;
-	}
-
-	@Override
-	public MutableQuadViewImpl copyFrom(QuadView quad) {
-		final QuadViewImpl q = (QuadViewImpl) quad;
-		q.computeGeometry();
-
-		System.arraycopy(q.data, q.baseIndex, data, baseIndex, EncodingFormat.TOTAL_STRIDE);
-		faceNormal.set(q.faceNormal);
-		nominalFace = q.nominalFace;
-		isGeometryInvalid = false;
-		return this;
-	}
-
-	@Override
-	public final MutableQuadViewImpl fromVanilla(int[] quadData, int startIndex) {
-		System.arraycopy(quadData, startIndex, data, baseIndex + HEADER_STRIDE, VANILLA_QUAD_STRIDE);
-		isGeometryInvalid = true;
-
-		int colorIndex = baseIndex + VERTEX_COLOR;
-
-		for (int i = 0; i < 4; i++) {
-			data[colorIndex] = ColorHelper.fromVanillaColor(data[colorIndex]);
-			colorIndex += VERTEX_STRIDE;
-		}
-
-		return this;
-	}
-
-	@Override
-	public final MutableQuadViewImpl fromVanilla(BakedQuad quad, RenderMaterial material, @Nullable Direction cullFace) {
-		fromVanilla(quad.getVertices(), 0);
-		data[baseIndex + HEADER_BITS] = EncodingFormat.cullFace(0, cullFace);
-		nominalFace(quad.getDirection());
-		colorIndex(quad.getTintIndex());
-
-		if (!quad.isShade()) {
-			material = RenderMaterialImpl.setDisableDiffuse((RenderMaterialImpl) material, true);
-		}
-
-		material(material);
-		tag(0);
-		return this;
-	}
-
-	/**
-	 * Emit the quad without clearing the underlying data.
-	 * Geometry is not guaranteed to be valid when called, but can be computed by calling {@link #computeGeometry()}.
-	 */
-	public abstract void emitDirectly();
-
-	@Override
-	public final MutableQuadViewImpl emit() {
-		emitDirectly();
-		clear();
-		return this;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/QuadViewImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/QuadViewImpl.java
deleted file mode 100644
index 928d788c546548c7cd7596b835675b385b6fefab..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/QuadViewImpl.java
+++ /dev/null
@@ -1,273 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.mesh;
-
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_BITS;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_COLOR_INDEX;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_FACE_NORMAL;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_STRIDE;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.HEADER_TAG;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.QUAD_STRIDE;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_COLOR;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_LIGHTMAP;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_NORMAL;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_STRIDE;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_U;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_V;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_X;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_Y;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat.VERTEX_Z;
-
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-import org.joml.Vector2f;
-import org.joml.Vector3f;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadView;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.ColorHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.GeometryHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.NormalHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.material.RenderMaterialImpl;
-import net.minecraft.core.Direction;
-
-/**
- * Base class for all quads / quad makers. Handles the ugly bits
- * of maintaining and encoding the quad state.
- */
-public class QuadViewImpl implements QuadView {
-	@Nullable
-	protected Direction nominalFace;
-	/** True when face normal, light face, or geometry flags may not match geometry. */
-	protected boolean isGeometryInvalid = true;
-	protected final Vector3f faceNormal = new Vector3f();
-
-	/** Size and where it comes from will vary in subtypes. But in all cases quad is fully encoded to array. */
-	protected int[] data;
-
-	/** Beginning of the quad. Also the header index. */
-	protected int baseIndex = 0;
-
-	/**
-	 * Decodes necessary state from the backing data array.
-	 * The encoded data must contain valid computed geometry.
-	 */
-	public void load() {
-		isGeometryInvalid = false;
-		nominalFace = lightFace();
-		NormalHelper.unpackNormal(packedFaceNormal(), faceNormal);
-	}
-
-	protected void computeGeometry() {
-		if (isGeometryInvalid) {
-			isGeometryInvalid = false;
-
-			NormalHelper.computeFaceNormal(faceNormal, this);
-			data[baseIndex + HEADER_FACE_NORMAL] = NormalHelper.packNormal(faceNormal);
-
-			// depends on face normal
-			data[baseIndex + HEADER_BITS] = EncodingFormat.lightFace(data[baseIndex + HEADER_BITS], GeometryHelper.lightFace(this));
-
-			// depends on light face
-			data[baseIndex + HEADER_BITS] = EncodingFormat.geometryFlags(data[baseIndex + HEADER_BITS], GeometryHelper.computeShapeFlags(this));
-		}
-	}
-
-	/** gets flags used for lighting - lazily computed via {@link GeometryHelper#computeShapeFlags(QuadView)}. */
-	public int geometryFlags() {
-		computeGeometry();
-		return EncodingFormat.geometryFlags(data[baseIndex + HEADER_BITS]);
-	}
-
-	public boolean hasShade() {
-		return !material().disableDiffuse();
-	}
-
-	@Override
-	public float x(int vertexIndex) {
-		return Float.intBitsToFloat(data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_X]);
-	}
-
-	@Override
-	public float y(int vertexIndex) {
-		return Float.intBitsToFloat(data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_Y]);
-	}
-
-	@Override
-	public float z(int vertexIndex) {
-		return Float.intBitsToFloat(data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_Z]);
-	}
-
-	@Override
-	public float posByIndex(int vertexIndex, int coordinateIndex) {
-		return Float.intBitsToFloat(data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_X + coordinateIndex]);
-	}
-
-	@Override
-	public Vector3f copyPos(int vertexIndex, @Nullable Vector3f target) {
-		if (target == null) {
-			target = new Vector3f();
-		}
-
-		final int index = baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_X;
-		target.set(Float.intBitsToFloat(data[index]), Float.intBitsToFloat(data[index + 1]), Float.intBitsToFloat(data[index + 2]));
-		return target;
-	}
-
-	@Override
-	public int color(int vertexIndex) {
-		return data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_COLOR];
-	}
-
-	@Override
-	public float u(int vertexIndex) {
-		return Float.intBitsToFloat(data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_U]);
-	}
-
-	@Override
-	public float v(int vertexIndex) {
-		return Float.intBitsToFloat(data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_V]);
-	}
-
-	@Override
-	public Vector2f copyUv(int vertexIndex, @Nullable Vector2f target) {
-		if (target == null) {
-			target = new Vector2f();
-		}
-
-		final int index = baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_U;
-		target.set(Float.intBitsToFloat(data[index]), Float.intBitsToFloat(data[index + 1]));
-		return target;
-	}
-
-	@Override
-	public int lightmap(int vertexIndex) {
-		return data[baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_LIGHTMAP];
-	}
-
-	public int normalFlags() {
-		return EncodingFormat.normalFlags(data[baseIndex + HEADER_BITS]);
-	}
-
-	@Override
-	public boolean hasNormal(int vertexIndex) {
-		return (normalFlags() & (1 << vertexIndex)) != 0;
-	}
-
-	/** True if any vertex normal has been set. */
-	public boolean hasVertexNormals() {
-		return normalFlags() != 0;
-	}
-
-	/** True if all vertex normals have been set. */
-	public boolean hasAllVertexNormals() {
-		return (normalFlags() & 0b1111) == 0b1111;
-	}
-
-	protected final int normalIndex(int vertexIndex) {
-		return baseIndex + vertexIndex * VERTEX_STRIDE + VERTEX_NORMAL;
-	}
-
-	@Override
-	public float normalX(int vertexIndex) {
-		return hasNormal(vertexIndex) ? NormalHelper.unpackNormalX(data[normalIndex(vertexIndex)]) : Float.NaN;
-	}
-
-	@Override
-	public float normalY(int vertexIndex) {
-		return hasNormal(vertexIndex) ? NormalHelper.unpackNormalY(data[normalIndex(vertexIndex)]) : Float.NaN;
-	}
-
-	@Override
-	public float normalZ(int vertexIndex) {
-		return hasNormal(vertexIndex) ? NormalHelper.unpackNormalZ(data[normalIndex(vertexIndex)]) : Float.NaN;
-	}
-
-	@Override
-	@Nullable
-	public Vector3f copyNormal(int vertexIndex, @Nullable Vector3f target) {
-		if (hasNormal(vertexIndex)) {
-			if (target == null) {
-				target = new Vector3f();
-			}
-
-			final int normal = data[normalIndex(vertexIndex)];
-			NormalHelper.unpackNormal(normal, target);
-			return target;
-		} else {
-			return null;
-		}
-	}
-
-	@Override
-	@Nullable
-	public final Direction cullFace() {
-		return EncodingFormat.cullFace(data[baseIndex + HEADER_BITS]);
-	}
-
-	@Override
-	@NotNull
-	public final Direction lightFace() {
-		computeGeometry();
-		return EncodingFormat.lightFace(data[baseIndex + HEADER_BITS]);
-	}
-
-	@Override
-	@Nullable
-	public final Direction nominalFace() {
-		return nominalFace;
-	}
-
-	public final int packedFaceNormal() {
-		computeGeometry();
-		return data[baseIndex + HEADER_FACE_NORMAL];
-	}
-
-	@Override
-	public final Vector3f faceNormal() {
-		computeGeometry();
-		return faceNormal;
-	}
-
-	@Override
-	public final RenderMaterialImpl material() {
-		return EncodingFormat.material(data[baseIndex + HEADER_BITS]);
-	}
-
-	@Override
-	public final int colorIndex() {
-		return data[baseIndex + HEADER_COLOR_INDEX];
-	}
-
-	@Override
-	public final int tag() {
-		return data[baseIndex + HEADER_TAG];
-	}
-
-	@Override
-	public final void toVanilla(int[] target, int targetIndex) {
-		System.arraycopy(data, baseIndex + HEADER_STRIDE, target, targetIndex, QUAD_STRIDE);
-
-		// The color is the fourth integer in each vertex.
-		// EncodingFormat.VERTEX_COLOR is not used because it also
-		// contains the header size; vanilla quads do not have a header.
-		int colorIndex = targetIndex + 3;
-
-		for (int i = 0; i < 4; i++) {
-			target[colorIndex] = ColorHelper.toVanillaColor(target[colorIndex]);
-			colorIndex += VANILLA_VERTEX_STRIDE;
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/package-info.java
deleted file mode 100644
index 019a62f342b3785b10fa97a1e1272b318909b064..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/mesh/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo.renderer.mesh;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/package-info.java
deleted file mode 100644
index 88fcfa0575408ac572b5d3f9ad673dcac3adb286..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo.renderer;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/AbstractBlockRenderContext.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/AbstractBlockRenderContext.java
deleted file mode 100644
index 7753b8b2d27f64ea4aa11f4342a2a6f3bbefd009..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/AbstractBlockRenderContext.java
+++ /dev/null
@@ -1,310 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import static net.fabricmc.fabric.impl.client.indigo.renderer.helper.GeometryHelper.AXIS_ALIGNED_FLAG;
-import static net.fabricmc.fabric.impl.client.indigo.renderer.helper.GeometryHelper.LIGHT_FACE_FLAG;
-
-import BakedModelConsumer;
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import org.jetbrains.annotations.Nullable;
-import org.joml.Vector3f;
-import net.fabricmc.fabric.api.renderer.v1.material.RenderMaterial;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadEmitter;
-import net.fabricmc.fabric.api.util.TriState;
-import net.fabricmc.fabric.impl.client.indigo.Indigo;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoCalculator;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoConfig;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.ColorHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.MutableQuadViewImpl;
-import net.fabricmc.fabric.impl.renderer.VanillaModelEncoder;
-import net.minecraft.client.renderer.LevelRenderer;
-import net.minecraft.client.renderer.LightTexture;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.resources.model.BakedModel;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.world.item.ItemDisplayContext;
-import net.minecraft.world.level.block.state.BlockState;
-
-public abstract class AbstractBlockRenderContext extends AbstractRenderContext {
-	protected final BlockRenderInfo blockInfo = new BlockRenderInfo();
-	protected final AoCalculator aoCalc;
-
-	private final MutableQuadViewImpl editorQuad = new MutableQuadViewImpl() {
-		{
-			data = new int[EncodingFormat.TOTAL_STRIDE];
-			clear();
-		}
-
-		@Override
-		public void emitDirectly() {
-			renderQuad(this, false);
-		}
-	};
-	private final MutableQuadViewImpl vanillaModelEditorQuad = new MutableQuadViewImpl() {
-		{
-			data = new int[EncodingFormat.TOTAL_STRIDE];
-			clear();
-		}
-
-		@Override
-		public void emitDirectly() {
-			renderQuad(this, true);
-		}
-	};
-
-	private final BakedModelConsumerImpl vanillaModelConsumer = new BakedModelConsumerImpl();
-
-	private final BlockPos.MutableBlockPos lightPos = new BlockPos.MutableBlockPos();
-
-	protected AbstractBlockRenderContext() {
-		aoCalc = createAoCalc(blockInfo);
-	}
-
-	protected abstract AoCalculator createAoCalc(BlockRenderInfo blockInfo);
-
-	protected abstract VertexConsumer getVertexConsumer(RenderType layer);
-
-	@Override
-	public QuadEmitter getEmitter() {
-		editorQuad.clear();
-		return editorQuad;
-	}
-
-	public QuadEmitter getVanillaModelEmitter() {
-		// Do not clear the editorQuad since it is not accessible to API users.
-		return vanillaModelEditorQuad;
-	}
-
-	@Override
-	public boolean isFaceCulled(@Nullable Direction face) {
-		return !blockInfo.shouldDrawFace(face);
-	}
-
-	@Override
-	public ItemDisplayContext itemTransformationMode() {
-		throw new IllegalStateException("itemTransformationMode() can only be called on an item render context.");
-	}
-
-	@Override
-	public BakedModelConsumer bakedModelConsumer() {
-		return vanillaModelConsumer;
-	}
-
-	private void renderQuad(MutableQuadViewImpl quad, boolean isVanilla) {
-		if (!transform(quad)) {
-			return;
-		}
-
-		if (isFaceCulled(quad.cullFace())) {
-			return;
-		}
-
-		final RenderMaterial mat = quad.material();
-		final int colorIndex = mat.disableColorIndex() ? -1 : quad.colorIndex();
-		final TriState aoMode = mat.ambientOcclusion();
-		final boolean ao = blockInfo.useAo && (aoMode == TriState.TRUE || (aoMode == TriState.DEFAULT && blockInfo.defaultAo));
-		final boolean emissive = mat.emissive();
-		final VertexConsumer vertexConsumer = getVertexConsumer(blockInfo.effectiveRenderLayer(mat.blendMode()));
-
-		colorizeQuad(quad, colorIndex);
-		shadeQuad(quad, isVanilla, ao, emissive);
-		bufferQuad(quad, vertexConsumer);
-	}
-
-	/** handles block color, common to all renders. */
-	private void colorizeQuad(MutableQuadViewImpl quad, int colorIndex) {
-		if (colorIndex != -1) {
-			final int blockColor = blockInfo.blockColor(colorIndex);
-
-			for (int i = 0; i < 4; i++) {
-				quad.color(i, ColorHelper.multiplyColor(blockColor, quad.color(i)));
-			}
-		}
-	}
-
-	private void shadeQuad(MutableQuadViewImpl quad, boolean isVanilla, boolean ao, boolean emissive) {
-		// routines below have a bit of copy-paste code reuse to avoid conditional execution inside a hot loop
-		if (ao) {
-			aoCalc.compute(quad, isVanilla);
-
-			if (emissive) {
-				for (int i = 0; i < 4; i++) {
-					quad.color(i, ColorHelper.multiplyRGB(quad.color(i), aoCalc.ao[i]));
-					quad.lightmap(i, LightTexture.FULL_BRIGHT);
-				}
-			} else {
-				for (int i = 0; i < 4; i++) {
-					quad.color(i, ColorHelper.multiplyRGB(quad.color(i), aoCalc.ao[i]));
-					quad.lightmap(i, ColorHelper.maxBrightness(quad.lightmap(i), aoCalc.light[i]));
-				}
-			}
-		} else {
-			shadeFlatQuad(quad, isVanilla);
-
-			if (emissive) {
-				for (int i = 0; i < 4; i++) {
-					quad.lightmap(i, LightTexture.FULL_BRIGHT);
-				}
-			} else {
-				final int brightness = flatBrightness(quad, blockInfo.blockState, blockInfo.blockPos);
-
-				for (int i = 0; i < 4; i++) {
-					quad.lightmap(i, ColorHelper.maxBrightness(quad.lightmap(i), brightness));
-				}
-			}
-		}
-	}
-
-	/**
-	 * Starting in 1.16 flat shading uses dimension-specific diffuse factors that can be < 1.0
-	 * even for un-shaded quads. These are also applied with AO shading but that is done in AO calculator.
-	 */
-	private void shadeFlatQuad(MutableQuadViewImpl quad, boolean isVanilla) {
-		final boolean hasShade = quad.hasShade();
-
-		// Check the AO mode to match how shade is applied during smooth lighting
-		if ((Indigo.AMBIENT_OCCLUSION_MODE == AoConfig.HYBRID && !isVanilla) || Indigo.AMBIENT_OCCLUSION_MODE == AoConfig.ENHANCED) {
-			if (quad.hasAllVertexNormals()) {
-				for (int i = 0; i < 4; i++) {
-					float shade = normalShade(quad.normalX(i), quad.normalY(i), quad.normalZ(i), hasShade);
-					quad.color(i, ColorHelper.multiplyRGB(quad.color(i), shade));
-				}
-			} else {
-				final float faceShade;
-
-				if ((quad.geometryFlags() & AXIS_ALIGNED_FLAG) != 0) {
-					faceShade = blockInfo.blockView.getShade(quad.lightFace(), hasShade);
-				} else {
-					Vector3f faceNormal = quad.faceNormal();
-					faceShade = normalShade(faceNormal.x, faceNormal.y, faceNormal.z, hasShade);
-				}
-
-				if (quad.hasVertexNormals()) {
-					for (int i = 0; i < 4; i++) {
-						float shade;
-
-						if (quad.hasNormal(i)) {
-							shade = normalShade(quad.normalX(i), quad.normalY(i), quad.normalZ(i), hasShade);
-						} else {
-							shade = faceShade;
-						}
-
-						quad.color(i, ColorHelper.multiplyRGB(quad.color(i), shade));
-					}
-				} else {
-					if (faceShade != 1.0f) {
-						for (int i = 0; i < 4; i++) {
-							quad.color(i, ColorHelper.multiplyRGB(quad.color(i), faceShade));
-						}
-					}
-				}
-			}
-		} else {
-			final float faceShade = blockInfo.blockView.getShade(quad.lightFace(), hasShade);
-
-			if (faceShade != 1.0f) {
-				for (int i = 0; i < 4; i++) {
-					quad.color(i, ColorHelper.multiplyRGB(quad.color(i), faceShade));
-				}
-			}
-		}
-	}
-
-	/**
-	 * Finds mean of per-face shading factors weighted by normal components.
-	 * Not how light actually works but the vanilla diffuse shading model is a hack to start with
-	 * and this gives reasonable results for non-cubic surfaces in a vanilla-style renderer.
-	 */
-	private float normalShade(float normalX, float normalY, float normalZ, boolean hasShade) {
-		float sum = 0;
-		float div = 0;
-
-		if (normalX > 0) {
-			sum += normalX * blockInfo.blockView.getShade(Direction.EAST, hasShade);
-			div += normalX;
-		} else if (normalX < 0) {
-			sum += -normalX * blockInfo.blockView.getShade(Direction.WEST, hasShade);
-			div -= normalX;
-		}
-
-		if (normalY > 0) {
-			sum += normalY * blockInfo.blockView.getShade(Direction.UP, hasShade);
-			div += normalY;
-		} else if (normalY < 0) {
-			sum += -normalY * blockInfo.blockView.getShade(Direction.DOWN, hasShade);
-			div -= normalY;
-		}
-
-		if (normalZ > 0) {
-			sum += normalZ * blockInfo.blockView.getShade(Direction.SOUTH, hasShade);
-			div += normalZ;
-		} else if (normalZ < 0) {
-			sum += -normalZ * blockInfo.blockView.getShade(Direction.NORTH, hasShade);
-			div -= normalZ;
-		}
-
-		return sum / div;
-	}
-
-	/**
-	 * Handles geometry-based check for using self brightness or neighbor brightness.
-	 * That logic only applies in flat lighting.
-	 */
-	private int flatBrightness(MutableQuadViewImpl quad, BlockState blockState, BlockPos pos) {
-		lightPos.set(pos);
-
-		// To mirror Vanilla's behavior, if the face has a cull-face, always sample the light value
-		// offset in that direction. See net.minecraft.client.render.block.BlockModelRenderer.renderQuadsFlat
-		// for reference.
-		if (quad.cullFace() != null) {
-			lightPos.move(quad.cullFace());
-		} else {
-			final int flags = quad.geometryFlags();
-
-			if ((flags & LIGHT_FACE_FLAG) != 0 || ((flags & AXIS_ALIGNED_FLAG) != 0 && blockState.isCollisionShapeFullBlock(blockInfo.blockView, pos))) {
-				lightPos.move(quad.lightFace());
-			}
-		}
-
-		// Unfortunately cannot use brightness cache here unless we implement one specifically for flat lighting. See #329
-		return LevelRenderer.getLightColor(blockInfo.blockView, blockState, lightPos);
-	}
-
-	/**
-	 * Consumer for vanilla baked models. Generally intended to give visual results matching a vanilla render,
-	 * however there could be subtle (and desirable) lighting variations so is good to be able to render
-	 * everything consistently.
-	 *
-	 * <p>Also, the API allows multi-part models that hold multiple vanilla models to render them without
-	 * combining quad lists, but the vanilla logic only handles one model per block. To route all of
-	 * them through vanilla logic would require additional hooks.
-	 */
-	private class BakedModelConsumerImpl implements BakedModelConsumer {
-		@Override
-		public void accept(BakedModel model) {
-			accept(model, blockInfo.blockState);
-		}
-
-		@Override
-		public void accept(BakedModel model, @Nullable BlockState state) {
-			VanillaModelEncoder.emitBlockQuads(model, state, blockInfo.randomSupplier, AbstractBlockRenderContext.this, vanillaModelEditorQuad);
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/AbstractRenderContext.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/AbstractRenderContext.java
deleted file mode 100644
index 9c9792196481a1f4a7ef64d6c73293824a3a9a4f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/AbstractRenderContext.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import java.util.function.Consumer;
-import QuadTransform;
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import org.joml.Matrix3f;
-import org.joml.Matrix4f;
-import org.joml.Vector3f;
-import org.joml.Vector4f;
-import net.fabricmc.fabric.api.renderer.v1.mesh.Mesh;
-import net.fabricmc.fabric.api.renderer.v1.mesh.MutableQuadView;
-import net.fabricmc.fabric.api.renderer.v1.render.RenderContext;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.MutableQuadViewImpl;
-
-abstract class AbstractRenderContext implements RenderContext {
-	private static final QuadTransform NO_TRANSFORM = q -> true;
-
-	private QuadTransform activeTransform = NO_TRANSFORM;
-	private final ObjectArrayList<QuadTransform> transformStack = new ObjectArrayList<>();
-	private final QuadTransform stackTransform = q -> {
-		int i = transformStack.size() - 1;
-
-		while (i >= 0) {
-			if (!transformStack.get(i--).transform(q)) {
-				return false;
-			}
-		}
-
-		return true;
-	};
-
-	@Deprecated
-	private final Consumer<Mesh> meshConsumer = mesh -> mesh.outputTo(getEmitter());
-
-	protected Matrix4f matrix;
-	protected Matrix3f normalMatrix;
-	protected int overlay;
-	private final Vector4f posVec = new Vector4f();
-	private final Vector3f normalVec = new Vector3f();
-
-	protected final boolean transform(MutableQuadView q) {
-		return activeTransform.transform(q);
-	}
-
-	@Override
-	public boolean hasTransform() {
-		return activeTransform != NO_TRANSFORM;
-	}
-
-	@Override
-	public void pushTransform(QuadTransform transform) {
-		if (transform == null) {
-			throw new NullPointerException("Renderer received null QuadTransform.");
-		}
-
-		transformStack.push(transform);
-
-		if (transformStack.size() == 1) {
-			activeTransform = transform;
-		} else if (transformStack.size() == 2) {
-			activeTransform = stackTransform;
-		}
-	}
-
-	@Override
-	public void popTransform() {
-		transformStack.pop();
-
-		if (transformStack.size() == 0) {
-			activeTransform = NO_TRANSFORM;
-		} else if (transformStack.size() == 1) {
-			activeTransform = transformStack.get(0);
-		}
-	}
-
-	// Overridden to prevent allocating a lambda every time this method is called.
-	@Deprecated
-	@Override
-	public Consumer<Mesh> meshConsumer() {
-		return meshConsumer;
-	}
-
-	/** final output step, common to all renders. */
-	protected void bufferQuad(MutableQuadViewImpl quad, VertexConsumer vertexConsumer) {
-		final Vector4f posVec = this.posVec;
-		final Vector3f normalVec = this.normalVec;
-		final boolean useNormals = quad.hasVertexNormals();
-
-		if (useNormals) {
-			quad.populateMissingNormals();
-		} else {
-			normalVec.set(quad.faceNormal());
-			normalVec.mul(normalMatrix);
-		}
-
-		for (int i = 0; i < 4; i++) {
-			posVec.set(quad.x(i), quad.y(i), quad.z(i), 1.0f);
-			posVec.mul(matrix);
-			vertexConsumer.vertex(posVec.x(), posVec.y(), posVec.z());
-
-			final int color = quad.color(i);
-			vertexConsumer.color((color >>> 16) & 0xFF, (color >>> 8) & 0xFF, color & 0xFF, (color >>> 24) & 0xFF);
-			vertexConsumer.uv(quad.u(i), quad.v(i));
-			vertexConsumer.overlayCoords(overlay);
-			vertexConsumer.uv2(quad.lightmap(i));
-
-			if (useNormals) {
-				quad.copyNormal(i, normalVec);
-				normalVec.mul(normalMatrix);
-			}
-
-			vertexConsumer.normal(normalVec.x(), normalVec.y(), normalVec.z());
-			vertexConsumer.endVertex();
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/BlockRenderContext.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/BlockRenderContext.java
deleted file mode 100644
index c9e76bdf1d7b174628cb7d83b67c8531c8c6ca70..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/BlockRenderContext.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import com.mojang.blaze3d.vertex.PoseStack;
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoCalculator;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoLuminanceFix;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.resources.model.BakedModel;
-import net.minecraft.core.BlockPos;
-import net.minecraft.util.RandomSource;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.phys.Vec3;
-
-/**
- * Context for non-terrain block rendering.
- */
-public class BlockRenderContext extends AbstractBlockRenderContext {
-	private VertexConsumer vertexConsumer;
-
-	@Override
-	protected AoCalculator createAoCalc(BlockRenderInfo blockInfo) {
-		return new AoCalculator(blockInfo) {
-			@Override
-			public int light(BlockPos pos, BlockState state) {
-				return AoCalculator.getLightmapCoordinates(blockInfo.blockView, state, pos);
-			}
-
-			@Override
-			public float ao(BlockPos pos, BlockState state) {
-				return AoLuminanceFix.INSTANCE.apply(blockInfo.blockView, pos, state);
-			}
-		};
-	}
-
-	@Override
-	protected VertexConsumer getVertexConsumer(RenderType layer) {
-		return vertexConsumer;
-	}
-
-	public void render(BlockAndTintGetter blockView, BakedModel model, BlockState state, BlockPos pos, PoseStack matrixStack, VertexConsumer buffer, boolean cull, RandomSource random, long seed, int overlay) {
-		try {
-			Vec3 offset = state.getOffset(blockView, pos);
-			matrixStack.translate(offset.x, offset.y, offset.z);
-
-			this.vertexConsumer = buffer;
-			this.matrix = matrixStack.last().pose();
-			this.normalMatrix = matrixStack.last().normal();
-			this.overlay = overlay;
-
-			blockInfo.random = random;
-			blockInfo.seed = seed;
-			blockInfo.recomputeSeed = false;
-
-			aoCalc.clear();
-			blockInfo.prepareForWorld(blockView, cull);
-			blockInfo.prepareForBlock(state, pos, model.useAmbientOcclusion());
-
-			model.emitBlockQuads(blockView, state, pos, blockInfo.randomSupplier, this);
-		} catch (Throwable throwable) {
-			CrashReport crashReport = CrashReport.forThrowable(throwable, "Tessellating block model - Indigo Renderer");
-			CrashReportCategory crashReportSection = crashReport.addCategory("Block model being tessellated");
-			CrashReportCategory.populateBlockDetails(crashReportSection, blockView, pos, state);
-			throw new ReportedException(crashReport);
-		} finally {
-			blockInfo.release();
-			blockInfo.random = null;
-			this.vertexConsumer = null;
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/BlockRenderInfo.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/BlockRenderInfo.java
deleted file mode 100644
index f3e0696898068514a4ae81e2163a8c8d6fba88b0..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/BlockRenderInfo.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import java.util.function.Supplier;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.renderer.v1.material.BlendMode;
-import net.minecraft.client.Minecraft;
-import net.minecraft.client.color.block.BlockColors;
-import net.minecraft.client.renderer.ItemBlockRenderTypes;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.util.RandomSource;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.state.BlockState;
-
-/**
- * Holds, manages, and provides access to the block/world related state
- * needed to render quads.
- *
- * <p>Exception: per-block position offsets are tracked in {@link ChunkRenderInfo}
- * so they can be applied together with chunk offsets.
- */
-public class BlockRenderInfo {
-	private final BlockColors blockColorMap = Minecraft.getInstance().getBlockColors();
-	private final BlockPos.MutableBlockPos searchPos = new BlockPos.MutableBlockPos();
-
-	public BlockAndTintGetter blockView;
-	public BlockPos blockPos;
-	public BlockState blockState;
-
-	boolean useAo;
-	boolean defaultAo;
-	RenderType defaultLayer;
-
-	RandomSource random;
-	long seed;
-	boolean recomputeSeed;
-	public final Supplier<RandomSource> randomSupplier = () -> {
-		long seed = this.seed;
-
-		if (recomputeSeed) {
-			seed = blockState.getSeed(blockPos);
-			this.seed = seed;
-			recomputeSeed = false;
-		}
-
-		final RandomSource random = this.random;
-		random.setSeed(seed);
-		return random;
-	};
-
-	private boolean enableCulling;
-	private int cullCompletionFlags;
-	private int cullResultFlags;
-
-	public void prepareForWorld(BlockAndTintGetter blockView, boolean enableCulling) {
-		this.blockView = blockView;
-		this.enableCulling = enableCulling;
-	}
-
-	public void prepareForBlock(BlockState blockState, BlockPos blockPos, boolean modelAo) {
-		this.blockPos = blockPos;
-		this.blockState = blockState;
-
-		useAo = Minecraft.useAmbientOcclusion();
-		defaultAo = useAo && modelAo && blockState.getLightEmission() == 0;
-
-		defaultLayer = ItemBlockRenderTypes.getChunkRenderType(blockState);
-
-		cullCompletionFlags = 0;
-		cullResultFlags = 0;
-	}
-
-	public void release() {
-		blockView = null;
-		blockPos = null;
-		blockState = null;
-	}
-
-	int blockColor(int colorIndex) {
-		return 0xFF000000 | blockColorMap.getColor(blockState, blockView, blockPos, colorIndex);
-	}
-
-	boolean shouldDrawFace(@Nullable Direction face) {
-		if (face == null || !enableCulling) {
-			return true;
-		}
-
-		final int mask = 1 << face.get3DDataValue();
-
-		if ((cullCompletionFlags & mask) == 0) {
-			cullCompletionFlags |= mask;
-
-			if (Block.shouldRenderFace(blockState, blockView, blockPos, face, searchPos.setWithOffset(blockPos, face))) {
-				cullResultFlags |= mask;
-				return true;
-			} else {
-				return false;
-			}
-		} else {
-			return (cullResultFlags & mask) != 0;
-		}
-	}
-
-	RenderType effectiveRenderLayer(BlendMode blendMode) {
-		return blendMode == BlendMode.DEFAULT ? this.defaultLayer : blendMode.blockRenderLayer;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/ChunkRenderInfo.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/ChunkRenderInfo.java
deleted file mode 100644
index 66351864f702343d59ef8f56c27a38042466c723..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/ChunkRenderInfo.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import java.util.Set;
-import com.mojang.blaze3d.vertex.BufferBuilder;
-import it.unimi.dsi.fastutil.longs.Long2FloatOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
-import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoCalculator;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoLuminanceFix;
-import net.minecraft.client.renderer.LevelRenderer;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.renderer.SectionBufferBuilderPack;
-import net.minecraft.client.renderer.chunk.RenderChunkRegion;
-import net.minecraft.client.renderer.chunk.SectionRenderDispatcher.RenderSection;
-import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.block.state.BlockState;
-
-/**
- * Holds, manages and provides access to the chunk-related state
- * needed by fallback and mesh consumers during terrain rendering.
- *
- * <p>Exception: per-block position offsets are tracked here so they can
- * be applied together with chunk offsets.
- */
-public class ChunkRenderInfo {
-	/**
-	 * Serves same function as brightness cache in Mojang's AO calculator,
-	 * with some differences as follows...
-	 *
-	 * <ul><li>Mojang uses Object2Int.  This uses Long2Int for performance and to avoid
-	 * creating new immutable BlockPos references.  But will break if someone
-	 * wants to expand Y limit or world borders.  If we want to support that may
-	 * need to switch or make configurable.
-	 *
-	 * <li>Mojang overrides the map methods to limit the cache to 50 values.
-	 * However, a render chunk only has 18^3 blocks in it, and the cache is cleared every chunk.
-	 * For performance and simplicity, we just let map grow to the size of the render chunk.
-	 *
-	 * <li>Mojang only uses the cache for Ao.  Here it is used for all brightness
-	 * lookups, including flat lighting.
-	 *
-	 * <li>The Mojang cache is a separate threadlocal with a threadlocal boolean to
-	 * enable disable. Cache clearing happens with the disable. There's no use case for
-	 * us when the cache needs to be disabled (and no apparent case in Mojang's code either)
-	 * so we simply clear the cache at the start of each new chunk. It is also
-	 * not a threadlocal because it's held within a threadlocal BlockRenderer.</ul>
-	 */
-	private final Long2IntOpenHashMap brightnessCache;
-	private final Long2FloatOpenHashMap aoLevelCache;
-
-	private final BlockPos.MutableBlockPos chunkOrigin = new BlockPos.MutableBlockPos();
-	RenderSection.RebuildTask.CompileResults renderData;
-	RenderSection chunkRenderer;
-	SectionBufferBuilderPack builders;
-	Set<RenderType> initializedLayers;
-	BlockAndTintGetter blockView;
-
-	private final Object2ObjectOpenHashMap<RenderType, BufferBuilder> buffers = new Object2ObjectOpenHashMap<>();
-
-	ChunkRenderInfo() {
-		brightnessCache = new Long2IntOpenHashMap();
-		brightnessCache.defaultReturnValue(Integer.MAX_VALUE);
-		aoLevelCache = new Long2FloatOpenHashMap();
-		aoLevelCache.defaultReturnValue(Float.MAX_VALUE);
-	}
-
-	void prepare(RenderChunkRegion blockView, RenderSection chunkRenderer, RenderSection.RebuildTask.CompileResults renderData, SectionBufferBuilderPack builders, Set<RenderType> initializedLayers) {
-		this.blockView = blockView;
-		this.chunkOrigin.set(chunkRenderer.getOrigin());
-		this.renderData = renderData;
-		this.chunkRenderer = chunkRenderer;
-		this.builders = builders;
-		this.initializedLayers = initializedLayers;
-		buffers.clear();
-		brightnessCache.clear();
-		aoLevelCache.clear();
-	}
-
-	void release() {
-		renderData = null;
-		chunkRenderer = null;
-		buffers.clear();
-	}
-
-	/** Lazily retrieves output buffer for given layer, initializing as needed. */
-	public BufferBuilder getInitializedBuffer(RenderType renderLayer) {
-		BufferBuilder builder = buffers.get(renderLayer);
-
-		if (builder == null) {
-			builder = builders.builder(renderLayer);
-
-			if (initializedLayers.add(renderLayer)) {
-				chunkRenderer.beginLayer(builder);
-			}
-
-			buffers.put(renderLayer, builder);
-		}
-
-		return builder;
-	}
-
-	/**
-	 * Cached values for {@link LevelRenderer#getLightColor(BlockAndTintGetter, BlockState, BlockPos)}.
-	 * See also the comments for {@link #brightnessCache}.
-	 */
-	int cachedBrightness(BlockPos pos, BlockState state) {
-		long key = pos.asLong();
-		int result = brightnessCache.get(key);
-
-		if (result == Integer.MAX_VALUE) {
-			result = AoCalculator.getLightmapCoordinates(blockView, state, pos);
-			brightnessCache.put(key, result);
-		}
-
-		return result;
-	}
-
-	float cachedAoLevel(BlockPos pos, BlockState state) {
-		long key = pos.asLong();
-		float result = aoLevelCache.get(key);
-
-		if (result == Float.MAX_VALUE) {
-			result = AoLuminanceFix.INSTANCE.apply(blockView, pos, state);
-			aoLevelCache.put(key, result);
-		}
-
-		return result;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/ItemRenderContext.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/ItemRenderContext.java
deleted file mode 100644
index 52fbd23d5a72b7416033711e6c899e1aa359421b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/ItemRenderContext.java
+++ /dev/null
@@ -1,308 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import BakedModelConsumer;
-import com.mojang.blaze3d.vertex.PoseStack;
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import com.mojang.math.MatrixUtil;
-import java.util.function.Supplier;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.renderer.v1.material.BlendMode;
-import net.fabricmc.fabric.api.renderer.v1.material.RenderMaterial;
-import net.fabricmc.fabric.api.renderer.v1.mesh.QuadEmitter;
-import net.fabricmc.fabric.api.util.TriState;
-import net.fabricmc.fabric.impl.client.indigo.renderer.helper.ColorHelper;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.EncodingFormat;
-import net.fabricmc.fabric.impl.client.indigo.renderer.mesh.MutableQuadViewImpl;
-import net.fabricmc.fabric.impl.renderer.VanillaModelEncoder;
-import net.fabricmc.fabric.mixin.client.indigo.renderer.ItemRendererAccessor;
-import net.minecraft.client.Minecraft;
-import net.minecraft.client.color.item.ItemColors;
-import net.minecraft.client.renderer.ItemBlockRenderTypes;
-import net.minecraft.client.renderer.LightTexture;
-import net.minecraft.client.renderer.MultiBufferSource;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.renderer.Sheets;
-import net.minecraft.client.renderer.entity.ItemRenderer;
-import net.minecraft.client.resources.model.BakedModel;
-import net.minecraft.core.Direction;
-import net.minecraft.util.RandomSource;
-import net.minecraft.world.item.BlockItem;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.item.ItemDisplayContext;
-import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.block.state.BlockState;
-
-/**
- * The render context used for item rendering.
- */
-public class ItemRenderContext extends AbstractRenderContext {
-	/** Value vanilla uses for item rendering.  The only sensible choice, of course.  */
-	private static final long ITEM_RANDOM_SEED = 42L;
-
-	private final ItemColors colorMap;
-	private final RandomSource random = RandomSource.create();
-	private final Supplier<RandomSource> randomSupplier = () -> {
-		random.setSeed(ITEM_RANDOM_SEED);
-		return random;
-	};
-
-	private final MutableQuadViewImpl editorQuad = new MutableQuadViewImpl() {
-		{
-			data = new int[EncodingFormat.TOTAL_STRIDE];
-			clear();
-		}
-
-		@Override
-		public void emitDirectly() {
-			renderQuad(this);
-		}
-	};
-
-	private final BakedModelConsumerImpl vanillaModelConsumer = new BakedModelConsumerImpl();
-
-	private ItemStack itemStack;
-	private ItemDisplayContext transformMode;
-	private PoseStack matrixStack;
-	private MultiBufferSource vertexConsumerProvider;
-	private int lightmap;
-
-	private boolean isDefaultTranslucent;
-	private boolean isTranslucentDirect;
-	private boolean isDefaultGlint;
-	private boolean isGlintDynamicDisplay;
-
-	private PoseStack.Pose dynamicDisplayGlintEntry;
-	private VertexConsumer translucentVertexConsumer;
-	private VertexConsumer cutoutVertexConsumer;
-	private VertexConsumer translucentGlintVertexConsumer;
-	private VertexConsumer cutoutGlintVertexConsumer;
-
-	public ItemRenderContext(ItemColors colorMap) {
-		this.colorMap = colorMap;
-	}
-
-	@Override
-	public QuadEmitter getEmitter() {
-		editorQuad.clear();
-		return editorQuad;
-	}
-
-	@Override
-	public boolean isFaceCulled(@Nullable Direction face) {
-		throw new IllegalStateException("isFaceCulled can only be called on a block render context.");
-	}
-
-	@Override
-	public ItemDisplayContext itemTransformationMode() {
-		return transformMode;
-	}
-
-	@Override
-	public BakedModelConsumer bakedModelConsumer() {
-		return vanillaModelConsumer;
-	}
-
-	public void renderModel(ItemStack itemStack, ItemDisplayContext transformMode, boolean invert, PoseStack matrixStack, MultiBufferSource vertexConsumerProvider, int lightmap, int overlay, BakedModel model) {
-		this.itemStack = itemStack;
-		this.transformMode = transformMode;
-		this.matrixStack = matrixStack;
-		this.vertexConsumerProvider = vertexConsumerProvider;
-		this.lightmap = lightmap;
-		this.overlay = overlay;
-		computeOutputInfo();
-
-		matrix = matrixStack.last().pose();
-		normalMatrix = matrixStack.last().normal();
-
-		model.emitItemQuads(itemStack, randomSupplier, this);
-
-		this.itemStack = null;
-		this.matrixStack = null;
-		this.vertexConsumerProvider = null;
-
-		dynamicDisplayGlintEntry = null;
-		translucentVertexConsumer = null;
-		cutoutVertexConsumer = null;
-		translucentGlintVertexConsumer = null;
-		cutoutGlintVertexConsumer = null;
-	}
-
-	private void computeOutputInfo() {
-		isDefaultTranslucent = true;
-		isTranslucentDirect = true;
-
-		Item item = itemStack.getItem();
-
-		if (item instanceof BlockItem blockItem) {
-			BlockState state = blockItem.getBlock().defaultBlockState();
-			RenderType renderLayer = ItemBlockRenderTypes.getChunkRenderType(state);
-
-			if (renderLayer != RenderType.translucent()) {
-				isDefaultTranslucent = false;
-			}
-
-			if (transformMode != ItemDisplayContext.GUI && !transformMode.firstPerson()) {
-				isTranslucentDirect = false;
-			}
-		}
-
-		isDefaultGlint = itemStack.hasFoil();
-		isGlintDynamicDisplay = ItemRendererAccessor.fabric_callUsesDynamicDisplay(itemStack);
-	}
-
-	private void renderQuad(MutableQuadViewImpl quad) {
-		if (!transform(quad)) {
-			return;
-		}
-
-		final RenderMaterial mat = quad.material();
-		final int colorIndex = mat.disableColorIndex() ? -1 : quad.colorIndex();
-		final boolean emissive = mat.emissive();
-		final VertexConsumer vertexConsumer = getVertexConsumer(mat.blendMode(), mat.glint());
-
-		colorizeQuad(quad, colorIndex);
-		shadeQuad(quad, emissive);
-		bufferQuad(quad, vertexConsumer);
-	}
-
-	private void colorizeQuad(MutableQuadViewImpl quad, int colorIndex) {
-		if (colorIndex != -1) {
-			final int itemColor = colorMap.getColor(itemStack, colorIndex);
-
-			for (int i = 0; i < 4; i++) {
-				quad.color(i, ColorHelper.multiplyColor(itemColor, quad.color(i)));
-			}
-		}
-	}
-
-	private void shadeQuad(MutableQuadViewImpl quad, boolean emissive) {
-		if (emissive) {
-			for (int i = 0; i < 4; i++) {
-				quad.lightmap(i, LightTexture.FULL_BRIGHT);
-			}
-		} else {
-			final int lightmap = this.lightmap;
-
-			for (int i = 0; i < 4; i++) {
-				quad.lightmap(i, ColorHelper.maxBrightness(quad.lightmap(i), lightmap));
-			}
-		}
-	}
-
-	/**
-	 * Caches custom blend mode / vertex consumers and mimics the logic
-	 * in {@code RenderLayers.getEntityBlockLayer}. Layers other than
-	 * translucent are mapped to cutout.
-	 */
-	private VertexConsumer getVertexConsumer(BlendMode blendMode, TriState glintMode) {
-		boolean translucent;
-		boolean glint;
-
-		if (blendMode == BlendMode.DEFAULT) {
-			translucent = isDefaultTranslucent;
-		} else {
-			translucent = blendMode == BlendMode.TRANSLUCENT;
-		}
-
-		if (glintMode == TriState.DEFAULT) {
-			glint = isDefaultGlint;
-		} else {
-			glint = glintMode == TriState.TRUE;
-		}
-
-		if (translucent) {
-			if (glint) {
-				if (translucentGlintVertexConsumer == null) {
-					translucentGlintVertexConsumer = createTranslucentVertexConsumer(true);
-				}
-
-				return translucentGlintVertexConsumer;
-			} else {
-				if (translucentVertexConsumer == null) {
-					translucentVertexConsumer = createTranslucentVertexConsumer(false);
-				}
-
-				return translucentVertexConsumer;
-			}
-		} else {
-			if (glint) {
-				if (cutoutGlintVertexConsumer == null) {
-					cutoutGlintVertexConsumer = createCutoutVertexConsumer(true);
-				}
-
-				return cutoutGlintVertexConsumer;
-			} else {
-				if (cutoutVertexConsumer == null) {
-					cutoutVertexConsumer = createCutoutVertexConsumer(false);
-				}
-
-				return cutoutVertexConsumer;
-			}
-		}
-	}
-
-	private VertexConsumer createTranslucentVertexConsumer(boolean glint) {
-		if (glint && isGlintDynamicDisplay) {
-			return createDynamicDisplayGlintVertexConsumer(Minecraft.useShaderTransparency() && !isTranslucentDirect ? Sheets.translucentItemSheet() : Sheets.translucentCullBlockSheet());
-		}
-
-		if (isTranslucentDirect) {
-			return ItemRenderer.getFoilBufferDirect(vertexConsumerProvider, Sheets.translucentCullBlockSheet(), true, glint);
-		} else if (Minecraft.useShaderTransparency()) {
-			return ItemRenderer.getFoilBuffer(vertexConsumerProvider, Sheets.translucentItemSheet(), true, glint);
-		} else {
-			return ItemRenderer.getFoilBuffer(vertexConsumerProvider, Sheets.translucentCullBlockSheet(), true, glint);
-		}
-	}
-
-	private VertexConsumer createCutoutVertexConsumer(boolean glint) {
-		if (glint && isGlintDynamicDisplay) {
-			return createDynamicDisplayGlintVertexConsumer(Sheets.cutoutBlockSheet());
-		}
-
-		return ItemRenderer.getFoilBufferDirect(vertexConsumerProvider, Sheets.cutoutBlockSheet(), true, glint);
-	}
-
-	private VertexConsumer createDynamicDisplayGlintVertexConsumer(RenderType layer) {
-		if (dynamicDisplayGlintEntry == null) {
-			dynamicDisplayGlintEntry = matrixStack.last().copy();
-
-			if (transformMode == ItemDisplayContext.GUI) {
-				MatrixUtil.mulComponentWise(dynamicDisplayGlintEntry.pose(), 0.5F);
-			} else if (transformMode.firstPerson()) {
-				MatrixUtil.mulComponentWise(dynamicDisplayGlintEntry.pose(), 0.75F);
-			}
-		}
-
-		return ItemRenderer.getCompassFoilBuffer(vertexConsumerProvider, layer, dynamicDisplayGlintEntry);
-	}
-
-	private class BakedModelConsumerImpl implements BakedModelConsumer {
-		@Override
-		public void accept(BakedModel model) {
-			accept(model, null);
-		}
-
-		@Override
-		public void accept(BakedModel model, @Nullable BlockState state) {
-			VanillaModelEncoder.emitItemQuads(model, state, randomSupplier, ItemRenderContext.this);
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/TerrainRenderContext.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/TerrainRenderContext.java
deleted file mode 100644
index 2b4e54511514912148b43dc05759ba17c541f0c2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/TerrainRenderContext.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import com.mojang.blaze3d.vertex.PoseStack;
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import java.util.Set;
-import net.fabricmc.fabric.api.renderer.v1.render.RenderContext;
-import net.fabricmc.fabric.impl.client.indigo.renderer.aocalc.AoCalculator;
-import net.minecraft.CrashReport;
-import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.renderer.SectionBufferBuilderPack;
-import net.minecraft.client.renderer.chunk.RenderChunkRegion;
-import net.minecraft.client.renderer.chunk.SectionRenderDispatcher.RenderSection;
-import net.minecraft.client.renderer.texture.OverlayTexture;
-import net.minecraft.client.resources.model.BakedModel;
-import net.minecraft.core.BlockPos;
-import net.minecraft.util.RandomSource;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.phys.Vec3;
-
-/**
- * Implementation of {@link RenderContext} used during terrain rendering.
- * Dispatches calls from models during chunk rebuild to the appropriate consumer,
- * and holds/manages all of the state needed by them.
- */
-public class TerrainRenderContext extends AbstractBlockRenderContext {
-	public static final ThreadLocal<TerrainRenderContext> POOL = ThreadLocal.withInitial(TerrainRenderContext::new);
-
-	private final ChunkRenderInfo chunkInfo = new ChunkRenderInfo();
-
-	public TerrainRenderContext() {
-		overlay = OverlayTexture.NO_OVERLAY;
-		blockInfo.random = RandomSource.create();
-	}
-
-	@Override
-	protected AoCalculator createAoCalc(BlockRenderInfo blockInfo) {
-		return new AoCalculator(blockInfo) {
-			@Override
-			public int light(BlockPos pos, BlockState state) {
-				return chunkInfo.cachedBrightness(pos, state);
-			}
-
-			@Override
-			public float ao(BlockPos pos, BlockState state) {
-				return chunkInfo.cachedAoLevel(pos, state);
-			}
-		};
-	}
-
-	@Override
-	protected VertexConsumer getVertexConsumer(RenderType layer) {
-		return chunkInfo.getInitializedBuffer(layer);
-	}
-
-	public void prepare(RenderChunkRegion blockView, RenderSection chunkRenderer, RenderSection.RebuildTask.CompileResults renderData, SectionBufferBuilderPack builders, Set<RenderType> initializedLayers) {
-		blockInfo.prepareForWorld(blockView, true);
-		chunkInfo.prepare(blockView, chunkRenderer, renderData, builders, initializedLayers);
-	}
-
-	public void release() {
-		chunkInfo.release();
-		blockInfo.release();
-	}
-
-	/** Called from chunk renderer hook. */
-	public void tessellateBlock(BlockState blockState, BlockPos blockPos, final BakedModel model, PoseStack matrixStack) {
-		try {
-			Vec3 offset = blockState.getOffset(chunkInfo.blockView, blockPos);
-			matrixStack.translate(offset.x, offset.y, offset.z);
-
-			this.matrix = matrixStack.last().pose();
-			this.normalMatrix = matrixStack.last().normal();
-
-			blockInfo.recomputeSeed = true;
-
-			aoCalc.clear();
-			blockInfo.prepareForBlock(blockState, blockPos, model.useAmbientOcclusion());
-			model.emitBlockQuads(blockInfo.blockView, blockInfo.blockState, blockInfo.blockPos, blockInfo.randomSupplier, this);
-		} catch (Throwable throwable) {
-			CrashReport crashReport = CrashReport.forThrowable(throwable, "Tessellating block in world - Indigo Renderer");
-			CrashReportCategory crashReportSection = crashReport.addCategory("Block being tessellated");
-			CrashReportCategory.populateBlockDetails(crashReportSection, chunkInfo.blockView, blockPos, blockState);
-			throw new ReportedException(crashReport);
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/package-info.java
deleted file mode 100644
index a5bb565ab4665c92a464dd7af84b4cf0e037024c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/indigo/renderer/render/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-renderer-indigo.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.indigo.renderer.render;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/itemgroup/FabricCreativeGuiComponents.java b/src/main/java/net/fabricmc/fabric/impl/client/itemgroup/FabricCreativeGuiComponents.java
deleted file mode 100644
index 122c30bd446fe54943670e41f587a4618478446c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/itemgroup/FabricCreativeGuiComponents.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.itemgroup;
-
-import java.util.Set;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-import java.util.stream.Collectors;
-import net.fabricmc.fabric.impl.itemgroup.FabricItemGroupImpl;
-import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.GuiGraphics;
-import net.minecraft.client.gui.components.Button;
-import net.minecraft.client.gui.screens.inventory.CreativeModeInventoryScreen;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.network.chat.Component;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.item.CreativeModeTab;
-import net.minecraft.world.item.CreativeModeTabs;
-
-public class FabricCreativeGuiComponents {
-	private static final ResourceLocation BUTTON_TEX = new ResourceLocation("fabric", "textures/gui/creative_buttons.png");
-	private static final double TABS_PER_PAGE = FabricItemGroupImpl.TABS_PER_PAGE;
-	public static final Set<CreativeModeTab> COMMON_GROUPS = Set.of(CreativeModeTabs.SEARCH, CreativeModeTabs.INVENTORY, CreativeModeTabs.HOTBAR).stream()
-			.map(BuiltInRegistries.CREATIVE_MODE_TAB::getOrThrow)
-			.collect(Collectors.toSet());
-
-	public static int getPageCount() {
-		return (int) Math.ceil((CreativeModeTabs.tabs().size() - COMMON_GROUPS.size()) / TABS_PER_PAGE);
-	}
-
-	public static class ItemGroupButtonWidget extends Button {
-		final CreativeModeInventoryScreen screen;
-		final Type type;
-
-		public ItemGroupButtonWidget(int x, int y, Type type, CreativeModeInventoryScreen screen) {
-			super(x, y, 11, 12, type.text, (bw) -> type.clickConsumer.accept(screen), Button.DEFAULT_NARRATION);
-			this.type = type;
-			this.screen = screen;
-		}
-
-		@Override
-		protected void renderWidget(GuiGraphics drawContext, int mouseX, int mouseY, float delta) {
-			this.active = type.isEnabled.test(screen);
-			this.visible = screen.hasAdditionalPages();
-
-			if (!this.visible) {
-				return;
-			}
-
-			int u = active && this.isHovered() ? 22 : 0;
-			int v = active ? 0 : 12;
-			drawContext.blit(BUTTON_TEX, this.getX(), this.getY(), u + (type == Type.NEXT ? 11 : 0), v, 11, 12);
-
-			if (this.isHovered()) {
-				drawContext.renderTooltip(Minecraft.getInstance().font, Component.translatable("fabric.gui.creativeTabPage", screen.getCurrentPage() + 1, getPageCount()), mouseX, mouseY);
-			}
-		}
-	}
-
-	public enum Type {
-		NEXT(Component.literal(">"), CreativeModeInventoryScreen::switchToNextPage, screen -> screen.getCurrentPage() + 1 < screen.getPageCount()),
-		PREVIOUS(Component.literal("<"), CreativeModeInventoryScreen::switchToPreviousPage, screen -> screen.getCurrentPage() != 0);
-
-		final Component text;
-		final Consumer<CreativeModeInventoryScreen> clickConsumer;
-		final Predicate<CreativeModeInventoryScreen> isEnabled;
-
-		Type(Component text, Consumer<CreativeModeInventoryScreen> clickConsumer, Predicate<CreativeModeInventoryScreen> isEnabled) {
-			this.text = text;
-			this.clickConsumer = clickConsumer;
-			this.isEnabled = isEnabled;
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/itemgroup/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/itemgroup/package-info.java
deleted file mode 100644
index cece7a9ee41a52efd81c6df92726dd39e85caf8a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/itemgroup/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-item-group-api-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.itemgroup;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/keybinding/KeyBindingRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/keybinding/KeyBindingRegistryImpl.java
deleted file mode 100644
index 489104113ccf703ce8a201f78e761ed0824febe8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/keybinding/KeyBindingRegistryImpl.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.keybinding;
-
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-
-import com.google.common.collect.Lists;
-import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
-import net.fabricmc.fabric.mixin.client.keybinding.KeyBindingAccessor;
-import net.minecraft.client.KeyMapping;
-import net.minecraft.client.Minecraft;
-
-public final class KeyBindingRegistryImpl {
-	private static final List<KeyMapping> MODDED_KEY_BINDINGS = new ReferenceArrayList<>(); // ArrayList with identity based comparisons for contains/remove/indexOf etc., required for correctly handling duplicate keybinds
-
-	private KeyBindingRegistryImpl() {
-	}
-
-	private static Map<String, Integer> getCategoryMap() {
-		return KeyBindingAccessor.fabric_getCategoryMap();
-	}
-
-	public static boolean addCategory(String categoryTranslationKey) {
-		Map<String, Integer> map = getCategoryMap();
-
-		if (map.containsKey(categoryTranslationKey)) {
-			return false;
-		}
-
-		Optional<Integer> largest = map.values().stream().max(Integer::compareTo);
-		int largestInt = largest.orElse(0);
-		map.put(categoryTranslationKey, largestInt + 1);
-		return true;
-	}
-
-	public static KeyMapping registerKeyBinding(KeyMapping binding) {
-		if (Minecraft.getInstance().options != null) {
-			throw new IllegalStateException("GameOptions has already been initialised");
-		}
-
-		for (KeyMapping existingKeyBindings : MODDED_KEY_BINDINGS) {
-			if (existingKeyBindings == binding) {
-				throw new IllegalArgumentException("Attempted to register a key binding twice: " + binding.getName());
-			} else if (existingKeyBindings.getName().equals(binding.getName())) {
-				throw new IllegalArgumentException("Attempted to register two key bindings with equal ID: " + binding.getName() + "!");
-			}
-		}
-
-		// This will do nothing if the category already exists.
-		addCategory(binding.getCategory());
-		MODDED_KEY_BINDINGS.add(binding);
-		return binding;
-	}
-
-	/**
-	 * Processes the keybindings array for our modded ones by first removing existing modded keybindings and readding them,
-	 * we can make sure that there are no duplicates this way.
-	 */
-	public static KeyMapping[] process(KeyMapping[] keysAll) {
-		List<KeyMapping> newKeysAll = Lists.newArrayList(keysAll);
-		newKeysAll.removeAll(MODDED_KEY_BINDINGS);
-		newKeysAll.addAll(MODDED_KEY_BINDINGS);
-		return newKeysAll.toArray(new KeyMapping[0]);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/keybinding/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/keybinding/package-info.java
deleted file mode 100644
index 4a8fc3306e634203063f4490caac2a0afa9c0601..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/keybinding/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-key-binding-api-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.keybinding;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/ModelLoadingRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/model/ModelLoadingRegistryImpl.java
deleted file mode 100644
index 975540a20e469a33802507aa2b63ae39c5177b57..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/ModelLoadingRegistryImpl.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.model;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.CompletableFuture;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import net.fabricmc.fabric.api.client.model.ExtraModelProvider;
-import net.fabricmc.fabric.api.client.model.ModelAppender;
-import net.fabricmc.fabric.api.client.model.ModelLoadingRegistry;
-import net.fabricmc.fabric.api.client.model.ModelProviderContext;
-import net.fabricmc.fabric.api.client.model.ModelProviderException;
-import net.fabricmc.fabric.api.client.model.ModelResourceProvider;
-import net.fabricmc.fabric.api.client.model.ModelVariantProvider;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelLoadingPlugin;
-import net.fabricmc.fabric.api.client.model.loading.v1.PreparableModelLoadingPlugin;
-import net.fabricmc.fabric.impl.client.model.loading.ModelLoaderPluginContextImpl;
-import net.minecraft.client.resources.model.ModelResourceLocation;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.packs.resources.ResourceManager;
-
-public class ModelLoadingRegistryImpl implements ModelLoadingRegistry {
-	private final List<ExtraModelProvider> modelProviders = new ArrayList<>();
-	private final List<ModelAppender> modelAppenders = new ArrayList<>();
-	private final List<Function<ResourceManager, ModelResourceProvider>> resourceProviderSuppliers = new ArrayList<>();
-	private final List<Function<ResourceManager, ModelVariantProvider>> variantProviderSuppliers = new ArrayList<>();
-
-	{
-		// Grabs the resource manager to use it in the main model loading code.
-		// When using the v1 API, data should be loaded in parallel before model loading starts.
-		PreparableModelLoadingPlugin.register(
-				(resourceManager, executor) -> CompletableFuture.completedFuture(resourceManager),
-				this::onInitializeModelLoader);
-	}
-
-	private void onInitializeModelLoader(ResourceManager resourceManager, ModelLoadingPlugin.Context pluginContext) {
-		Consumer<ResourceLocation> extraModelConsumer = pluginContext::addModels;
-		Consumer<ModelResourceLocation> extraModelConsumer2 = pluginContext::addModels;
-		// A bit hacky, but avoids the allocation of a new context wrapper every time.
-		ModelProviderContext resourceProviderContext = ((ModelLoaderPluginContextImpl) pluginContext).modelGetter::apply;
-
-		for (ExtraModelProvider provider : modelProviders) {
-			provider.provideExtraModels(resourceManager, extraModelConsumer);
-		}
-
-		for (ModelAppender appender : modelAppenders) {
-			appender.appendAll(resourceManager, extraModelConsumer2);
-		}
-
-		for (Function<ResourceManager, ModelResourceProvider> supplier : resourceProviderSuppliers) {
-			ModelResourceProvider provider = supplier.apply(resourceManager);
-
-			pluginContext.resolveModel().register(resolverContext -> {
-				try {
-					return provider.loadModelResource(resolverContext.id(), resourceProviderContext);
-				} catch (ModelProviderException e) {
-					throw new RuntimeException(e);
-				}
-			});
-		}
-
-		for (Function<ResourceManager, ModelVariantProvider> supplier : variantProviderSuppliers) {
-			ModelVariantProvider provider = supplier.apply(resourceManager);
-			((ModelLoaderPluginContextImpl) pluginContext).legacyVariantProviders().register(modelId -> {
-				try {
-					return provider.loadModelVariant(modelId, resourceProviderContext);
-				} catch (ModelProviderException e) {
-					throw new RuntimeException(e);
-				}
-			});
-		}
-	}
-
-	@Override
-	public void registerModelProvider(ExtraModelProvider provider) {
-		modelProviders.add(provider);
-	}
-
-	@Override
-	public void registerAppender(ModelAppender appender) {
-		modelAppenders.add(appender);
-	}
-
-	@Override
-	public void registerResourceProvider(Function<ResourceManager, ModelResourceProvider> providerSupplier) {
-		resourceProviderSuppliers.add(providerSupplier);
-	}
-
-	@Override
-	public void registerVariantProvider(Function<ResourceManager, ModelVariantProvider> providerSupplier) {
-		variantProviderSuppliers.add(providerSupplier);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/BlockStateResolverHolder.java b/src/main/java/net/fabricmc/fabric/impl/client/model/loading/BlockStateResolverHolder.java
deleted file mode 100644
index 04213a69caf809033487bd9c632033cf18af286d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/BlockStateResolverHolder.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.model.loading;
-
-import net.fabricmc.fabric.api.client.model.loading.v1.BlockStateResolver;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.block.Block;
-
-record BlockStateResolverHolder(BlockStateResolver resolver, Block block, ResourceLocation blockId) {
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/LegacyModelVariantProvider.java b/src/main/java/net/fabricmc/fabric/impl/client/model/loading/LegacyModelVariantProvider.java
deleted file mode 100644
index 53ac3b4abffcfe002fba34de6c04b402f9b19c06..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/LegacyModelVariantProvider.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.model.loading;
-
-import net.minecraft.client.resources.model.ModelResourceLocation;
-import net.minecraft.client.resources.model.UnbakedModel;
-import org.jetbrains.annotations.Nullable;
-
-/**
- * Legacy v0 bridge - remove if the legacy v0 module is removed.
- */
-public interface LegacyModelVariantProvider {
-	@Nullable
-	UnbakedModel loadModelVariant(ModelResourceLocation modelId);
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoaderHooks.java b/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoaderHooks.java
deleted file mode 100644
index f776597c2316899dfd8f2582d39642d0bdbb2acf..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoaderHooks.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.model.loading;
-
-import net.minecraft.client.renderer.block.model.BlockModel;
-import net.minecraft.client.resources.model.UnbakedModel;
-import net.minecraft.resources.ResourceLocation;
-
-public interface ModelLoaderHooks {
-	ModelLoadingEventDispatcher fabric_getDispatcher();
-
-	UnbakedModel fabric_getMissingModel();
-
-	UnbakedModel fabric_getOrLoadModel(ResourceLocation id);
-
-	void fabric_putModel(ResourceLocation id, UnbakedModel model);
-
-	void fabric_putModelDirectly(ResourceLocation id, UnbakedModel model);
-
-	void fabric_queueModelDependencies(UnbakedModel model);
-
-	BlockModel fabric_loadModelFromJson(ResourceLocation id);
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoaderPluginContextImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoaderPluginContextImpl.java
deleted file mode 100644
index 62e2652d8902a9f5d8d64b8bd886653efbf7876b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoaderPluginContextImpl.java
+++ /dev/null
@@ -1,221 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.model.loading;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.function.Function;
-
-import org.jetbrains.annotations.Nullable;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import net.fabricmc.fabric.api.client.model.loading.v1.BlockStateResolver;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelLoadingPlugin;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelModifier;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelResolver;
-import net.fabricmc.fabric.api.event.Event;
-import net.fabricmc.fabric.api.event.EventFactory;
-import net.minecraft.client.resources.model.ModelResourceLocation;
-import net.minecraft.client.resources.model.UnbakedModel;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.resources.ResourceKey;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.block.Block;
-
-public class ModelLoaderPluginContextImpl implements ModelLoadingPlugin.Context {
-	private static final Logger LOGGER = LoggerFactory.getLogger(ModelLoaderPluginContextImpl.class);
-
-	final Set<ResourceLocation> extraModels = new LinkedHashSet<>();
-
-	private final Map<BlockKey, BlockStateResolverHolder> blockStateResolvers = new HashMap<>();
-	private final BlockKey lookupKey = new BlockKey();
-
-	private final Event<ModelResolver> modelResolvers = EventFactory.createArrayBacked(ModelResolver.class, resolvers -> context -> {
-		for (ModelResolver resolver : resolvers) {
-			try {
-				UnbakedModel model = resolver.resolveModel(context);
-
-				if (model != null) {
-					return model;
-				}
-			} catch (Exception exception) {
-				LOGGER.error("Failed to resolve model", exception);
-			}
-		}
-
-		return null;
-	});
-
-	private static final ResourceLocation[] MODEL_MODIFIER_PHASES = new ResourceLocation[] { ModelModifier.OVERRIDE_PHASE, ModelModifier.DEFAULT_PHASE, ModelModifier.WRAP_PHASE, ModelModifier.WRAP_LAST_PHASE };
-
-	private final Event<ModelModifier.OnLoad> onLoadModifiers = EventFactory.createWithPhases(ModelModifier.OnLoad.class, modifiers -> (model, context) -> {
-		for (ModelModifier.OnLoad modifier : modifiers) {
-			try {
-				model = modifier.modifyModelOnLoad(model, context);
-			} catch (Exception exception) {
-				LOGGER.error("Failed to modify unbaked model on load", exception);
-			}
-		}
-
-		return model;
-	}, MODEL_MODIFIER_PHASES);
-	private final Event<ModelModifier.BeforeBake> beforeBakeModifiers = EventFactory.createWithPhases(ModelModifier.BeforeBake.class, modifiers -> (model, context) -> {
-		for (ModelModifier.BeforeBake modifier : modifiers) {
-			try {
-				model = modifier.modifyModelBeforeBake(model, context);
-			} catch (Exception exception) {
-				LOGGER.error("Failed to modify unbaked model before bake", exception);
-			}
-		}
-
-		return model;
-	}, MODEL_MODIFIER_PHASES);
-	private final Event<ModelModifier.AfterBake> afterBakeModifiers = EventFactory.createWithPhases(ModelModifier.AfterBake.class, modifiers -> (model, context) -> {
-		for (ModelModifier.AfterBake modifier : modifiers) {
-			try {
-				model = modifier.modifyModelAfterBake(model, context);
-			} catch (Exception exception) {
-				LOGGER.error("Failed to modify baked model after bake", exception);
-			}
-		}
-
-		return model;
-	}, MODEL_MODIFIER_PHASES);
-
-	/**
-	 * This field is used by the v0 wrapper to avoid constantly wrapping the context in hot code.
-	 */
-	public final Function<ResourceLocation, UnbakedModel> modelGetter;
-
-	public ModelLoaderPluginContextImpl(Function<ResourceLocation, UnbakedModel> modelGetter) {
-		this.modelGetter = modelGetter;
-	}
-
-	@Override
-	public void addModels(ResourceLocation... ids) {
-		for (ResourceLocation id : ids) {
-			extraModels.add(id);
-		}
-	}
-
-	@Override
-	public void addModels(Collection<? extends ResourceLocation> ids) {
-		extraModels.addAll(ids);
-	}
-
-	@Override
-	public void registerBlockStateResolver(Block block, BlockStateResolver resolver) {
-		Objects.requireNonNull(block, "block cannot be null");
-		Objects.requireNonNull(resolver, "resolver cannot be null");
-
-		Optional<ResourceKey<Block>> optionalKey = BuiltInRegistries.BLOCK.getResourceKey(block);
-
-		if (optionalKey.isEmpty()) {
-			throw new IllegalArgumentException("Received unregistered block");
-		}
-
-		ResourceLocation blockId = optionalKey.get().location();
-		BlockKey key = new BlockKey(blockId.getNamespace(), blockId.getPath());
-		BlockStateResolverHolder holder = new BlockStateResolverHolder(resolver, block, blockId);
-
-		if (blockStateResolvers.put(key, holder) != null) {
-			throw new IllegalArgumentException("Duplicate block state resolver for block " + blockId);
-		}
-	}
-
-	@Nullable
-	BlockStateResolverHolder getBlockStateResolver(ModelResourceLocation modelId) {
-		BlockKey key = lookupKey;
-		key.namespace = modelId.getNamespace();
-		key.path = modelId.getPath();
-
-		return blockStateResolvers.get(key);
-	}
-
-	@Override
-	public Event<ModelResolver> resolveModel() {
-		return modelResolvers;
-	}
-
-	@Override
-	public Event<ModelModifier.OnLoad> modifyModelOnLoad() {
-		return onLoadModifiers;
-	}
-
-	@Override
-	public Event<ModelModifier.BeforeBake> modifyModelBeforeBake() {
-		return beforeBakeModifiers;
-	}
-
-	@Override
-	public Event<ModelModifier.AfterBake> modifyModelAfterBake() {
-		return afterBakeModifiers;
-	}
-
-	private static class BlockKey {
-		private String namespace;
-		private String path;
-
-		private BlockKey() {
-		}
-
-		private BlockKey(String namespace, String path) {
-			this.namespace = namespace;
-			this.path = path;
-		}
-
-		@Override
-		public boolean equals(Object o) {
-			if (this == o) return true;
-			if (o == null || getClass() != o.getClass()) return false;
-			BlockKey blockKey = (BlockKey) o;
-			return namespace.equals(blockKey.namespace) && path.equals(blockKey.path);
-		}
-
-		@Override
-		public int hashCode() {
-			return 31 * namespace.hashCode() + path.hashCode();
-		}
-	}
-
-	// Legacy v0 bridge - remove if the legacy v0 module is removed.
-
-	private final Event<LegacyModelVariantProvider> legacyVariantProviders = EventFactory.createArrayBacked(LegacyModelVariantProvider.class, providers -> modelId -> {
-		for (LegacyModelVariantProvider provider : providers) {
-			try {
-				UnbakedModel model = provider.loadModelVariant(modelId);
-
-				if (model != null) {
-					return model;
-				}
-			} catch (Exception exception) {
-				LOGGER.error("Failed to run legacy model variant provider", exception);
-			}
-		}
-
-		return null;
-	});
-
-	public Event<LegacyModelVariantProvider> legacyVariantProviders() {
-		return legacyVariantProviders;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoadingEventDispatcher.java b/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoadingEventDispatcher.java
deleted file mode 100644
index de6e25173581856fb400e4a9b20cd6fda286ae44..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoadingEventDispatcher.java
+++ /dev/null
@@ -1,464 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.model.loading;
-
-import java.util.List;
-import java.util.Objects;
-import java.util.function.Consumer;
-import java.util.function.Function;
-
-import com.google.common.collect.ImmutableList;
-import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
-import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
-import it.unimi.dsi.fastutil.objects.ReferenceSet;
-import org.jetbrains.annotations.Nullable;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import net.fabricmc.fabric.api.client.model.loading.v1.BlockStateResolver;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelLoadingPlugin;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelModifier;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelResolver;
-import net.minecraft.client.renderer.block.BlockModelShaper;
-import net.minecraft.client.renderer.texture.TextureAtlasSprite;
-import net.minecraft.client.resources.model.BakedModel;
-import net.minecraft.client.resources.model.Material;
-import net.minecraft.client.resources.model.ModelBaker;
-import net.minecraft.client.resources.model.ModelBakery;
-import net.minecraft.client.resources.model.ModelResourceLocation;
-import net.minecraft.client.resources.model.ModelState;
-import net.minecraft.client.resources.model.UnbakedModel;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.state.BlockState;
-
-public class ModelLoadingEventDispatcher {
-	private static final Logger LOGGER = LoggerFactory.getLogger(ModelLoadingEventDispatcher.class);
-
-	private final ModelBakery loader;
-	private final ModelLoaderPluginContextImpl pluginContext;
-
-	private final ObjectArrayList<ModelResolverContext> modelResolverContextStack = new ObjectArrayList<>();
-
-	private final ObjectArrayList<BlockStateResolverContext> blockStateResolverContextStack = new ObjectArrayList<>();
-	private final ReferenceSet<Block> resolvingBlocks = new ReferenceOpenHashSet<>();
-
-	private final ObjectArrayList<OnLoadModifierContext> onLoadModifierContextStack = new ObjectArrayList<>();
-	private final ObjectArrayList<BeforeBakeModifierContext> beforeBakeModifierContextStack = new ObjectArrayList<>();
-	private final ObjectArrayList<AfterBakeModifierContext> afterBakeModifierContextStack = new ObjectArrayList<>();
-
-	public ModelLoadingEventDispatcher(ModelBakery loader, List<ModelLoadingPlugin> plugins) {
-		this.loader = loader;
-		this.pluginContext = new ModelLoaderPluginContextImpl(((ModelLoaderHooks) loader)::fabric_getOrLoadModel);
-
-		for (ModelLoadingPlugin plugin : plugins) {
-			try {
-				plugin.onInitializeModelLoader(pluginContext);
-			} catch (Exception exception) {
-				LOGGER.error("Failed to initialize model loading plugin", exception);
-			}
-		}
-	}
-
-	public void addExtraModels(Consumer<ResourceLocation> extraModelConsumer) {
-		for (ResourceLocation id : pluginContext.extraModels) {
-			extraModelConsumer.accept(id);
-		}
-	}
-
-	/**
-	 * @return {@code true} to cancel the vanilla method
-	 */
-	public boolean loadModel(ResourceLocation id) {
-		if (id instanceof ModelResourceLocation modelId) {
-			if ("inventory".equals(modelId.getVariant())) {
-				// We ALWAYS override the vanilla inventory model code path entirely, even for vanilla item models.
-				// See loadItemModel for an explanation.
-				loadItemModel(modelId);
-				return true;
-			} else {
-				// Prioritize block state resolver over legacy variant provider
-				BlockStateResolverHolder resolver = pluginContext.getBlockStateResolver(modelId);
-
-				if (resolver != null) {
-					loadBlockStateModels(resolver.resolver(), resolver.block(), resolver.blockId());
-					return true;
-				}
-
-				UnbakedModel legacyModel = legacyLoadModelVariant(modelId);
-
-				if (legacyModel != null) {
-					((ModelLoaderHooks) loader).fabric_putModel(id, legacyModel);
-					return true;
-				}
-
-				return false;
-			}
-		} else {
-			UnbakedModel model = resolveModel(id);
-
-			if (model != null) {
-				((ModelLoaderHooks) loader).fabric_putModel(id, model);
-				return true;
-			}
-
-			return false;
-		}
-	}
-
-	@Nullable
-	private UnbakedModel legacyLoadModelVariant(ModelResourceLocation modelId) {
-		return pluginContext.legacyVariantProviders().invoker().loadModelVariant(modelId);
-	}
-
-	/**
-	 * This function handles both modded item models and vanilla item models.
-	 * The vanilla code path for item models is never used.
-	 * See the long comment in the function for an explanation.
-	 */
-	private void loadItemModel(ModelResourceLocation modelId) {
-		ModelLoaderHooks loaderHooks = (ModelLoaderHooks) loader;
-
-		ResourceLocation id = modelId.withPrefix("item/");
-
-		// Legacy variant provider
-		UnbakedModel model = legacyLoadModelVariant(modelId);
-
-		// Model resolver
-		if (model == null) {
-			model = resolveModel(id);
-		}
-
-		// Load from the vanilla code path otherwise.
-		if (model == null) {
-			model = loaderHooks.fabric_loadModelFromJson(id);
-		}
-
-		// This is a bit tricky:
-		// We have a single UnbakedModel now, but there are two identifiers:
-		// the ModelIdentifier (...#inventory) and the Identifier (...:item/...).
-		// So we call the on load modifier now and then directly add the model to the ModelLoader,
-		// reimplementing the behavior of ModelLoader#put.
-		// Calling ModelLoader#put is not an option as the model for the Identifier would not be replaced by an on load modifier.
-		// This is why we override the vanilla code path entirely.
-		model = modifyModelOnLoad(modelId, model);
-
-		loaderHooks.fabric_putModelDirectly(modelId, model);
-		loaderHooks.fabric_putModelDirectly(id, model);
-		loaderHooks.fabric_queueModelDependencies(model);
-	}
-
-	private void loadBlockStateModels(BlockStateResolver resolver, Block block, ResourceLocation blockId) {
-		if (!resolvingBlocks.add(block)) {
-			throw new IllegalStateException("Circular reference while resolving models for block " + block);
-		}
-
-		try {
-			resolveBlockStates(resolver, block, blockId);
-		} finally {
-			resolvingBlocks.remove(block);
-		}
-	}
-
-	private void resolveBlockStates(BlockStateResolver resolver, Block block, ResourceLocation blockId) {
-		// Get and prepare context
-		if (blockStateResolverContextStack.isEmpty()) {
-			blockStateResolverContextStack.add(new BlockStateResolverContext());
-		}
-
-		BlockStateResolverContext context = blockStateResolverContextStack.pop();
-		context.prepare(block);
-
-		Reference2ReferenceMap<BlockState, UnbakedModel> resolvedModels = context.models;
-		ImmutableList<BlockState> allStates = block.getStateDefinition().getPossibleStates();
-		boolean thrown = false;
-
-		// Call resolver
-		try {
-			resolver.resolveBlockStates(context);
-		} catch (Exception e) {
-			LOGGER.error("Failed to resolve block state models for block {}. Using missing model for all states.", block, e);
-			thrown = true;
-		}
-
-		// Copy models over to the loader
-		if (thrown) {
-			UnbakedModel missingModel = ((ModelLoaderHooks) loader).fabric_getMissingModel();
-
-			for (BlockState state : allStates) {
-				ModelResourceLocation modelId = BlockModelShaper.stateToModelLocation(blockId, state);
-				((ModelLoaderHooks) loader).fabric_putModelDirectly(modelId, missingModel);
-			}
-		} else if (resolvedModels.size() == allStates.size()) {
-			// If there are as many resolved models as total states, all states have
-			// been resolved and models do not need to be null-checked.
-			resolvedModels.forEach((state, model) -> {
-				ModelResourceLocation modelId = BlockModelShaper.stateToModelLocation(blockId, state);
-				((ModelLoaderHooks) loader).fabric_putModel(modelId, model);
-			});
-		} else {
-			UnbakedModel missingModel = ((ModelLoaderHooks) loader).fabric_getMissingModel();
-
-			for (BlockState state : allStates) {
-				ModelResourceLocation modelId = BlockModelShaper.stateToModelLocation(blockId, state);
-				@Nullable
-				UnbakedModel model = resolvedModels.get(state);
-
-				if (model == null) {
-					LOGGER.error("Block state resolver did not provide a model for state {} in block {}. Using missing model.", state, block);
-					((ModelLoaderHooks) loader).fabric_putModelDirectly(modelId, missingModel);
-				} else {
-					((ModelLoaderHooks) loader).fabric_putModel(modelId, model);
-				}
-			}
-		}
-
-		resolvedModels.clear();
-
-		// Store context for reuse
-		blockStateResolverContextStack.add(context);
-	}
-
-	@Nullable
-	private UnbakedModel resolveModel(ResourceLocation id) {
-		if (modelResolverContextStack.isEmpty()) {
-			modelResolverContextStack.add(new ModelResolverContext());
-		}
-
-		ModelResolverContext context = modelResolverContextStack.pop();
-		context.prepare(id);
-
-		UnbakedModel model = pluginContext.resolveModel().invoker().resolveModel(context);
-
-		modelResolverContextStack.push(context);
-		return model;
-	}
-
-	public UnbakedModel modifyModelOnLoad(ResourceLocation id, UnbakedModel model) {
-		if (onLoadModifierContextStack.isEmpty()) {
-			onLoadModifierContextStack.add(new OnLoadModifierContext());
-		}
-
-		OnLoadModifierContext context = onLoadModifierContextStack.pop();
-		context.prepare(id);
-
-		model = pluginContext.modifyModelOnLoad().invoker().modifyModelOnLoad(model, context);
-
-		onLoadModifierContextStack.push(context);
-		return model;
-	}
-
-	public UnbakedModel modifyModelBeforeBake(UnbakedModel model, ResourceLocation id, Function<Material, TextureAtlasSprite> textureGetter, ModelState settings, ModelBaker baker) {
-		if (beforeBakeModifierContextStack.isEmpty()) {
-			beforeBakeModifierContextStack.add(new BeforeBakeModifierContext());
-		}
-
-		BeforeBakeModifierContext context = beforeBakeModifierContextStack.pop();
-		context.prepare(id, textureGetter, settings, baker);
-
-		model = pluginContext.modifyModelBeforeBake().invoker().modifyModelBeforeBake(model, context);
-
-		beforeBakeModifierContextStack.push(context);
-		return model;
-	}
-
-	@Nullable
-	public BakedModel modifyModelAfterBake(@Nullable BakedModel model, ResourceLocation id, UnbakedModel sourceModel, Function<Material, TextureAtlasSprite> textureGetter, ModelState settings, ModelBaker baker) {
-		if (afterBakeModifierContextStack.isEmpty()) {
-			afterBakeModifierContextStack.add(new AfterBakeModifierContext());
-		}
-
-		AfterBakeModifierContext context = afterBakeModifierContextStack.pop();
-		context.prepare(id, sourceModel, textureGetter, settings, baker);
-
-		model = pluginContext.modifyModelAfterBake().invoker().modifyModelAfterBake(model, context);
-
-		afterBakeModifierContextStack.push(context);
-		return model;
-	}
-
-	private class ModelResolverContext implements ModelResolver.Context {
-		private ResourceLocation id;
-
-		private void prepare(ResourceLocation id) {
-			this.id = id;
-		}
-
-		@Override
-		public ResourceLocation id() {
-			return id;
-		}
-
-		@Override
-		public UnbakedModel getOrLoadModel(ResourceLocation id) {
-			return ((ModelLoaderHooks) loader).fabric_getOrLoadModel(id);
-		}
-
-		@Override
-		public ModelBakery loader() {
-			return loader;
-		}
-	}
-
-	private class BlockStateResolverContext implements BlockStateResolver.Context {
-		private Block block;
-		private final Reference2ReferenceMap<BlockState, UnbakedModel> models = new Reference2ReferenceOpenHashMap<>();
-
-		private void prepare(Block block) {
-			this.block = block;
-			models.clear();
-		}
-
-		@Override
-		public Block block() {
-			return block;
-		}
-
-		@Override
-		public void setModel(BlockState state, UnbakedModel model) {
-			Objects.requireNonNull(model, "state cannot be null");
-			Objects.requireNonNull(model, "model cannot be null");
-
-			if (!state.is(block)) {
-				throw new IllegalArgumentException("Attempted to set model for state " + state + " on block " + block);
-			}
-
-			if (models.putIfAbsent(state, model) != null) {
-				throw new IllegalStateException("Duplicate model for state " + state + " on block " + block);
-			}
-		}
-
-		@Override
-		public UnbakedModel getOrLoadModel(ResourceLocation id) {
-			return ((ModelLoaderHooks) loader).fabric_getOrLoadModel(id);
-		}
-
-		@Override
-		public ModelBakery loader() {
-			return loader;
-		}
-	}
-
-	private class OnLoadModifierContext implements ModelModifier.OnLoad.Context {
-		private ResourceLocation id;
-
-		private void prepare(ResourceLocation id) {
-			this.id = id;
-		}
-
-		@Override
-		public ResourceLocation id() {
-			return id;
-		}
-
-		@Override
-		public UnbakedModel getOrLoadModel(ResourceLocation id) {
-			return ((ModelLoaderHooks) loader).fabric_getOrLoadModel(id);
-		}
-
-		@Override
-		public ModelBakery loader() {
-			return loader;
-		}
-	}
-
-	private class BeforeBakeModifierContext implements ModelModifier.BeforeBake.Context {
-		private ResourceLocation id;
-		private Function<Material, TextureAtlasSprite> textureGetter;
-		private ModelState settings;
-		private ModelBaker baker;
-
-		private void prepare(ResourceLocation id, Function<Material, TextureAtlasSprite> textureGetter, ModelState settings, ModelBaker baker) {
-			this.id = id;
-			this.textureGetter = textureGetter;
-			this.settings = settings;
-			this.baker = baker;
-		}
-
-		@Override
-		public ResourceLocation id() {
-			return id;
-		}
-
-		@Override
-		public Function<Material, TextureAtlasSprite> textureGetter() {
-			return textureGetter;
-		}
-
-		@Override
-		public ModelState settings() {
-			return settings;
-		}
-
-		@Override
-		public ModelBaker baker() {
-			return baker;
-		}
-
-		@Override
-		public ModelBakery loader() {
-			return loader;
-		}
-	}
-
-	private class AfterBakeModifierContext implements ModelModifier.AfterBake.Context {
-		private ResourceLocation id;
-		private UnbakedModel sourceModel;
-		private Function<Material, TextureAtlasSprite> textureGetter;
-		private ModelState settings;
-		private ModelBaker baker;
-
-		private void prepare(ResourceLocation id, UnbakedModel sourceModel, Function<Material, TextureAtlasSprite> textureGetter, ModelState settings, ModelBaker baker) {
-			this.id = id;
-			this.sourceModel = sourceModel;
-			this.textureGetter = textureGetter;
-			this.settings = settings;
-			this.baker = baker;
-		}
-
-		@Override
-		public ResourceLocation id() {
-			return id;
-		}
-
-		@Override
-		public UnbakedModel sourceModel() {
-			return sourceModel;
-		}
-
-		@Override
-		public Function<Material, TextureAtlasSprite> textureGetter() {
-			return textureGetter;
-		}
-
-		@Override
-		public ModelState settings() {
-			return settings;
-		}
-
-		@Override
-		public ModelBaker baker() {
-			return baker;
-		}
-
-		@Override
-		public ModelBakery loader() {
-			return loader;
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoadingPluginManager.java b/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoadingPluginManager.java
deleted file mode 100644
index bcfa1cbbfb22b832dbdc9cf0172f55f1e7901900..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/ModelLoadingPluginManager.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.model.loading;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executor;
-import net.fabricmc.fabric.api.client.model.loading.v1.ModelLoadingPlugin;
-import net.fabricmc.fabric.api.client.model.loading.v1.PreparableModelLoadingPlugin;
-import net.minecraft.Util;
-import net.minecraft.server.packs.resources.ResourceManager;
-
-public final class ModelLoadingPluginManager {
-	private static final List<ModelLoadingPlugin> PLUGINS = new ArrayList<>();
-	private static final List<PreparablePluginHolder<?>> PREPARABLE_PLUGINS = new ArrayList<>();
-
-	public static final ThreadLocal<List<ModelLoadingPlugin>> CURRENT_PLUGINS = new ThreadLocal<>();
-
-	public static void registerPlugin(ModelLoadingPlugin plugin) {
-		Objects.requireNonNull(plugin, "plugin must not be null");
-
-		PLUGINS.add(plugin);
-	}
-
-	public static <T> void registerPlugin(PreparableModelLoadingPlugin.DataLoader<T> loader, PreparableModelLoadingPlugin<T> plugin) {
-		Objects.requireNonNull(loader, "data loader must not be null");
-		Objects.requireNonNull(plugin, "plugin must not be null");
-
-		PREPARABLE_PLUGINS.add(new PreparablePluginHolder<>(loader, plugin));
-	}
-
-	/**
-	 * The current exception behavior as of 1.20 is as follows.
-	 * If getting a {@link CompletableFuture}s throws then the whole client will crash.
-	 * If a {@link CompletableFuture} completes exceptionally then the resource reload will fail.
-	 */
-	public static CompletableFuture<List<ModelLoadingPlugin>> preparePlugins(ResourceManager resourceManager, Executor executor) {
-		List<CompletableFuture<ModelLoadingPlugin>> futures = new ArrayList<>();
-
-		for (ModelLoadingPlugin plugin : PLUGINS) {
-			futures.add(CompletableFuture.completedFuture(plugin));
-		}
-
-		for (PreparablePluginHolder<?> holder : PREPARABLE_PLUGINS) {
-			futures.add(preparePlugin(holder, resourceManager, executor));
-		}
-
-		return Util.sequenceFailFast(futures);
-	}
-
-	private static <T> CompletableFuture<ModelLoadingPlugin> preparePlugin(PreparablePluginHolder<T> holder, ResourceManager resourceManager, Executor executor) {
-		CompletableFuture<T> dataFuture = holder.loader.load(resourceManager, executor);
-		return dataFuture.thenApply(data -> pluginContext -> holder.plugin.onInitializeModelLoader(data, pluginContext));
-	}
-
-	private ModelLoadingPluginManager() { }
-
-	private record PreparablePluginHolder<T>(PreparableModelLoadingPlugin.DataLoader<T> loader, PreparableModelLoadingPlugin<T> plugin) { }
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/model/loading/package-info.java
deleted file mode 100644
index 3f52a245ba2fec785ed6e56c717699563cdbf8dc..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/loading/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-model-loading-api-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.model.loading;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/model/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/model/package-info.java
deleted file mode 100644
index c29466163cb85f30d8ec7e460afa63e57347a809..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/model/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-models-v0.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.model;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/particle/FabricSpriteProviderImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/particle/FabricSpriteProviderImpl.java
deleted file mode 100644
index 15dda14b1bc3c452839ee74c6ac12d6763ab670a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/particle/FabricSpriteProviderImpl.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.particle;
-
-import java.util.List;
-import net.fabricmc.fabric.api.client.particle.v1.FabricSpriteProvider;
-import net.fabricmc.fabric.mixin.client.particle.ParticleManagerAccessor;
-import net.minecraft.client.particle.ParticleEngine;
-import net.minecraft.client.particle.SpriteSet;
-import net.minecraft.client.renderer.texture.TextureAtlas;
-import net.minecraft.client.renderer.texture.TextureAtlasSprite;
-import net.minecraft.util.RandomSource;
-
-public class FabricSpriteProviderImpl implements FabricSpriteProvider {
-	private final ParticleEngine particleManager;
-	private final SpriteSet delegate;
-
-	FabricSpriteProviderImpl(ParticleEngine particleManager, SpriteSet delegate) {
-		this.particleManager = particleManager;
-		this.delegate = delegate;
-	}
-
-	@Override
-	public TextureAtlas getAtlas() {
-		return ((ParticleManagerAccessor) particleManager).getParticleAtlasTexture();
-	}
-
-	@Override
-	public List<TextureAtlasSprite> getSprites() {
-		return ((ParticleManagerAccessor.SimpleSpriteProviderAccessor) delegate).getSprites();
-	}
-
-	@Override
-	public TextureAtlasSprite get(int i, int j) {
-		return delegate.get(i, j);
-	}
-
-	@Override
-	public TextureAtlasSprite get(RandomSource random) {
-		return delegate.get(random);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/particle/ParticleFactoryRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/particle/ParticleFactoryRegistryImpl.java
deleted file mode 100644
index 0d2921e4d81bb04d0ffeee6362737d47e1be56e7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/particle/ParticleFactoryRegistryImpl.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.particle;
-
-import java.util.IdentityHashMap;
-import java.util.Map;
-import net.fabricmc.fabric.api.client.particle.v1.FabricSpriteProvider;
-import net.fabricmc.fabric.api.client.particle.v1.ParticleFactoryRegistry;
-import net.fabricmc.fabric.mixin.client.particle.ParticleManagerAccessor;
-import net.minecraft.client.particle.ParticleEngine;
-import net.minecraft.client.particle.ParticleProvider;
-import net.minecraft.client.particle.SpriteSet;
-import net.minecraft.core.particles.ParticleOptions;
-import net.minecraft.core.particles.ParticleType;
-import net.minecraft.core.registries.BuiltInRegistries;
-
-public final class ParticleFactoryRegistryImpl implements ParticleFactoryRegistry {
-	public static final ParticleFactoryRegistryImpl INSTANCE = new ParticleFactoryRegistryImpl();
-
-	static class DeferredParticleFactoryRegistry implements ParticleFactoryRegistry {
-		private final Map<ParticleType<?>, ParticleProvider<?>> factories = new IdentityHashMap<>();
-		private final Map<ParticleType<?>, PendingParticleFactory<?>> constructors = new IdentityHashMap<>();
-
-		@Override
-		public <T extends ParticleOptions> void register(ParticleType<T> type, ParticleProvider<T> factory) {
-			factories.put(type, factory);
-		}
-
-		@Override
-		public <T extends ParticleOptions> void register(ParticleType<T> type, PendingParticleFactory<T> factory) {
-			constructors.put(type, factory);
-		}
-
-		@SuppressWarnings("unchecked")
-		void applyTo(ParticleFactoryRegistry registry) {
-			for (Map.Entry<ParticleType<?>, ParticleProvider<?>> entry : factories.entrySet()) {
-				ParticleType type = entry.getKey();
-				ParticleProvider factory = entry.getValue();
-				registry.register(type, factory);
-			}
-
-			for (Map.Entry<ParticleType<?>, PendingParticleFactory<?>> entry : constructors.entrySet()) {
-				ParticleType type = entry.getKey();
-				PendingParticleFactory constructor = entry.getValue();
-				registry.register(type, constructor);
-			}
-		}
-	}
-
-	static class DirectParticleFactoryRegistry implements ParticleFactoryRegistry {
-		private final ParticleEngine particleManager;
-
-		DirectParticleFactoryRegistry(ParticleEngine particleManager) {
-			this.particleManager = particleManager;
-		}
-
-		@Override
-		public <T extends ParticleOptions> void register(ParticleType<T> type, ParticleProvider<T> factory) {
-			((ParticleManagerAccessor) particleManager).getFactories().put(BuiltInRegistries.PARTICLE_TYPE.getId(type), factory);
-		}
-
-		@Override
-		public <T extends ParticleOptions> void register(ParticleType<T> type, PendingParticleFactory<T> constructor) {
-			SpriteSet delegate = new ParticleEngine.MutableSpriteSet();
-			FabricSpriteProvider fabricSpriteProvider = new FabricSpriteProviderImpl(particleManager, delegate);
-			((ParticleManagerAccessor) particleManager).getSpriteAwareFactories().put(BuiltInRegistries.PARTICLE_TYPE.getKey(type), delegate);
-			register(type, constructor.create(fabricSpriteProvider));
-		}
-	}
-
-	ParticleFactoryRegistry internalRegistry = new DeferredParticleFactoryRegistry();
-
-	private ParticleFactoryRegistryImpl() { }
-
-	@Override
-	public <T extends ParticleOptions> void register(ParticleType<T> type, ParticleProvider<T> factory) {
-		internalRegistry.register(type, factory);
-	}
-
-	@Override
-	public <T extends ParticleOptions> void register(ParticleType<T> type, PendingParticleFactory<T> constructor) {
-		internalRegistry.register(type, constructor);
-	}
-
-	public void initialize(ParticleEngine particleManager) {
-		ParticleFactoryRegistry newRegistry = new DirectParticleFactoryRegistry(particleManager);
-		DeferredParticleFactoryRegistry oldRegistry = (DeferredParticleFactoryRegistry) internalRegistry;
-		oldRegistry.applyTo(newRegistry);
-		internalRegistry = newRegistry;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/particle/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/particle/package-info.java
deleted file mode 100644
index 4235904756606a02bb20ecc7995a79edb4553ffd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/particle/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-particles-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.particle;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/registry/sync/FabricRegistryClientInit.java b/src/main/java/net/fabricmc/fabric/impl/client/registry/sync/FabricRegistryClientInit.java
deleted file mode 100644
index 6f7f725adc149e26cd08d55320fc1693bbe39ff9..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/registry/sync/FabricRegistryClientInit.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.registry.sync;
-
-import java.util.concurrent.CompletionException;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import net.fabricmc.api.ClientModInitializer;
-import net.fabricmc.fabric.api.client.networking.v1.ClientConfigurationNetworking;
-import net.fabricmc.fabric.impl.registry.sync.RegistrySyncManager;
-import net.fabricmc.fabric.impl.registry.sync.RemapException;
-import net.fabricmc.fabric.impl.registry.sync.SyncCompletePayload;
-import net.fabricmc.fabric.impl.registry.sync.packet.RegistryPacketHandler;
-import net.minecraft.network.chat.Component;
-
-public class FabricRegistryClientInit implements ClientModInitializer {
-	private static final Logger LOGGER = LoggerFactory.getLogger(FabricRegistryClientInit.class);
-
-	@Override
-	public void onInitializeClient() {
-		registerSyncPacketReceiver(RegistrySyncManager.DIRECT_PACKET_HANDLER);
-	}
-
-	private <T extends RegistryPacketHandler.RegistrySyncPayload> void registerSyncPacketReceiver(RegistryPacketHandler<T> packetHandler) {
-		ClientConfigurationNetworking.registerGlobalReceiver(packetHandler.getPacketId(), (payload, context) -> {
-			RegistrySyncManager.receivePacket(context.client(), packetHandler, payload, RegistrySyncManager.DEBUG || !context.client().isInSingleplayer())
-					.whenComplete((complete, throwable) -> {
-						if (throwable != null) {
-							LOGGER.error("Registry remapping failed!", throwable);
-							context.client().execute(() -> context.responseSender().disconnect(getText(throwable)));
-							return;
-						}
-
-						if (complete) {
-							context.responseSender().sendPacket(SyncCompletePayload.INSTANCE);
-						}
-					});
-		});
-	}
-
-	private Component getText(Throwable e) {
-		if (e instanceof RemapException remapException) {
-			final Component text = remapException.getText();
-
-			if (text != null) {
-				return text;
-			}
-		} else if (e instanceof CompletionException completionException) {
-			return getText(completionException.getCause());
-		}
-
-		return Component.literal("Registry remapping failed: " + e.getMessage());
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/registry/sync/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/registry/sync/package-info.java
deleted file mode 100644
index 19da688cd4cc534dda2ba10486034b44c19fef64..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/registry/sync/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-registry-sync-v0.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.registry.sync;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/ArmorRendererRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/ArmorRendererRegistryImpl.java
deleted file mode 100644
index 6d67ff7407f9ef838f292a72822c032607dc02ae..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/ArmorRendererRegistryImpl.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.HashMap;
-import java.util.Objects;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.client.rendering.v1.ArmorRenderer;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.level.ItemLike;
-
-public class ArmorRendererRegistryImpl {
-	private static final HashMap<Item, ArmorRenderer> RENDERERS = new HashMap<>();
-
-	public static void register(ArmorRenderer renderer, ItemLike... items) {
-		Objects.requireNonNull(renderer, "renderer is null");
-
-		if (items.length == 0) {
-			throw new IllegalArgumentException("Armor renderer registered for no item");
-		}
-
-		for (ItemLike item : items) {
-			Objects.requireNonNull(item.asItem(), "armor item is null");
-
-			if (RENDERERS.putIfAbsent(item.asItem(), renderer) != null) {
-				throw new IllegalArgumentException("Custom armor renderer already exists for " + BuiltInRegistries.ITEM.getKey(item.asItem()));
-			}
-		}
-	}
-
-	@Nullable
-	public static ArmorRenderer get(Item item) {
-		return RENDERERS.get(item);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/AtlasSourceTypeRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/AtlasSourceTypeRegistryImpl.java
deleted file mode 100644
index c0385f6f0f5e3fd3250e83fc471fe8cf9642151d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/AtlasSourceTypeRegistryImpl.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.Objects;
-import net.fabricmc.fabric.mixin.client.rendering.AtlasSourceManagerAccessor;
-import net.minecraft.client.renderer.texture.atlas.SpriteSourceType;
-import net.minecraft.resources.ResourceLocation;
-
-public final class AtlasSourceTypeRegistryImpl {
-	private AtlasSourceTypeRegistryImpl() {
-	}
-
-	public static void register(ResourceLocation id, SpriteSourceType type) {
-		Objects.requireNonNull(id, "id must not be null!");
-		Objects.requireNonNull(type, "type must not be null!");
-
-		SpriteSourceType oldType = AtlasSourceManagerAccessor.getSourceTypeById().putIfAbsent(id, type);
-
-		if (oldType != null) {
-			throw new IllegalStateException("Duplicate registration " + id);
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/BlockEntityRendererRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/BlockEntityRendererRegistryImpl.java
deleted file mode 100644
index a006ccefc929a5ac27ae5575dcf8655aa6d47427..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/BlockEntityRendererRegistryImpl.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.HashMap;
-import java.util.function.BiConsumer;
-import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;
-import net.minecraft.world.level.block.entity.BlockEntity;
-import net.minecraft.world.level.block.entity.BlockEntityType;
-
-public final class BlockEntityRendererRegistryImpl {
-	private static final HashMap<BlockEntityType<?>, BlockEntityRendererProvider<?>> MAP = new HashMap<>();
-	private static BiConsumer<BlockEntityType<?>, BlockEntityRendererProvider<?>> handler = (type, function) -> MAP.put(type, function);
-
-	public static <E extends BlockEntity> void register(BlockEntityType<E> blockEntityType, BlockEntityRendererProvider<? super E> blockEntityRendererFactory) {
-		handler.accept(blockEntityType, blockEntityRendererFactory);
-	}
-
-	public static void setup(BiConsumer<BlockEntityType<?>, BlockEntityRendererProvider<?>> vanillaHandler) {
-		MAP.forEach(vanillaHandler);
-		handler = vanillaHandler;
-	}
-
-	private BlockEntityRendererRegistryImpl() {
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java
deleted file mode 100644
index 241100c25215cbccbb017dcea65035012cb767b5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/BuiltinItemRendererRegistryImpl.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRenderer;
-import net.fabricmc.fabric.api.client.rendering.v1.BuiltinItemRendererRegistry;
-import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.level.ItemLike;
-
-public final class BuiltinItemRendererRegistryImpl implements BuiltinItemRendererRegistry {
-	private static final Map<Item, DynamicItemRenderer> RENDERERS = new HashMap<>();
-
-	public BuiltinItemRendererRegistryImpl() {
-	}
-
-	@Override
-	public void register(Item item, BuiltinItemRenderer renderer) {
-		Objects.requireNonNull(renderer, "renderer is null");
-		this.register(item, (stack, mode, matrices, vertexConsumers, light, overlay) -> renderer.render(stack, matrices, vertexConsumers, light, overlay));
-	}
-
-	@Override
-	public void register(ItemLike item, BuiltinItemRenderer renderer) {
-		Objects.requireNonNull(item, "item is null");
-		register(item.asItem(), renderer);
-	}
-
-	@Override
-	public void register(ItemLike item, DynamicItemRenderer renderer) {
-		Objects.requireNonNull(item, "item is null");
-		Objects.requireNonNull(item.asItem(), "item is null");
-		Objects.requireNonNull(renderer, "renderer is null");
-
-		if (RENDERERS.putIfAbsent(item.asItem(), renderer) != null) {
-			throw new IllegalArgumentException("Item " + BuiltInRegistries.ITEM.getKey(item.asItem()) + " already has a builtin renderer!");
-		}
-	}
-
-	@Override
-	@Nullable
-	public DynamicItemRenderer get(ItemLike item) {
-		Objects.requireNonNull(item.asItem(), "item is null");
-
-		return RENDERERS.get(item.asItem());
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/ColorProviderRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/ColorProviderRegistryImpl.java
deleted file mode 100644
index bf39cfb8c2e5de11095f42fed5220297404f9308..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/ColorProviderRegistryImpl.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.IdentityHashMap;
-import java.util.Map;
-import net.fabricmc.fabric.api.client.rendering.v1.ColorProviderRegistry;
-import net.minecraft.client.color.block.BlockColor;
-import net.minecraft.client.color.block.BlockColors;
-import net.minecraft.client.color.item.ItemColor;
-import net.minecraft.client.color.item.ItemColors;
-import net.minecraft.world.level.ItemLike;
-import net.minecraft.world.level.block.Block;
-
-public abstract class ColorProviderRegistryImpl<T, Provider, Underlying> implements ColorProviderRegistry<T, Provider> {
-	public static final ColorProviderRegistryImpl<Block, BlockColor, BlockColors> BLOCK = new ColorProviderRegistryImpl<Block, BlockColor, BlockColors>() {
-		@Override
-		void registerUnderlying(BlockColors map, BlockColor mapper, Block block) {
-			map.register(mapper, block);
-		}
-	};
-
-	public static final ColorProviderRegistryImpl<ItemLike, ItemColor, ItemColors> ITEM = new ColorProviderRegistryImpl<ItemLike, ItemColor, ItemColors>() {
-		@Override
-		void registerUnderlying(ItemColors map, ItemColor mapper, ItemLike block) {
-			map.register(mapper, block);
-		}
-	};
-
-	private Underlying colorMap;
-	private Map<T, Provider> tempMappers = new IdentityHashMap<>();
-
-	abstract void registerUnderlying(Underlying colorMap, Provider provider, T objects);
-
-	public void initialize(Underlying colorMap) {
-		if (this.colorMap != null) {
-			if (this.colorMap != colorMap) throw new IllegalStateException("Cannot set colorMap twice");
-			return;
-		}
-
-		this.colorMap = colorMap;
-
-		for (Map.Entry<T, Provider> mappers : tempMappers.entrySet()) {
-			registerUnderlying(colorMap, mappers.getValue(), mappers.getKey());
-		}
-
-		tempMappers = null;
-	}
-
-	@Override
-	@SafeVarargs
-	public final void register(Provider provider, T... objects) {
-		if (colorMap != null) {
-			for (T object : objects) registerUnderlying(colorMap, provider, object);
-		} else {
-			for (T object : objects) tempMappers.put(object, provider);
-		}
-	}
-
-	@Override
-	@SuppressWarnings("unchecked")
-	public Provider get(T object) {
-		return colorMap == null ? null : ((ColorMapperHolder<T, Provider>) colorMap).get(object);
-	}
-
-	public interface ColorMapperHolder<T, Provider> {
-		Provider get(T item);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/ColorResolverRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/ColorResolverRegistryImpl.java
deleted file mode 100644
index 75ed441e8b801d8b37ba8f066f978ac7dc6d613c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/ColorResolverRegistryImpl.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.function.Function;
-import net.minecraft.client.color.block.BlockTintCache;
-import net.minecraft.client.renderer.BiomeColors;
-import net.minecraft.world.level.ColorResolver;
-import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
-import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
-import org.jetbrains.annotations.UnmodifiableView;
-
-public final class ColorResolverRegistryImpl {
-	// Includes vanilla resolvers
-	private static final Set<ColorResolver> ALL_RESOLVERS = new HashSet<>();
-	// Does not include vanilla resolvers
-	private static final Set<ColorResolver> CUSTOM_RESOLVERS = new HashSet<>();
-	private static final Set<ColorResolver> ALL_RESOLVERS_VIEW = Collections.unmodifiableSet(ALL_RESOLVERS);
-	private static final Set<ColorResolver> CUSTOM_RESOLVERS_VIEW = Collections.unmodifiableSet(CUSTOM_RESOLVERS);
-
-	static {
-		ALL_RESOLVERS.add(BiomeColors.GRASS_COLOR_RESOLVER);
-		ALL_RESOLVERS.add(BiomeColors.FOLIAGE_COLOR_RESOLVER);
-		ALL_RESOLVERS.add(BiomeColors.WATER_COLOR_RESOLVER);
-	}
-
-	private ColorResolverRegistryImpl() {
-	}
-
-	public static void register(ColorResolver resolver) {
-		ALL_RESOLVERS.add(resolver);
-		CUSTOM_RESOLVERS.add(resolver);
-	}
-
-	@UnmodifiableView
-	public static Set<ColorResolver> getAllResolvers() {
-		return ALL_RESOLVERS_VIEW;
-	}
-
-	@UnmodifiableView
-	public static Set<ColorResolver> getCustomResolvers() {
-		return CUSTOM_RESOLVERS_VIEW;
-	}
-
-	public static Reference2ReferenceMap<ColorResolver, BlockTintCache> createCustomCacheMap(Function<ColorResolver, BlockTintCache> cacheFactory) {
-		Reference2ReferenceOpenHashMap<ColorResolver, BlockTintCache> map = new Reference2ReferenceOpenHashMap<>();
-
-		for (ColorResolver resolver : CUSTOM_RESOLVERS) {
-			map.put(resolver, cacheFactory.apply(resolver));
-		}
-
-		map.trim();
-		return map;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/DimensionRenderingRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/DimensionRenderingRegistryImpl.java
deleted file mode 100644
index 1f2c3c2a73061ca3ec00b4f03c7889e28de21dfe..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/DimensionRenderingRegistryImpl.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.IdentityHashMap;
-import java.util.Map;
-import java.util.Objects;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.client.rendering.v1.DimensionRenderingRegistry;
-import net.fabricmc.fabric.api.client.rendering.v1.DimensionRenderingRegistry.CloudRenderer;
-import net.fabricmc.fabric.api.client.rendering.v1.DimensionRenderingRegistry.SkyRenderer;
-import net.fabricmc.fabric.api.client.rendering.v1.DimensionRenderingRegistry.WeatherRenderer;
-import net.fabricmc.fabric.mixin.client.rendering.DimensionEffectsAccessor;
-import net.minecraft.client.renderer.DimensionSpecialEffects;
-import net.minecraft.resources.ResourceKey;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.Level;
-
-public final class DimensionRenderingRegistryImpl {
-	private static final Map<ResourceKey<Level>, SkyRenderer> SKY_RENDERERS = new IdentityHashMap<>();
-	private static final Map<ResourceKey<Level>, CloudRenderer> CLOUD_RENDERERS = new IdentityHashMap<>();
-	private static final Map<ResourceKey<Level>, WeatherRenderer> WEATHER_RENDERERS = new IdentityHashMap<>();
-
-	public static void registerSkyRenderer(ResourceKey<Level> key, SkyRenderer renderer) {
-		Objects.requireNonNull(key);
-		Objects.requireNonNull(renderer);
-
-		SKY_RENDERERS.putIfAbsent(key, renderer);
-	}
-
-	public static void registerWeatherRenderer(ResourceKey<Level> key, WeatherRenderer renderer) {
-		Objects.requireNonNull(key);
-		Objects.requireNonNull(renderer);
-
-		WEATHER_RENDERERS.putIfAbsent(key, renderer);
-	}
-
-	public static void registerDimensionEffects(ResourceLocation key, DimensionSpecialEffects effects) {
-		Objects.requireNonNull(key);
-		Objects.requireNonNull(effects);
-		//The map containing all dimension effects returns a default if null so a null check doesn't work.
-
-		DimensionEffectsAccessor.getIdentifierMap().putIfAbsent(key, effects);
-	}
-
-	public static void registerCloudRenderer(ResourceKey<Level> key, CloudRenderer renderer) {
-		Objects.requireNonNull(key);
-		Objects.requireNonNull(renderer);
-
-		CLOUD_RENDERERS.putIfAbsent(key, renderer);
-	}
-
-	@Nullable
-	public static SkyRenderer getSkyRenderer(ResourceKey<Level> key) {
-		return SKY_RENDERERS.get(key);
-	}
-
-	@Nullable
-	public static CloudRenderer getCloudRenderer(ResourceKey<Level> key) {
-		return CLOUD_RENDERERS.get(key);
-	}
-
-	@Nullable
-	public static WeatherRenderer getWeatherRenderer(ResourceKey<Level> key) {
-		return WEATHER_RENDERERS.get(key);
-	}
-
-	@Nullable
-	public static DimensionSpecialEffects getDimensionEffects(ResourceLocation key) {
-		return DimensionEffectsAccessor.getIdentifierMap().get(key);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/EntityModelLayerImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/EntityModelLayerImpl.java
deleted file mode 100644
index aea9276183621522a3d636a59226daa99fe7c914..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/EntityModelLayerImpl.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.HashMap;
-import java.util.Map;
-import net.fabricmc.fabric.api.client.rendering.v1.EntityModelLayerRegistry;
-import net.minecraft.client.model.geom.ModelLayerLocation;
-
-public final class EntityModelLayerImpl {
-	public static final Map<ModelLayerLocation, EntityModelLayerRegistry.TexturedModelDataProvider> PROVIDERS = new HashMap<>();
-
-	private EntityModelLayerImpl() {
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/EntityRendererRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/EntityRendererRegistryImpl.java
deleted file mode 100644
index bf7410c998fea93af009ac33d7066367f66ac243..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/EntityRendererRegistryImpl.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.HashMap;
-import java.util.function.BiConsumer;
-import net.minecraft.client.renderer.entity.EntityRendererProvider;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.EntityType;
-
-/**
- * Helper class for registering EntityRenderers.
- */
-public final class EntityRendererRegistryImpl {
-	private static HashMap<EntityType<?>, EntityRendererProvider<?>> map = new HashMap<>();
-	private static BiConsumer<EntityType<?>, EntityRendererProvider<?>> handler = (type, function) -> map.put(type, function);
-
-	public static <T extends Entity> void register(EntityType<? extends T> entityType, EntityRendererProvider<T> factory) {
-		handler.accept(entityType, factory);
-	}
-
-	public static void setup(BiConsumer<EntityType<?>, EntityRendererProvider<?>> vanillaHandler) {
-		map.forEach(vanillaHandler);
-		handler = vanillaHandler;
-	}
-
-	private EntityRendererRegistryImpl() {
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/FabricShaderProgram.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/FabricShaderProgram.java
deleted file mode 100644
index cc114b093ab02e9a883cef552d5179a6bca3f57d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/FabricShaderProgram.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import com.mojang.blaze3d.vertex.VertexFormat;
-import java.io.IOException;
-import net.minecraft.client.renderer.ShaderInstance;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.packs.resources.ResourceProvider;
-
-public final class FabricShaderProgram extends ShaderInstance {
-	public FabricShaderProgram(ResourceProvider factory, ResourceLocation name, VertexFormat format) throws IOException {
-		super(factory, name.toString(), format);
-	}
-
-	/**
-	 * Rewrites the input string containing an identifier
-	 * with the namespace of the id in the front instead of in the middle.
-	 *
-	 * <p>Example: {@code shaders/core/my_mod:xyz} -> {@code my_mod:shaders/core/xyz}
-	 *
-	 * @param input       the raw input string
-	 * @param containedId the ID contained within the input string
-	 * @return the corrected full ID string
-	 */
-	public static String rewriteAsId(String input, String containedId) {
-		ResourceLocation contained = new ResourceLocation(containedId);
-		return contained.getNamespace() + ResourceLocation.NAMESPACE_SEPARATOR + input.replace(containedId, contained.getPath());
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/RegistrationHelperImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/RegistrationHelperImpl.java
deleted file mode 100644
index 724dfab8c4bfc99ffd1411370032626f93b63028..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/RegistrationHelperImpl.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import java.util.Objects;
-import java.util.function.Function;
-import net.fabricmc.fabric.api.client.rendering.v1.LivingEntityFeatureRendererRegistrationCallback;
-import net.minecraft.client.model.EntityModel;
-import net.minecraft.client.renderer.entity.layers.RenderLayer;
-import net.minecraft.world.entity.LivingEntity;
-
-public final class RegistrationHelperImpl implements LivingEntityFeatureRendererRegistrationCallback.RegistrationHelper {
-	private final Function<RenderLayer<?, ?>, Boolean> delegate;
-
-	public RegistrationHelperImpl(Function<RenderLayer<?, ?>, Boolean> delegate) {
-		this.delegate = delegate;
-	}
-
-	@Override
-	public <T extends LivingEntity> void register(RenderLayer<T, ? extends EntityModel<T>> featureRenderer) {
-		Objects.requireNonNull(featureRenderer, "Feature renderer cannot be null");
-		this.delegate.apply(featureRenderer);
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/WorldRenderContextImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/WorldRenderContextImpl.java
deleted file mode 100644
index a4af34c5f13bbfb93e1ed0f25f8ec4a9cc044d6b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/WorldRenderContextImpl.java
+++ /dev/null
@@ -1,226 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering;
-
-import org.joml.Matrix4f;
-import com.mojang.blaze3d.vertex.PoseStack;
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import net.fabricmc.fabric.api.client.rendering.v1.WorldRenderContext;
-import net.minecraft.client.Camera;
-import net.minecraft.client.multiplayer.ClientLevel;
-import net.minecraft.client.renderer.GameRenderer;
-import net.minecraft.client.renderer.LevelRenderer;
-import net.minecraft.client.renderer.LightTexture;
-import net.minecraft.client.renderer.MultiBufferSource;
-import net.minecraft.client.renderer.RenderType;
-import net.minecraft.client.renderer.culling.Frustum;
-import net.minecraft.core.BlockPos;
-import net.minecraft.util.profiling.ProfilerFiller;
-import net.minecraft.world.entity.Entity;
-import net.minecraft.world.level.block.state.BlockState;
-
-public final class WorldRenderContextImpl implements WorldRenderContext.BlockOutlineContext, WorldRenderContext {
-	private LevelRenderer worldRenderer;
-	private PoseStack matrixStack;
-	private float tickDelta;
-	private long limitTime;
-	private boolean blockOutlines;
-	private Camera camera;
-	private Frustum frustum;
-	private GameRenderer gameRenderer;
-	private LightTexture lightmapTextureManager;
-	private Matrix4f projectionMatrix;
-	private Matrix4f positionMatrix;
-	private MultiBufferSource consumers;
-	private ProfilerFiller profiler;
-	private boolean advancedTranslucency;
-	private ClientLevel world;
-
-	private Entity entity;
-	private double cameraX;
-	private double cameraY;
-	private double cameraZ;
-	private BlockPos blockPos;
-	private BlockState blockState;
-
-	public boolean renderBlockOutline = true;
-
-	public void prepare(
-			LevelRenderer worldRenderer,
-			float tickDelta,
-			long limitTime,
-			boolean blockOutlines,
-			Camera camera,
-			GameRenderer gameRenderer,
-			LightTexture lightmapTextureManager,
-			Matrix4f projectionMatrix,
-			Matrix4f positionMatrix,
-			MultiBufferSource consumers,
-			ProfilerFiller profiler,
-			boolean advancedTranslucency,
-			ClientLevel world
-	) {
-		this.worldRenderer = worldRenderer;
-		this.matrixStack = null;
-		this.tickDelta = tickDelta;
-		this.limitTime = limitTime;
-		this.blockOutlines = blockOutlines;
-		this.camera = camera;
-		this.gameRenderer = gameRenderer;
-		this.lightmapTextureManager = lightmapTextureManager;
-		this.projectionMatrix = projectionMatrix;
-		this.positionMatrix = positionMatrix;
-		this.consumers = consumers;
-		this.profiler = profiler;
-		this.advancedTranslucency = advancedTranslucency;
-		this.world = world;
-	}
-
-	public void setFrustum(Frustum frustum) {
-		this.frustum = frustum;
-	}
-
-	public void setMatrixStack(PoseStack matrixStack) {
-		this.matrixStack = matrixStack;
-	}
-
-	public void prepareBlockOutline(
-			Entity entity,
-			double cameraX,
-			double cameraY,
-			double cameraZ,
-			BlockPos blockPos,
-			BlockState blockState
-	) {
-		this.entity = entity;
-		this.cameraX = cameraX;
-		this.cameraY = cameraY;
-		this.cameraZ = cameraZ;
-		this.blockPos = blockPos;
-		this.blockState = blockState;
-	}
-
-	@Override
-	public LevelRenderer worldRenderer() {
-		return worldRenderer;
-	}
-
-	@Override
-	public PoseStack matrixStack() {
-		return matrixStack;
-	}
-
-	@Override
-	public float tickDelta() {
-		return tickDelta;
-	}
-
-	@Override
-	public long limitTime() {
-		return limitTime;
-	}
-
-	@Override
-	public boolean blockOutlines() {
-		return blockOutlines;
-	}
-
-	@Override
-	public Camera camera() {
-		return camera;
-	}
-
-	@Override
-	public Matrix4f projectionMatrix() {
-		return projectionMatrix;
-	}
-
-	@Override
-	public Matrix4f positionMatrix() {
-		return positionMatrix;
-	}
-
-	@Override
-	public ClientLevel world() {
-		return world;
-	}
-
-	@Override
-	public Frustum frustum() {
-		return frustum;
-	}
-
-	@Override
-	public MultiBufferSource consumers() {
-		return consumers;
-	}
-
-	@Override
-	public GameRenderer gameRenderer() {
-		return gameRenderer;
-	}
-
-	@Override
-	public LightTexture lightmapTextureManager() {
-		return lightmapTextureManager;
-	}
-
-	@Override
-	public ProfilerFiller profiler() {
-		return profiler;
-	}
-
-	@Override
-	public boolean advancedTranslucency() {
-		return advancedTranslucency;
-	}
-
-	@Override
-	public VertexConsumer vertexConsumer() {
-		return consumers.getBuffer(RenderType.lines());
-	}
-
-	@Override
-	public Entity entity() {
-		return entity;
-	}
-
-	@Override
-	public double cameraX() {
-		return cameraX;
-	}
-
-	@Override
-	public double cameraY() {
-		return cameraY;
-	}
-
-	@Override
-	public double cameraZ() {
-		return cameraZ;
-	}
-
-	@Override
-	public BlockPos blockPos() {
-		return blockPos;
-	}
-
-	@Override
-	public BlockState blockState() {
-		return blockState;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderHandlerInfo.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderHandlerInfo.java
deleted file mode 100644
index 5e59834e25bf0a51f43071e38e2987bfe7972954..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderHandlerInfo.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering.fluid;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.client.render.fluid.v1.FluidRenderHandler;
-import net.minecraft.client.renderer.texture.TextureAtlasSprite;
-import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.material.FluidState;
-
-public class FluidRenderHandlerInfo {
-	public final TextureAtlasSprite[] sprites = new TextureAtlasSprite[2];
-	@Nullable
-	public FluidRenderHandler handler;
-	public boolean hasOverlay;
-	public TextureAtlasSprite overlaySprite;
-
-	public void setup(FluidRenderHandler handler, BlockAndTintGetter world, BlockPos pos, FluidState fluidState) {
-		this.handler = handler;
-
-		TextureAtlasSprite[] sprites = handler.getFluidSprites(world, pos, fluidState);
-
-		this.sprites[0] = sprites[0];
-		this.sprites[1] = sprites[1];
-
-		if (sprites.length > 2) {
-			hasOverlay = true;
-			overlaySprite = sprites[2];
-		}
-	}
-
-	public void clear() {
-		sprites[0] = null;
-		sprites[1] = null;
-		handler = null;
-		hasOverlay = false;
-		overlaySprite = null;
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderHandlerRegistryImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderHandlerRegistryImpl.java
deleted file mode 100644
index 913ca293e3b5039d3d0260f4b82552fa3f5ca0e7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderHandlerRegistryImpl.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering.fluid;
-
-import java.util.IdentityHashMap;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-
-import org.jetbrains.annotations.Nullable;
-import net.fabricmc.fabric.api.client.render.fluid.v1.FluidRenderHandler;
-import net.fabricmc.fabric.api.client.render.fluid.v1.FluidRenderHandlerRegistry;
-import net.minecraft.client.Minecraft;
-import net.minecraft.client.renderer.BiomeColors;
-import net.minecraft.client.renderer.block.LiquidBlockRenderer;
-import net.minecraft.client.renderer.texture.TextureAtlas;
-import net.minecraft.client.renderer.texture.TextureAtlasSprite;
-import net.minecraft.core.BlockPos;
-import net.minecraft.world.inventory.InventoryMenu;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.biome.Biomes;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.HalfTransparentBlock;
-import net.minecraft.world.level.block.LeavesBlock;
-import net.minecraft.world.level.material.Fluid;
-import net.minecraft.world.level.material.FluidState;
-import net.minecraft.world.level.material.Fluids;
-
-public class FluidRenderHandlerRegistryImpl implements FluidRenderHandlerRegistry {
-	private final Map<Fluid, FluidRenderHandler> handlers = new IdentityHashMap<>();
-	private final Map<Fluid, FluidRenderHandler> modHandlers = new IdentityHashMap<>();
-	private final ConcurrentMap<Block, Boolean> overlayBlocks = new ConcurrentHashMap<>();
-
-	{
-		handlers.put(Fluids.WATER, WaterRenderHandler.INSTANCE);
-		handlers.put(Fluids.FLOWING_WATER, WaterRenderHandler.INSTANCE);
-		handlers.put(Fluids.LAVA, LavaRenderHandler.INSTANCE);
-		handlers.put(Fluids.FLOWING_LAVA, LavaRenderHandler.INSTANCE);
-	}
-
-	public FluidRenderHandlerRegistryImpl() {
-	}
-
-	@Override
-	@Nullable
-	public FluidRenderHandler get(Fluid fluid) {
-		return handlers.get(fluid);
-	}
-
-	@Override
-	@Nullable
-	public FluidRenderHandler getOverride(Fluid fluid) {
-		return modHandlers.get(fluid);
-	}
-
-	@Override
-	public void register(Fluid fluid, FluidRenderHandler renderer) {
-		handlers.put(fluid, renderer);
-		modHandlers.put(fluid, renderer);
-	}
-
-	@Override
-	public void setBlockTransparency(Block block, boolean transparent) {
-		overlayBlocks.put(block, transparent);
-	}
-
-	@Override
-	public boolean isBlockTransparent(Block block) {
-		return overlayBlocks.computeIfAbsent(block, k -> k instanceof HalfTransparentBlock || k instanceof LeavesBlock);
-	}
-
-	public void onFluidRendererReload(LiquidBlockRenderer renderer, TextureAtlasSprite[] waterSprites, TextureAtlasSprite[] lavaSprites, TextureAtlasSprite waterOverlay) {
-		FluidRenderingImpl.setVanillaRenderer(renderer);
-
-		WaterRenderHandler.INSTANCE.updateSprites(waterSprites, waterOverlay);
-		LavaRenderHandler.INSTANCE.updateSprites(lavaSprites);
-
-		TextureAtlas texture = Minecraft.getInstance()
-				.getModelManager()
-				.getAtlas(InventoryMenu.BLOCK_ATLAS);
-
-		for (FluidRenderHandler handler : handlers.values()) {
-			handler.reloadTextures(texture);
-		}
-	}
-
-	private static class WaterRenderHandler implements FluidRenderHandler {
-		public static final WaterRenderHandler INSTANCE = new WaterRenderHandler();
-
-		/**
-		 * The water color of {@link Biomes#OCEAN}.
-		 */
-		private static final int DEFAULT_WATER_COLOR = 0x3f76e4;
-
-		private final TextureAtlasSprite[] sprites = new TextureAtlasSprite[3];
-
-		@Override
-		public TextureAtlasSprite[] getFluidSprites(@Nullable BlockAndTintGetter view, @Nullable BlockPos pos, FluidState state) {
-			return sprites;
-		}
-
-		@Override
-		public int getFluidColor(@Nullable BlockAndTintGetter view, @Nullable BlockPos pos, FluidState state) {
-			if (view != null && pos != null) {
-				return BiomeColors.getAverageWaterColor(view, pos);
-			} else {
-				return DEFAULT_WATER_COLOR;
-			}
-		}
-
-		public void updateSprites(TextureAtlasSprite[] waterSprites, TextureAtlasSprite waterOverlay) {
-			sprites[0] = waterSprites[0];
-			sprites[1] = waterSprites[1];
-			sprites[2] = waterOverlay;
-		}
-	}
-
-	private static class LavaRenderHandler implements FluidRenderHandler {
-		public static final LavaRenderHandler INSTANCE = new LavaRenderHandler();
-
-		private TextureAtlasSprite[] sprites;
-
-		@Override
-		public TextureAtlasSprite[] getFluidSprites(@Nullable BlockAndTintGetter view, @Nullable BlockPos pos, FluidState state) {
-			return sprites;
-		}
-
-		public void updateSprites(TextureAtlasSprite[] lavaSprites) {
-			sprites = lavaSprites;
-		}
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderingImpl.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderingImpl.java
deleted file mode 100644
index 48069c8e955e6679e5fce7d59c7aee34401f39d4..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/FluidRenderingImpl.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering.fluid;
-
-import com.mojang.blaze3d.vertex.VertexConsumer;
-import net.fabricmc.fabric.api.client.render.fluid.v1.FluidRenderHandler;
-import net.fabricmc.fabric.api.client.render.fluid.v1.FluidRendering;
-import net.minecraft.client.renderer.block.LiquidBlockRenderer;
-import net.minecraft.core.BlockPos;
-import net.minecraft.world.level.BlockAndTintGetter;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.material.FluidState;
-
-public class FluidRenderingImpl {
-	private static final ThreadLocal<FluidRendering.DefaultRenderer> CURRENT_DEFAULT_RENDERER = new ThreadLocal<>();
-	private static final ThreadLocal<FluidRenderHandlerInfo> CURRENT_INFO = ThreadLocal.withInitial(FluidRenderHandlerInfo::new);
-	private static LiquidBlockRenderer vanillaRenderer;
-
-	// Only invoked manually from FluidRendering#render
-	public static void render(FluidRenderHandler handler, BlockAndTintGetter world, BlockPos pos, VertexConsumer vertexConsumer, BlockState blockState, FluidState fluidState, FluidRendering.DefaultRenderer defaultRenderer) {
-		CURRENT_DEFAULT_RENDERER.set(defaultRenderer);
-
-		try {
-			handler.renderFluid(pos, world, vertexConsumer, blockState, fluidState);
-		} finally {
-			CURRENT_DEFAULT_RENDERER.remove();
-		}
-	}
-
-	// Only invoked when FluidRenderHandler#renderFluid calls super
-	public static void renderDefault(FluidRenderHandler handler, BlockAndTintGetter world, BlockPos pos, VertexConsumer vertexConsumer, BlockState blockState, FluidState fluidState) {
-		FluidRendering.DefaultRenderer renderer = CURRENT_DEFAULT_RENDERER.get();
-
-		if (renderer != null) {
-			renderer.render(handler, world, pos, vertexConsumer, blockState, fluidState);
-		} else {
-			renderVanillaDefault(handler, world, pos, vertexConsumer, blockState, fluidState);
-		}
-	}
-
-	// Invoked when FluidRenderHandler#renderFluid is called directly without using FluidRendering#render (such as
-	// from vanilla FluidRenderer#render via mixin) or from the default implementation of DefaultRenderer#render
-	public static void renderVanillaDefault(FluidRenderHandler handler, BlockAndTintGetter world, BlockPos pos, VertexConsumer vertexConsumer, BlockState blockState, FluidState fluidState) {
-		FluidRenderHandlerInfo info = CURRENT_INFO.get();
-		info.setup(handler, world, pos, fluidState);
-
-		try {
-			vanillaRenderer.tesselate(world, pos, vertexConsumer, blockState, fluidState);
-		} finally {
-			info.clear();
-		}
-	}
-
-	public static void setVanillaRenderer(LiquidBlockRenderer vanillaRenderer) {
-		FluidRenderingImpl.vanillaRenderer = vanillaRenderer;
-	}
-
-	public static FluidRenderHandlerInfo getCurrentInfo() {
-		return CURRENT_INFO.get();
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/package-info.java
deleted file mode 100644
index 71d3137b4f04a8f35fcfc60a5cd6e03c60f2d7ab..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/fluid/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-rendering-fluids-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.rendering.fluid;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/package-info.java
deleted file mode 100644
index f7aac78a75f87053026b720505659aace26e1cfe..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-rendering-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.rendering;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/v0/RenderingCallbackInvoker.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/v0/RenderingCallbackInvoker.java
deleted file mode 100644
index b91cd97cadee72d08574327105731dff77c35c17..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/v0/RenderingCallbackInvoker.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.rendering.v0;
-
-import net.fabricmc.api.ClientModInitializer;
-import net.fabricmc.fabric.api.client.rendering.v1.InvalidateRenderStateCallback;
-
-public class RenderingCallbackInvoker implements ClientModInitializer {
-	@Override
-	public void onInitializeClient() {
-		InvalidateRenderStateCallback.EVENT.register(() -> net.fabricmc.fabric.api.client.render.InvalidateRenderStateCallback.EVENT.invoker().onInvalidate());
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/rendering/v0/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/rendering/v0/package-info.java
deleted file mode 100644
index 6cac213f03d006a82fafe858c54395ca374f9f98..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/rendering/v0/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-rendering-v0.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.rendering.v0;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java b/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java
deleted file mode 100644
index a60d01ebbfd94871ee74ed766566cad18b78f8a8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/screen/ButtonList.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.screen;
-
-import java.util.AbstractList;
-import java.util.List;
-import net.minecraft.client.gui.components.AbstractWidget;
-import net.minecraft.client.gui.components.Renderable;
-import net.minecraft.client.gui.components.events.GuiEventListener;
-import net.minecraft.client.gui.narration.NarratableEntry;
-
-// TODO: When events for listening to addition of child elements are added, fire events from this list.
-public final class ButtonList extends AbstractList<AbstractWidget> {
-	private final List<Renderable> drawables;
-	private final List<NarratableEntry> selectables;
-	private final List<GuiEventListener> children;
-
-	public ButtonList(List<Renderable> drawables, List<NarratableEntry> selectables, List<GuiEventListener> children) {
-		this.drawables = drawables;
-		this.selectables = selectables;
-		this.children = children;
-	}
-
-	@Override
-	public AbstractWidget get(int index) {
-		final int drawableIndex = translateIndex(drawables, index, false);
-		return (AbstractWidget) drawables.get(drawableIndex);
-	}
-
-	@Override
-	public AbstractWidget set(int index, AbstractWidget element) {
-		final int drawableIndex = translateIndex(drawables, index, false);
-		drawables.set(drawableIndex, element);
-
-		final int selectableIndex = translateIndex(selectables, index, false);
-		selectables.set(selectableIndex, element);
-
-		final int childIndex = translateIndex(children, index, false);
-		return (AbstractWidget) children.set(childIndex, element);
-	}
-
-	@Override
-	public void add(int index, AbstractWidget element) {
-		// ensure no duplicates
-		final int duplicateIndex = drawables.indexOf(element);
-
-		if (duplicateIndex >= 0) {
-			drawables.remove(element);
-			selectables.remove(element);
-			children.remove(element);
-
-			if (duplicateIndex <= translateIndex(drawables, index, true)) {
-				index--;
-			}
-		}
-
-		final int drawableIndex = translateIndex(drawables, index, true);
-		drawables.add(drawableIndex, element);
-
-		final int selectableIndex = translateIndex(selectables, index, true);
-		selectables.add(selectableIndex, element);
-
-		final int childIndex = translateIndex(children, index, true);
-		children.add(childIndex, element);
-	}
-
-	@Override
-	public AbstractWidget remove(int index) {
-		index = translateIndex(drawables, index, false);
-
-		final AbstractWidget removedButton = (AbstractWidget) drawables.remove(index);
-		this.selectables.remove(removedButton);
-		this.children.remove(removedButton);
-
-		return removedButton;
-	}
-
-	@Override
-	public int size() {
-		int ret = 0;
-
-		for (Renderable drawable : drawables) {
-			if (drawable instanceof AbstractWidget) {
-				ret++;
-			}
-		}
-
-		return ret;
-	}
-
-	private int translateIndex(List<?> list, int index, boolean allowAfter) {
-		int remaining = index;
-
-		for (int i = 0, max = list.size(); i < max; i++) {
-			if (list.get(i) instanceof AbstractWidget) {
-				if (remaining == 0) {
-					return i;
-				}
-
-				remaining--;
-			}
-		}
-
-		if (allowAfter && remaining == 0) {
-			return list.size();
-		}
-
-		throw new IndexOutOfBoundsException(String.format("Index: %d, Size: %d", index, index - remaining));
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/screen/ScreenEventFactory.java b/src/main/java/net/fabricmc/fabric/impl/client/screen/ScreenEventFactory.java
deleted file mode 100644
index f2f327683edc86caf5b04eb495aa27f6ec4f6d22..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/screen/ScreenEventFactory.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.screen;
-
-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;
-import net.fabricmc.fabric.api.client.screen.v1.ScreenKeyboardEvents;
-import net.fabricmc.fabric.api.client.screen.v1.ScreenMouseEvents;
-import net.fabricmc.fabric.api.event.Event;
-import net.fabricmc.fabric.api.event.EventFactory;
-
-/**
- * Factory methods for creating event instances used in {@link ScreenExtensions}.
- */
-public final class ScreenEventFactory {
-	public static Event<ScreenEvents.Remove> createRemoveEvent() {
-		return EventFactory.createArrayBacked(ScreenEvents.Remove.class, callbacks -> screen -> {
-			for (ScreenEvents.Remove callback : callbacks) {
-				callback.onRemove(screen);
-			}
-		});
-	}
-
-	public static Event<ScreenEvents.BeforeRender> createBeforeRenderEvent() {
-		return EventFactory.createArrayBacked(ScreenEvents.BeforeRender.class, callbacks -> (screen, matrices, mouseX, mouseY, tickDelta) -> {
-			for (ScreenEvents.BeforeRender callback : callbacks) {
-				callback.beforeRender(screen, matrices, mouseX, mouseY, tickDelta);
-			}
-		});
-	}
-
-	public static Event<ScreenEvents.AfterRender> createAfterRenderEvent() {
-		return EventFactory.createArrayBacked(ScreenEvents.AfterRender.class, callbacks -> (screen, matrices, mouseX, mouseY, tickDelta) -> {
-			for (ScreenEvents.AfterRender callback : callbacks) {
-				callback.afterRender(screen, matrices, mouseX, mouseY, tickDelta);
-			}
-		});
-	}
-
-	public static Event<ScreenEvents.BeforeTick> createBeforeTickEvent() {
-		return EventFactory.createArrayBacked(ScreenEvents.BeforeTick.class, callbacks -> screen -> {
-			for (ScreenEvents.BeforeTick callback : callbacks) {
-				callback.beforeTick(screen);
-			}
-		});
-	}
-
-	public static Event<ScreenEvents.AfterTick> createAfterTickEvent() {
-		return EventFactory.createArrayBacked(ScreenEvents.AfterTick.class, callbacks -> screen -> {
-			for (ScreenEvents.AfterTick callback : callbacks) {
-				callback.afterTick(screen);
-			}
-		});
-	}
-
-	// Keyboard events
-
-	public static Event<ScreenKeyboardEvents.AllowKeyPress> createAllowKeyPressEvent() {
-		return EventFactory.createArrayBacked(ScreenKeyboardEvents.AllowKeyPress.class, callbacks -> (screen, key, scancode, modifiers) -> {
-			for (ScreenKeyboardEvents.AllowKeyPress callback : callbacks) {
-				if (!callback.allowKeyPress(screen, key, scancode, modifiers)) {
-					return false;
-				}
-			}
-
-			return true;
-		});
-	}
-
-	public static Event<ScreenKeyboardEvents.BeforeKeyPress> createBeforeKeyPressEvent() {
-		return EventFactory.createArrayBacked(ScreenKeyboardEvents.BeforeKeyPress.class, callbacks -> (screen, key, scancode, modifiers) -> {
-			for (ScreenKeyboardEvents.BeforeKeyPress callback : callbacks) {
-				callback.beforeKeyPress(screen, key, scancode, modifiers);
-			}
-		});
-	}
-
-	public static Event<ScreenKeyboardEvents.AfterKeyPress> createAfterKeyPressEvent() {
-		return EventFactory.createArrayBacked(ScreenKeyboardEvents.AfterKeyPress.class, callbacks -> (screen, key, scancode, modifiers) -> {
-			for (ScreenKeyboardEvents.AfterKeyPress callback : callbacks) {
-				callback.afterKeyPress(screen, key, scancode, modifiers);
-			}
-		});
-	}
-
-	public static Event<ScreenKeyboardEvents.AllowKeyRelease> createAllowKeyReleaseEvent() {
-		return EventFactory.createArrayBacked(ScreenKeyboardEvents.AllowKeyRelease.class, callbacks -> (screen, key, scancode, modifiers) -> {
-			for (ScreenKeyboardEvents.AllowKeyRelease callback : callbacks) {
-				if (!callback.allowKeyRelease(screen, key, scancode, modifiers)) {
-					return false;
-				}
-			}
-
-			return true;
-		});
-	}
-
-	public static Event<ScreenKeyboardEvents.BeforeKeyRelease> createBeforeKeyReleaseEvent() {
-		return EventFactory.createArrayBacked(ScreenKeyboardEvents.BeforeKeyRelease.class, callbacks -> (screen, key, scancode, modifiers) -> {
-			for (ScreenKeyboardEvents.BeforeKeyRelease callback : callbacks) {
-				callback.beforeKeyRelease(screen, key, scancode, modifiers);
-			}
-		});
-	}
-
-	public static Event<ScreenKeyboardEvents.AfterKeyRelease> createAfterKeyReleaseEvent() {
-		return EventFactory.createArrayBacked(ScreenKeyboardEvents.AfterKeyRelease.class, callbacks -> (screen, key, scancode, modifiers) -> {
-			for (ScreenKeyboardEvents.AfterKeyRelease callback : callbacks) {
-				callback.afterKeyRelease(screen, key, scancode, modifiers);
-			}
-		});
-	}
-
-	// Mouse Events
-
-	public static Event<ScreenMouseEvents.AllowMouseClick> createAllowMouseClickEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.AllowMouseClick.class, callbacks -> (screen, mouseX, mouseY, button) -> {
-			for (ScreenMouseEvents.AllowMouseClick callback : callbacks) {
-				if (!callback.allowMouseClick(screen, mouseX, mouseY, button)) {
-					return false;
-				}
-			}
-
-			return true;
-		});
-	}
-
-	public static Event<ScreenMouseEvents.BeforeMouseClick> createBeforeMouseClickEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.BeforeMouseClick.class, callbacks -> (screen, mouseX, mouseY, button) -> {
-			for (ScreenMouseEvents.BeforeMouseClick callback : callbacks) {
-				callback.beforeMouseClick(screen, mouseX, mouseY, button);
-			}
-		});
-	}
-
-	public static Event<ScreenMouseEvents.AfterMouseClick> createAfterMouseClickEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.AfterMouseClick.class, callbacks -> (screen, mouseX, mouseY, button) -> {
-			for (ScreenMouseEvents.AfterMouseClick callback : callbacks) {
-				callback.afterMouseClick(screen, mouseX, mouseY, button);
-			}
-		});
-	}
-
-	public static Event<ScreenMouseEvents.AllowMouseRelease> createAllowMouseReleaseEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.AllowMouseRelease.class, callbacks -> (screen, mouseX, mouseY, button) -> {
-			for (ScreenMouseEvents.AllowMouseRelease callback : callbacks) {
-				if (!callback.allowMouseRelease(screen, mouseX, mouseY, button)) {
-					return false;
-				}
-			}
-
-			return true;
-		});
-	}
-
-	public static Event<ScreenMouseEvents.BeforeMouseRelease> createBeforeMouseReleaseEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.BeforeMouseRelease.class, callbacks -> (screen, mouseX, mouseY, button) -> {
-			for (ScreenMouseEvents.BeforeMouseRelease callback : callbacks) {
-				callback.beforeMouseRelease(screen, mouseX, mouseY, button);
-			}
-		});
-	}
-
-	public static Event<ScreenMouseEvents.AfterMouseRelease> createAfterMouseReleaseEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.AfterMouseRelease.class, callbacks -> (screen, mouseX, mouseY, button) -> {
-			for (ScreenMouseEvents.AfterMouseRelease callback : callbacks) {
-				callback.afterMouseRelease(screen, mouseX, mouseY, button);
-			}
-		});
-	}
-
-	public static Event<ScreenMouseEvents.AllowMouseScroll> createAllowMouseScrollEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.AllowMouseScroll.class, callbacks -> (screen, mouseX, mouseY, horizontalAmount, verticalAmount) -> {
-			for (ScreenMouseEvents.AllowMouseScroll callback : callbacks) {
-				if (!callback.allowMouseScroll(screen, mouseX, mouseY, horizontalAmount, verticalAmount)) {
-					return false;
-				}
-			}
-
-			return true;
-		});
-	}
-
-	public static Event<ScreenMouseEvents.BeforeMouseScroll> createBeforeMouseScrollEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.BeforeMouseScroll.class, callbacks -> (screen, mouseX, mouseY, horizontalAmount, verticalAmount) -> {
-			for (ScreenMouseEvents.BeforeMouseScroll callback : callbacks) {
-				callback.beforeMouseScroll(screen, mouseX, mouseY, horizontalAmount, verticalAmount);
-			}
-		});
-	}
-
-	public static Event<ScreenMouseEvents.AfterMouseScroll> createAfterMouseScrollEvent() {
-		return EventFactory.createArrayBacked(ScreenMouseEvents.AfterMouseScroll.class, callbacks -> (screen, mouseX, mouseY, horizontalAmount, verticalAmount) -> {
-			for (ScreenMouseEvents.AfterMouseScroll callback : callbacks) {
-				callback.afterMouseScroll(screen, mouseX, mouseY, horizontalAmount, verticalAmount);
-			}
-		});
-	}
-
-	private ScreenEventFactory() {
-	}
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/screen/ScreenExtensions.java b/src/main/java/net/fabricmc/fabric/impl/client/screen/ScreenExtensions.java
deleted file mode 100644
index 7c9cbc0ef9ce7874add7e66ae6ea2a706334a1a3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/screen/ScreenExtensions.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package net.fabricmc.fabric.impl.client.screen;
-
-import java.util.List;
-import net.fabricmc.fabric.api.client.screen.v1.ScreenEvents;
-import net.fabricmc.fabric.api.client.screen.v1.ScreenKeyboardEvents;
-import net.fabricmc.fabric.api.client.screen.v1.ScreenMouseEvents;
-import net.fabricmc.fabric.api.event.Event;
-import net.minecraft.client.gui.components.AbstractWidget;
-import net.minecraft.client.gui.screens.Screen;
-
-public interface ScreenExtensions {
-	static ScreenExtensions getExtensions(Screen screen) {
-		return (ScreenExtensions) screen;
-	}
-
-	List<AbstractWidget> fabric_getButtons();
-
-	Event<ScreenEvents.Remove> fabric_getRemoveEvent();
-
-	Event<ScreenEvents.BeforeTick> fabric_getBeforeTickEvent();
-
-	Event<ScreenEvents.AfterTick> fabric_getAfterTickEvent();
-
-	Event<ScreenEvents.BeforeRender> fabric_getBeforeRenderEvent();
-
-	Event<ScreenEvents.AfterRender> fabric_getAfterRenderEvent();
-
-	// Keyboard
-
-	Event<ScreenKeyboardEvents.AllowKeyPress> fabric_getAllowKeyPressEvent();
-
-	Event<ScreenKeyboardEvents.BeforeKeyPress> fabric_getBeforeKeyPressEvent();
-
-	Event<ScreenKeyboardEvents.AfterKeyPress> fabric_getAfterKeyPressEvent();
-
-	Event<ScreenKeyboardEvents.AllowKeyRelease> fabric_getAllowKeyReleaseEvent();
-
-	Event<ScreenKeyboardEvents.BeforeKeyRelease> fabric_getBeforeKeyReleaseEvent();
-
-	Event<ScreenKeyboardEvents.AfterKeyRelease> fabric_getAfterKeyReleaseEvent();
-
-	// Mouse
-
-	Event<ScreenMouseEvents.AllowMouseClick> fabric_getAllowMouseClickEvent();
-
-	Event<ScreenMouseEvents.BeforeMouseClick> fabric_getBeforeMouseClickEvent();
-
-	Event<ScreenMouseEvents.AfterMouseClick> fabric_getAfterMouseClickEvent();
-
-	Event<ScreenMouseEvents.AllowMouseRelease> fabric_getAllowMouseReleaseEvent();
-
-	Event<ScreenMouseEvents.BeforeMouseRelease> fabric_getBeforeMouseReleaseEvent();
-
-	Event<ScreenMouseEvents.AfterMouseRelease> fabric_getAfterMouseReleaseEvent();
-
-	Event<ScreenMouseEvents.AllowMouseScroll> fabric_getAllowMouseScrollEvent();
-
-	Event<ScreenMouseEvents.BeforeMouseScroll> fabric_getBeforeMouseScrollEvent();
-
-	Event<ScreenMouseEvents.AfterMouseScroll> fabric_getAfterMouseScrollEvent();
-}
diff --git a/src/main/java/net/fabricmc/fabric/impl/client/screen/package-info.java b/src/main/java/net/fabricmc/fabric/impl/client/screen/package-info.java
deleted file mode 100644
index e7b2f34124442a6686bf4a2015964d5a94ce7adc..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/fabric/impl/client/screen/package-info.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright (c) 2016, 2017, 2018, 2019 FabricMC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Implementation code for fabric-screen-api-v1.
- */
-@ApiStatus.Internal
-package net.fabricmc.fabric.impl.client.screen;
-
-import org.jetbrains.annotations.ApiStatus;
diff --git a/src/main/java/net/fabricmc/fabric/impl/registry/sync/packet/DirectRegistryPacketHandler.java b/src/main/java/net/fabricmc/fabric/impl/registry/sync/packet/DirectRegistryPacketHandler.java
index 73998c0c3653282e74bdc0edfa25a381a99aae4f..a323374c0d01b3ac89c5362f225e452a9e9c5db5 100644
--- a/src/main/java/net/fabricmc/fabric/impl/registry/sync/packet/DirectRegistryPacketHandler.java
+++ b/src/main/java/net/fabricmc/fabric/impl/registry/sync/packet/DirectRegistryPacketHandler.java
@@ -24,7 +24,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
-import Id;
 import com.google.common.base.Preconditions;
 import it.unimi.dsi.fastutil.objects.Object2IntLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
@@ -258,27 +257,34 @@ public class DirectRegistryPacketHandler extends RegistryPacketHandler<DirectReg
 		return namespace.isEmpty() ? ResourceLocation.DEFAULT_NAMESPACE : namespace;
 	}
 
-	public record Payload(byte[] data) implements RegistrySyncPayload {
-		public static Type<Payload> ID = new Id<>(new ResourceLocation("fabric", "registry/sync/direct"));
-		public static StreamCodec<FriendlyByteBuf, Payload> CODEC = CustomPacketPayload.codec(Payload::write, Payload::new);
+	public record Payload(byte[] data) implements RegistryPacketHandler.RegistrySyncPayload {
+        public static CustomPacketPayload.Type<Payload> ID = new CustomPacketPayload.Type(new ResourceLocation("fabric", "registry/sync/direct"));
+        public static StreamCodec<FriendlyByteBuf, Payload> CODEC = CustomPacketPayload.codec(Payload::write, Payload::new);
 
-		Payload(FriendlyByteBuf buf) {
-			this(readAllBytes(buf));
-		}
+        Payload(FriendlyByteBuf buf) {
+            this(readAllBytes(buf));
+        }
 
-		private void write(FriendlyByteBuf buf) {
-			buf.writeBytes(data);
-		}
+        public Payload(byte[] data) {
+            this.data = data;
+        }
 
-		private static byte[] readAllBytes(FriendlyByteBuf buf) {
-			byte[] bytes = new byte[buf.readableBytes()];
-			buf.readBytes(bytes);
-			return bytes;
-		}
+        private void write(FriendlyByteBuf buf) {
+            buf.writeBytes(this.data);
+        }
 
-		@Override
-		public Id<? extends CustomPacketPayload> getId() {
-			return ID;
-		}
-	}
+        private static byte[] readAllBytes(FriendlyByteBuf buf) {
+            byte[] bytes = new byte[buf.readableBytes()];
+            buf.readBytes(bytes);
+            return bytes;
+        }
+
+        public CustomPacketPayload.Type<? extends CustomPacketPayload> type() {
+            return ID;
+        }
+
+        public byte[] data() {
+            return this.data;
+        }
+    }
 }
diff --git a/src/main/java/net/fabricmc/loader/DependencyException.java b/src/main/java/net/fabricmc/loader/DependencyException.java
deleted file mode 100644
index e893ff250ae6bc6a8e3d44eab8bdafb7417ebfaf..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/DependencyException.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*    */ package net.fabricmc.loader;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class DependencyException
-/*    */   extends RuntimeException
-/*    */ {
-/*    */   public DependencyException() {}
-/*    */   
-/*    */   public DependencyException(String message) {
-/* 28 */     super(message);
-/*    */   }
-/*    */   
-/*    */   public DependencyException(String message, Throwable cause) {
-/* 32 */     super(message, cause);
-/*    */   }
-/*    */   
-/*    */   public DependencyException(Throwable cause) {
-/* 36 */     super(cause);
-/*    */   }
-/*    */   
-/*    */   public DependencyException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
-/* 40 */     super(message, cause, enableSuppression, writableStackTrace);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\DependencyException.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/FabricLoader.java b/src/main/java/net/fabricmc/loader/FabricLoader.java
deleted file mode 100644
index 3dee1d2de4682ba7061fae685d1dca20f445529d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/FabricLoader.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*    */ package net.fabricmc.loader;
-/*    */ 
-/*    */ import java.io.File;
-/*    */ import java.nio.file.Path;
-/*    */ import java.util.Collection;
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.api.FabricLoader;
-/*    */ import net.fabricmc.loader.impl.FabricLoaderImpl;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public abstract class FabricLoader
-/*    */   implements FabricLoader
-/*    */ {
-/*    */   @Deprecated
-/* 38 */   public static final FabricLoader INSTANCE = (FabricLoader)FabricLoaderImpl.InitHelper.get();
-/*    */   
-/*    */   public File getModsDirectory() {
-/* 41 */     return getModsDirectory0().toFile();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public abstract <T> List<T> getEntrypoints(String paramString, Class<T> paramClass);
-/*    */ 
-/*    */   
-/*    */   public Collection<ModContainer> getModContainers() {
-/* 49 */     return getAllMods();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public List<ModContainer> getMods() {
-/* 54 */     return (List<ModContainer>)getAllMods();
-/*    */   }
-/*    */   
-/*    */   protected abstract Path getModsDirectory0();
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\FabricLoader.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/Messages.properties b/src/main/java/net/fabricmc/loader/Messages.properties
deleted file mode 100644
index bbf5f90170b4870f87745dae341d62158876811a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/Messages.properties
+++ /dev/null
@@ -1,141 +0,0 @@
-# translation keys used by Fabric Loader
-# comments starting with # describe entries, those with ## describe the available arguments
-# NOTE: single quotes must be escaped by appending another one (see java.text.MessageFormat)
-
-environment.client=client
-environment.server=dedicated server
-
-# error gui
-gui.button.copyError=Copy error
-gui.button.exit=Exit
-gui.error.header=Failed to launch!
-gui.error.missingException=No further details available
-gui.tab.crash=Crash
-
-# FormattedException main text
-exception.incompatible=Incompatible mods found!
-exception.parsingOverride=Error parsing dependency overrides!
-exception.initializerFailure=A mod crashed on startup!
-exception.minecraft.invokeFailure=Failed to start Minecraft!
-exception.minecraft.generic=Minecraft has crashed!
-
-# mod resolution errors
-
-resolution.solutionHeader=A potential solution has been determined, this may resolve your problem:
-resolution.depListHeader=More details:
-resolution.inactiveMods=Inactive mods:
-
-# solution to install a mod: Install someMod, any version.
-## mod versionRange
-resolution.solution.addMod=Install {0}, {1}.
-## mod version path
-resolution.solution.removeMod=Remove {0} {1} ({2}).
-## oldMods newMod newVersionRange
-resolution.solution.replaceMod=Replace {0} with {1}, {2}.
-## oldMod newVersionRange
-resolution.solution.replaceModVersion=Replace {0} with {1}.
-## oldMod newVersion
-resolution.solution.replaceModVersionDifferent=Replace {0} with {1} that is compatible with:
-## mod version
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersion={0} {1}
-## mod versionRange
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersions={0}, {1}
-##
-resolution.solution.replaceModVersionDifferent.unknown=Other constraints that can''t be automatically determined
-# solution to install a mod that can load in the current environment: Install someMod, any version.
-## oldMod newMod versionRange env
-resolution.solution.replaceModEnvDisabled=Replace {0} with {2} of {1} that can load in the current environment ({3}) or update/remove the mods depending on it. This happens because a mod wants to load in a {3} environment but depends on another mod that doesn''t load in the {3} environment.
-## mod version path
-resolution.solution.replaceMod.oldMod={0} {1} ({2})
-## mod version
-resolution.solution.replaceMod.oldModNoPath={0} {1}
-
-## mod version dep depVersionRange presentVersions presentVersionCount
-
-resolution.depends.envDisabled={0} {1} requires {3} of {2}, which is disabled for this environment (client/server only)!
-resolution.depends.missing={0} {1} requires {3} of {2}, which is missing!
-resolution.depends.mismatch={0} {1} requires {3} of {2}, but only the wrong version{5, choice, 1# is|2#s are} present: {4}!
-resolution.depends.invalid={0} {1} requires {3} of {2}, which can''t be loaded due to other constraints!
-resolution.depends.suggestion=You need to install {3} of {2}.
-
-resolution.recommends.envDisabled={0} {1} recommends {3} of {2}, which is disabled for this environment (client/server only)!
-resolution.recommends.missing={0} {1} recommends {3} of {2}, which is missing!
-resolution.recommends.mismatch={0} {1} recommends {3} of {2}, but only the wrong version{5, choice, 1# is|2#s are} present: {4}!
-resolution.recommends.invalid={0} {1} recommends {3} of {2}, which can''t be loaded due to other constraints!
-resolution.recommends.suggestion=You should install {3} of {2} for the optimal experience.
-
-resolution.breaks.invalid={0} {1} is incompatible with {3} of {2}, but{5, choice, 1# a|2#} matching version{5, choice, 1# is|2#s are} present: {4}!
-resolution.breaks.suggestion=The developer(s) of {0} have found that this combination doesn''t work. You need to remove one of the mods or check for updates that resolve the issue.
-
-resolution.conflicts.invalid={0} {1} conflicts with {3} of {2}, which is present with the following version{5, choice, 2#s}: {4}!
-resolution.conflicts.suggestion=While this won''t prevent you from starting the game, the developer(s) of {0} have found that this combination may cause issues. You should remove one of the mods or check for updates that resolve the issue.
-
-## mod version
-resolution.jij.builtin={0} {1} is an environment reference and usually requires installation or launcher changes to adjust
-## (no args)
-resolution.jij.builtinNoMention=environment reference, usually requires installation or launcher changes to adjust
-## mod version path
-resolution.jij.root={0} {1} is being loaded from {2}
-## path
-resolution.jij.rootNoMention=loaded from {0}
-## mod version path
-resolution.jij.normal={0} {1} is being provided through e.g. {2}
-## path
-resolution.jij.normalNoMention=provided through e.g. {0}
-
-## mod version reason
-resolution.inactive={0} {1}, reason: {2}
-## (no args)
-resolution.inactive.inactive_parent=inactive parent mod (nested jar)
-resolution.inactive.incompatible=incompatible
-resolution.inactive.newer_active=newer version active
-resolution.inactive.same_active=same version active
-resolution.inactive.to_remove=to remove
-resolution.inactive.to_replace=to replace
-resolution.inactive.unknown=unknown
-resolution.inactive.wrong_environment=wrong environment (client/server only)
-
-resolution.type.mod=mod
-
-resolution.version.any=any version
-resolution.version.none=an unsatisfiable version range
-## version
-resolution.version.equal=version {0}
-## lowerBound
-resolution.version.greater=any version after {0}
-## lowerBound
-resolution.version.greaterEqual=version {0} or later
-## upperBound
-resolution.version.less=any version before {0}
-## upperBound
-resolution.version.lessEqual=version {0} or earlier
-## majorVersion
-resolution.version.major=any {0}.x version
-## majorVersion minorVersion
-resolution.version.majorMinor=any {0}.{1}.x version
-## lowerBound upperBound
-resolution.version.rangeMinIncMaxInc=any version between {0} (inclusive) and {1} (inclusive)
-resolution.version.rangeMinIncMaxExc=any version between {0} (inclusive) and {1} (exclusive)
-resolution.version.rangeMinExcMaxInc=any version between {0} (exclusive) and {1} (inclusive)
-resolution.version.rangeMinExcMaxExc=any version between {0} (exclusive) and {1} (exclusive)
-
-## a b
-enumerationAnd.2={0} and {1}
-## a b c
-enumerationAnd.3={0}, {1} and {2}
-## first
-enumerationAnd.nPrefix={0}
-## allPrev cur
-enumerationAnd.n={0}, {1}
-## allPrev last
-enumerationAnd.nSuffix={0} and {1}
-## a b
-enumerationOr.2={0} or {1}
-## a b c
-enumerationOr.3={0}, {1} or {2}
-## first
-enumerationOr.nPrefix={0}
-## allPrev cur
-enumerationOr.n={0}, {1}
-## allPrev last
-enumerationOr.nSuffix={0} or {1}
diff --git a/src/main/java/net/fabricmc/loader/Messages_es.properties b/src/main/java/net/fabricmc/loader/Messages_es.properties
deleted file mode 100644
index 4fd9785e94e1ae098312817904d66ecc2a3b8363..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/Messages_es.properties
+++ /dev/null
@@ -1,126 +0,0 @@
-# translation keys used by Fabric Loader
-# comments starting with # describe entries, those with ## describe the available arguments
-
-environment.client=cliente
-environment.server=servidor dedicado
-
-# mod resolution errors
-
-resolution.solutionHeader=Hemos encontrado una solución prometedora:
-resolution.depListHeader=Dependencias no satisfechas:
-resolution.inactiveMods=Mods inactivos:
-
-# solution to install a mod: Install someMod, any version.
-## mod versionRange
-resolution.solution.addMod=Instala {0}, {1}.
-## mod version path
-resolution.solution.removeMod=Quita {0} {1} ({2}).
-## oldMods newMod newVersionRange
-resolution.solution.replaceMod=Cambia {0} por {1}, {2}.
-## oldMod newVersionRange
-resolution.solution.replaceModVersion=Cambia {0} por {1}.
-## oldMod newVersion
-resolution.solution.replaceModVersionDifferent=Cambia {0} por {1} que sea compatible con:
-## mod version
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersion={0} {1}
-## mod versionRange
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersions={0}, {1}
-##
-resolution.solution.replaceModVersionDifferent.unknown=Otros problemas que no se pueden determinar automáticamente
-# solution to install a mod that can load in the current environment: Install someMod, any version.
-## oldMod newMod versionRange env
-resolution.solution.replaceModEnvDisabled=Cambia {0} por {2} en {1} que pueda cargar en el entorno actual ({3}) o actualiza/quita los mods que dependen en él. Esto pasa porque un mod quiere cargar en un entorno de {3} pero depende de otro que no carga en el entorno de {3}.
-## mod version path
-resolution.solution.replaceMod.oldMod={0} {1} ({2})
-## mod version
-resolution.solution.replaceMod.oldModNoPath={0} {1}
-
-## mod version dep depVersionRange presentVersions presentVersionCount
-
-resolution.depends.envDisabled=¡{0} {1} necesita {3} de {2}, que no se activa en este entorno (sólo en cliente/servidor)!
-resolution.depends.missing=¡{0} {1} necesita {3} de {2}, que no tienes!
-resolution.depends.mismatch=¡{0} {1} necesita {3} de {2}, pero sólo tienes{5, choice, 1# una versión incorrecta|2#s varias versiones incorrectas}: {4}!
-resolution.depends.invalid=¡{0} {1} necesita {3} de {2}, que no puede cargarse por otras restricciones!
-resolution.depends.suggestion=Tienes que instalar {3} de {2}.
-
-resolution.recommends.envDisabled=¡{0} {1} recomienda la versión {3} de {2}, que no carga en este entorno (sólo en cliente/servidor)!
-resolution.recommends.missing=¡{0} {1} recomienda {3} de {2}, que no tienes!
-resolution.recommends.mismatch=¡{0} {1} recomienda {3} de {2}, pero sólo {5, choice, 1#una incorrecta está presente|2#algunas incorrectas están presentes}: {4}!
-resolution.recommends.invalid=¡{0} {1} recomienda {3} de {2}, que no puede cargarse por otras restricciones!
-resolution.recommends.suggestion=Debería instalar {3} de {2} para una experiencia óptima.
-
-resolution.breaks.invalid=¡{0} {1} no es compatible con {3} de {2}, pero tienes{5, choice, 1# una versión coincidente presente|2#varias versiones coincidentes presentes} : {4}!
-resolution.breaks.suggestion=El/los desarrollador/es de {0} han encontrado que esta combinación no funciona. Debes eliminar uno de los mods o buscar actualizaciones que puedan resolver el problema.
-
-resolution.conflicts.invalid=¡{0} {1} puede dar problemas con la versión {3} de {2}, que está presente en la{5, choice, 1# siguiente versión|2#s siguientes versiones}: {4}!
-resolution.conflicts.suggestion=Si bien esto no te evitará arrancar el juego, el/los desarrollador/es de {0} han visto que esta combinación puede causar problemas. Deberías eliminar uno de los mods o buscar actualizaciones que resuelvan el problema.
-
-## mod version
-resolution.jij.builtin={0} {1} es una referencia al entorno y suele necesitar instalación o cambios en el launcher para ajustarse
-## (no args)
-resolution.jij.builtinNoMention=referencia al entorno, suele necesitar instalación o cambios en el launcher para ajustarse
-## mod version path
-resolution.jij.root={0} {1} está siendo cargado desde {2}
-## path
-resolution.jij.rootNoMention=cargado desde {0}
-## mod version path
-resolution.jij.normal={0} {1} viene incluido por e.g. {2}
-## path
-resolution.jij.normalNoMention=incluido por e.g. {0}
-
-## mod version reason
-resolution.inactive={0} {1}, razón: {2}
-## (no args)
-resolution.inactive.inactive_parent=mod padre inactivo (jar incluido)
-resolution.inactive.incompatible=incompatible
-resolution.inactive.newer_active=nueva versión activa
-resolution.inactive.same_active=misma versión activa
-resolution.inactive.to_remove=por eliminar
-resolution.inactive.to_replace=por cambiar
-resolution.inactive.unknown=desconocido
-resolution.inactive.wrong_environment=entorno incorrecto (sólo cliente/servidor)
-
-resolution.type.mod=el mod
-
-resolution.version.any=cualquier versión
-resolution.version.none=un rango de versiones imposible
-## version
-resolution.version.equal=la versión {0}
-## lowerBound
-resolution.version.greater=cualquier versión tras {0}
-## lowerBound
-resolution.version.greaterEqual=la versión {0} o posterior
-## upperBound
-resolution.version.less=cualquier versión anterior a {0}
-## upperBound
-resolution.version.lessEqual=la versión {0} o una anterior
-## majorVersion
-resolution.version.major=cualquier versión {0}.x
-## majorVersion minorVersion
-resolution.version.majorMinor=cualquier versión {0}.{1}.x
-## lowerBound upperBound
-resolution.version.rangeMinIncMaxInc=cualquier versión entre {0} (incluida) y {1} (incluida)
-resolution.version.rangeMinIncMaxExc=cualquier versión entre {0} (incluida) y {1} (excluida)
-resolution.version.rangeMinExcMaxInc=cualquier versión entre {0} (excluida) y {1} (incluida)
-resolution.version.rangeMinExcMaxExc=cualquier versión entre {0} (excluida) y {1} (excluida)
-
-## a b
-enumerationAnd.2={0} y {1}
-## a b c
-enumerationAnd.3={0}, {1} y {2}
-## first
-enumerationAnd.nPrefix={0}
-## allPrev cur
-enumerationAnd.n={0}, {1}
-## allPrev last
-enumerationAnd.nSuffix={0} y {1}
-## a b
-enumerationOr.2={0} o {1}
-## a b c
-enumerationOr.3={0}, {1} o {2}
-## first
-enumerationOr.nPrefix={0}
-## allPrev cur
-enumerationOr.n={0}, {1}
-## allPrev last
-enumerationOr.nSuffix={0} o {1}
diff --git a/src/main/java/net/fabricmc/loader/Messages_ja_JP.properties b/src/main/java/net/fabricmc/loader/Messages_ja_JP.properties
deleted file mode 100644
index 3b9eccb4406daad928e839ee3efb7708844a7115..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/Messages_ja_JP.properties
+++ /dev/null
@@ -1,140 +0,0 @@
-# translation keys used by Fabric Loader
-# comments starting with # describe entries, those with ## describe the available arguments
-
-environment.client=クライアント
-environment.server=サーバー
-
-# error gui
-gui.button.copyError=エラーをコピー
-gui.button.exit=終了
-gui.error.header=起動に失敗しました!
-gui.error.missingException=詳細は利用できません。
-gui.tab.crash=クラッシュ
-
-# FormattedException main text
-exception.incompatible=Modに互換性の問題があります!
-exception.parsingOverride=依存関係上書きを読み込めません!
-exception.initializerFailure=Modが起動に失敗しました!
-exception.minecraft.invokeFailure=Minecraftを開始するのに失敗しました!
-exception.minecraft.generic=Minecraftがクラッシュしました!
-
-# mod resolution errors
-
-resolution.solutionHeader=次の解決策を試してみてください:
-resolution.depListHeader=満たされていないModの依存関係:
-resolution.inactiveMods=アクティブでないMod:
-
-# solution to install a mod: Install someMod, any version.
-## mod versionRange
-resolution.solution.addMod={0} の {1} を追加する。
-## mod version path
-resolution.solution.removeMod={0} の {1} ({2}) を除去する。
-## oldMods newMod newVersionRange
-resolution.solution.replaceMod={0} を {1} {2} で置き換える。
-## oldMod newVersionRange
-resolution.solution.replaceModVersion={0} を {1} で置き換える。
-## oldMod newVersion
-resolution.solution.replaceModVersionDifferent={0} を {1} のうち互換性のあるもので置き換える。
-## mod version
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersion={0} {1}
-## mod versionRange
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersions={0} {1}
-##
-resolution.solution.replaceModVersionDifferent.unknown=その他の要件は自動的に判断できませんでした。
-# solution to install a mod that can load in the current environment: Install someMod, any version.
-## oldMod newMod versionRange env
-resolution.solution.replaceModEnvDisabled={0} を現在の環境 ({3}) で読み込み可能な {2} の {1} で置き換えるか、それに依存しているModを更新・除去する。これは、Modが {3} 環境で読み込まれるべきなのに、 {3} 環境で読み込むことのできないModに依存している場合に発生します。
-## mod version path
-resolution.solution.replaceMod.oldMod={0} {1} ({2})
-## mod version
-resolution.solution.replaceMod.oldModNoPath={0} {1}
-
-## mod version dep depVersionRange presentVersions presentVersionCount
-
-resolution.depends.envDisabled={0} {1} は {3} の {2} を必要としますが、そのModは現在の環境では無効化されています(クライアント/サーバー専用)!
-resolution.depends.missing={0} {1} は {3} の {2} を必要としますが、そのModがありません!
-resolution.depends.mismatch={0} {1} は {3} の {2} を必要としますが、異なるバージョンのModが読み込まれています: {4}!
-resolution.depends.invalid={0} {1} は {3} の {2} を必要としますが、その他の条件により読み込めません!
-resolution.depends.suggestion={3} の {2} を追加しないといけません。
-
-resolution.recommends.envDisabled={0} {1} は {3} の {2} を追加することを推奨していますが、そのModは現在の環境では無効化されています(クライアント/サーバー専用)!
-resolution.recommends.missing={0} {1} は {3} の {2} を追加することを推奨していますが、そのModがありません!
-resolution.recommends.mismatch={0} {1} は {3} の {2} を追加することを推奨していますが、異なるバージョンのModが読み込まれています: {4}!
-resolution.recommends.invalid={0} {1} は {3} の {2} を追加することを推奨していますが、その他の条件により読み込めません!
-resolution.recommends.suggestion=最適な使用のために {3} の {2} を追加することを推奨します。
-
-resolution.breaks.invalid={0} {1} は {3} の {2} と互換性がないのに、そのModが存在します: {4}!
-resolution.breaks.suggestion={0} の開発者は、このModの組み合わせは動かないと判断しています。片方のModを除去するか、Modの更新を確認してみてください。
-
-resolution.conflicts.invalid={0} {1} は {3} の {2} と同時に使用すると問題を起こすのに、そのModが存在します: {4}!
-resolution.conflicts.suggestion=これは読み込みを中断するものではありませんが、 {0} の開発者は、このModの組み合わせは問題を引き起こす可能性があると判断しています。片方のModを除去するか、Modの更新を確認してみてください。
-
-## mod version
-resolution.jij.builtin={0} {1} は、読み込み環境を表しているので、セットアップやランチャーの設定を変更しないといけません。
-## (no args)
-resolution.jij.builtinNoMention=読み込み環境、セットアップやランチャーの設定を変更しないといけません
-## mod version path
-resolution.jij.root={0} {1} は {2} から読み込まれています
-## path
-resolution.jij.rootNoMention={0} から読み込まれた
-## mod version path
-resolution.jij.normal={0} {1} は {2} などから提供されています
-## path
-resolution.jij.normalNoMention={0} などから提供
-
-## mod version reason
-resolution.inactive={0} {1}、 理由: {2}
-## (no args)
-resolution.inactive.inactive_parent=親Modがアクティブでない
-resolution.inactive.incompatible=非互換
-resolution.inactive.newer_active=新しいバージョンがアクティブ
-resolution.inactive.same_active=同じバージョンがアクティブ
-resolution.inactive.to_remove=除去すべきMod
-resolution.inactive.to_replace=置き換えるべきMod
-resolution.inactive.unknown=不明
-resolution.inactive.wrong_environment=環境の不一致 (クライアント/サーバー専用)
-
-resolution.type.mod=Mod
-
-resolution.version.any=いずれかのバージョン
-resolution.version.none=満たせないバージョン幅
-## version
-resolution.version.equal=バージョン {0}
-## lowerBound
-resolution.version.greater={0} より後のバージョン
-## lowerBound
-resolution.version.greaterEqual=バージョン {0} またはそれ以上
-## upperBound
-resolution.version.less={0} より前のバージョン
-## upperBound
-resolution.version.lessEqual=バージョン {0} またはそれ以下
-## majorVersion
-resolution.version.major=バージョン {0}.x
-## majorVersion minorVersion
-resolution.version.majorMinor=バージョン {0}.{1}.x
-## lowerBound upperBound
-resolution.version.rangeMinIncMaxInc={0} 以上 {1} 以下
-resolution.version.rangeMinIncMaxExc={0} 以上 {1} 未満
-resolution.version.rangeMinExcMaxInc={0} より後で {1} 以下
-resolution.version.rangeMinExcMaxExc={0} より後で {1} 未満
-
-## a b
-enumerationAnd.2={0} かつ {1}
-## a b c
-enumerationAnd.3={0}、 {1}、かつ {2}
-## first
-enumerationAnd.nPrefix={0}
-## allPrev cur
-enumerationAnd.n={0}、 {1}
-## allPrev last
-enumerationAnd.nSuffix={0}、 かつ {1}
-## a b
-enumerationOr.2={0} または {1}
-## a b c
-enumerationOr.3={0}、 {1}、または {2}
-## first
-enumerationOr.nPrefix={0}
-## allPrev cur
-enumerationOr.n={0}、 {1}
-## allPrev last
-enumerationOr.nSuffix={0}、 または {1}
diff --git a/src/main/java/net/fabricmc/loader/Messages_vi_VN.properties b/src/main/java/net/fabricmc/loader/Messages_vi_VN.properties
deleted file mode 100644
index 2d05c2f004408bc9284fa809976bbc8093c52c8d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/Messages_vi_VN.properties
+++ /dev/null
@@ -1,139 +0,0 @@
-# translation keys used by Fabric Loader
-# comments starting with # describe entries, those with ## describe the available arguments
-
-environment.client=máy khách
-environment.server=máy chủ chuyên dụng
-
-# error gui
-gui.button.copyError=Sao chép lỗi
-gui.button.exit=Thoát
-gui.error.header=Không khởi chạy được!
-gui.error.missingException=Không có thêm chi tiết có sẵn
-gui.tab.crash=Sập
-
-# FormattedException main text
-exception.incompatible=Bộ mod không tương thích!
-exception.parsingOverride=Lỗi phân tích cú pháp ghi đè phần phụ thuộc!
-exception.initializerFailure=Một mod bị lỗi khi khởi động!
-exception.minecraft.invokeFailure=Không khởi động được Minecraft!
-exception.minecraft.generic=Minecraft đã bị sập!
-
-# mod resolution errors
-
-resolution.solutionHeader=Một giải pháp tiềm năng đã được xác định:
-resolution.depListHeader=Danh sách phụ thuộc chưa được đáp ứng:
-resolution.inactiveMods=Mod không hoạt động:
-
-# solution to install a mod: Install someMod, any version.
-## mod versionRange
-resolution.solution.addMod=Cài đặt {0}, {1}.
-## mod version path
-resolution.solution.removeMod=Loại bỏ {0} {1} ({2}).
-## oldMods newMod newVersionRange
-resolution.solution.replaceMod=Thay thế {0} với {1}, {2}.
-## oldMod newVersionRange
-resolution.solution.replaceModVersion=Thay thế {0} với {1}.
-## oldMod newVersion
-resolution.solution.replaceModVersionDifferent=Thay thế {0} với {1} tương thích với:
-## mod version
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersion={0} {1}
-## mod versionRange
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersions={0}, {1}
-##
-resolution.solution.replaceModVersionDifferent.unknown=Các ràng buộc khác không thể được xác định tự động
-# solution to install a mod that can load in the current environment: Install someMod, any version.
-## oldMod newMod versionRange env
-resolution.solution.replaceModEnvDisabled=Thay thế {0} bằng {2} của {1} có thể tải trong môi trường hiện tại ({3}) hoặc cập nhật/xóa các mod tùy thuộc vào môi trường đó. Điều này xảy ra vì một mod muốn tải trong môi trường {3} nhưng phụ thuộc vào một mod khác không tải trong môi trường {3}.
-## mod version path
-resolution.solution.replaceMod.oldMod={0} {1} ({2})
-## mod version
-resolution.solution.replaceMod.oldModNoPath={0} {1}
-
-## mod version dep depVersionRange presentVersions presentVersionCount
-
-resolution.depends.envDisabled={0} {1} yêu cầu {3} trên {2}, tính năng này bị tắt cho môi trường này (chỉ máy khách/máy chủ)!
-resolution.depends.missing={0} {1} yêu cầu {3} trên {2}, hiện đang thiếu!
-resolution.depends.mismatch={0} {1} yêu cầu {3} của {2}, nhưng chỉ có phiên bản sai{5, choice, 1# là|2#s là} có mặt: {4}!
-resolution.depends.invalid={0} {1} yêu cầu {3} trên {2}, không thể tải do các ràng buộc khác!
-resolution.depends.suggestion=Bạn cần cài đặt {3} của {2}.
-
-resolution.recommends.envDisabled={0} {1} đề xuất {3} trên {2}, tính năng này bị tắt cho môi trường này (chỉ máy khách/máy chủ)!
-resolution.recommends.missing={0} {1} đề xuất {3} trên {2}, cái này còn thiếu!
-resolution.recommends.mismatch={0} {1} đề xuất {3} của {2}, nhưng chỉ có phiên bản sai{5, choice, 1# là|2# là} có mặt: {4}!
-resolution.recommends.invalid={0} {1} đề xuất {3}/{2}, không thể tải do các ràng buộc khác!
-resolution.recommends.suggestion=Bạn nên cài đặt {3}/{2} để có trải nghiệm tối ưu.
-
-resolution.breaks.invalid={0} {1} không tương thích với {3} của {2}, nhưng {5, choice, 1# a|2#} phiên bản phù hợp{5, choice, 1# là|2# là} có mặt: {4 }!
-resolution.breaks.suggestion=(Các) nhà phát triển của {0} nhận thấy rằng sự kết hợp này không hoạt động. Bạn cần xóa một trong các bản mod hoặc kiểm tra các bản cập nhật giải quyết vấn đề.
-
-resolution.conflicts.invalid={0} {1} xung đột với {3} của {2}, hiện có với phiên bản sau{5, choice, 2#s}: {4}!
-resolution.conflicts.suggestion=Mặc dù điều này sẽ không ngăn bạn bắt đầu trò chơi, nhưng (các) nhà phát triển của {0} nhận thấy rằng sự kết hợp này có thể gây ra sự cố. Bạn nên xóa một trong các mod hoặc kiểm tra các bản cập nhật giải quyết vấn đề.
-
-## mod version
-resolution.jij.builtin={0} {1} là tham chiếu môi trường và thường yêu cầu cài đặt hoặc thay đổi launcher để điều chỉnh
-## (no args)
-resolution.jij.builtinNoMention=tham chiếu môi trường, thường yêu cầu cài đặt hoặc thay đổi launcher để điều chỉnh
-## mod version path
-resolution.jij.root={0} {1} đang được tải từ {2}
-## path
-resolution.jij.rootNoMention=tải từ {0}
-## mod version path
-resolution.jij.normal={0} {1} đang được cung cấp qua ví dụ: {2}
-## path
-resolution.jij.normalNoMention=được cung cấp thông qua ví dụ {0}
-## mod version reason
-resolution.inactive={0} {1}, lý do: {2}
-## (no args)
-resolution.inactive.inactive_parent=mod gốc không hoạt động (jar lồng nhau)
-resolution.inactive.incompatible=không tương thích
-resolution.inactive.newer_active=phiên bản mới hơn đang hoạt động
-resolution.inactive.same_active=cùng phiên bản hoạt động
-resolution.inactive.to_remove=để loại bỏ
-resolution.inactive.to_replace=để thay thế
-resolution.inactive.unknown=không rõ
-resolution.inactive.wrong_environment=môi trường sai (chỉ máy khách/máy chủ)
-
-resolution.type.mod=mod
-
-resolution.version.any=bất kỳ phiên bản
-resolution.version.none=một phạm vi phiên bản không thỏa mãn
-## version
-resolution.version.equal=phiên bản {0}
-## lowerBound
-resolution.version.greater=bất kỳ phiên bản nào sau {0}
-## lowerBound
-resolution.version.greaterEqual=phiên bản {0} trở lên
-## upperBound
-resolution.version.less=bất kỳ phiên bản nào trước {0}
-## upperBound
-resolution.version.lessEqual=phiên bản {0} hoặc cũ hơn
-## majorVersion
-resolution.version.major=bất kỳ phiên bản {0}.x nào
-## majorVersion minorVersion
-resolution.version.majorMinor=bất kỳ phiên bản {0}.{1}.x nào
-## lowerBound upperBound
-resolution.version.rangeMinIncMaxInc=bất kỳ phiên bản nào giữa {0} (bao gồm) và {1} (bao gồm)
-resolution.version.rangeMinIncMaxExc=bất kỳ phiên bản nào giữa {0} (bao gồm) và {1} (độc quyền)
-resolution.version.rangeMinExcMaxInc=bất kỳ phiên bản nào giữa {0} (độc quyền) và {1} (bao gồm)
-resolution.version.rangeMinExcMaxExc=bất kỳ phiên bản nào giữa {0} (độc quyền) và {1} (độc quyền)
-
-## a b
-enumerationAnd.2={0} và {1}
-## a b c
-enumerationAnd.3={0}, {1} và {2}
-## first
-enumerationAnd.nPrefix={0}
-## allPrev cur
-enumerationAnd.n={0}, {1}
-## allPrev last
-enumerationAnd.nSuffix={0} và {1}
-## a b
-enumerationOr.2={0} hoặc {1}
-## a b c
-enumerationOr.3={0}, {1} hoặc {2}
-## first
-enumerationOr.nPrefix={0}
-## allPrev cur
-enumerationOr.n={0}, {1}
-## allPrev last
-enumerationOr.nSuffix={0} hoặc {1}
diff --git a/src/main/java/net/fabricmc/loader/Messages_zh_CN.properties b/src/main/java/net/fabricmc/loader/Messages_zh_CN.properties
deleted file mode 100644
index 0554eff611efd8792a56f929fa495be0305c5bf5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/Messages_zh_CN.properties
+++ /dev/null
@@ -1,141 +0,0 @@
-# translation keys used by Fabric Loader
-# comments starting with # describe entries, those with ## describe the available arguments
-# NOTE: single quotes must be escaped by appending another one (see java.text.MessageFormat)
-
-environment.client=客户端
-environment.server=独立服务器
-
-# error gui
-gui.button.copyError=复制错误信息
-gui.button.exit=退出
-gui.error.header=启动失败！
-gui.error.missingException=没有更多信息
-gui.tab.crash=崩溃
-
-# FormattedException main text
-exception.incompatible=有不兼容的模组！
-exception.parsingOverride=解析前置项覆写时发生错误！
-exception.initializerFailure=模组在启动时崩溃！
-exception.minecraft.invokeFailure=启动 Minecraft 失败！
-exception.minecraft.generic=Minecraft 崩溃！
-
-# mod resolution errors
-
-resolution.solutionHeader=确定了一种可能的解决方法，这样做可能会解决你的问题：
-resolution.depListHeader=更多信息：
-resolution.inactiveMods=停用的模组：
-
-# solution to install a mod: Install someMod, any version.
-## mod versionRange
-resolution.solution.addMod=安装 {0}，{1}。
-## mod version path
-resolution.solution.removeMod=移除 {0} {1} ({2})。
-## oldMods newMod newVersionRange
-resolution.solution.replaceMod=将 {0} 替换为 {1}，{2}。
-## oldMod newVersionRange
-resolution.solution.replaceModVersion=将 {0} 替换为 {1}。
-## oldMod newVersion
-resolution.solution.replaceModVersionDifferent=将 {0} 替换为与这一模组兼容的 {1}：
-## mod version
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersion={0} {1}
-## mod versionRange
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersions={0}，{1}
-##
-resolution.solution.replaceModVersionDifferent.unknown=其他无法自动确定的限制条件
-# solution to install a mod that can load in the current environment: Install someMod, any version.
-## oldMod newMod versionRange env
-resolution.solution.replaceModEnvDisabled=将 {0} 替换为 {1} {2}，该版本可以在目前环境 ({3}) 中载入，或者根据它更新／移除相关模组。这是因为某个模组想要在 {3} 环境中载入，但依赖于另一个在 {3} 环境中不载入的模组。
-## mod version path
-resolution.solution.replaceMod.oldMod={0} {1}（{2}）
-## mod version
-resolution.solution.replaceMod.oldModNoPath={0} {1}
-
-## mod version dep depVersionRange presentVersions presentVersionCount
-
-resolution.depends.envDisabled={0} {1} 需要 {2} 的 {3}，但它在此环境中被停用（仅适用于用户端／服务器）！
-resolution.depends.missing={0} {1} 需要 {2} 的 {3}，但没有安装它！
-resolution.depends.mismatch={0} {1} 需要 {2} 的 {3}，但已经安装了的版本 {4} 不对！
-resolution.depends.invalid={0} {1} 需要 {2} 的 {3}，但由于其他限制条件无法载入！
-resolution.depends.suggestion=你需要安装 {2} 的 {3}。
-
-resolution.recommends.envDisabled={0} {1} 建议安装 {2} 的 {3}，但该版本在此环境中被停用（仅适用于用户端／服务器）！
-resolution.recommends.missing={0} {1} 建议安装 {2} 的 {3}，但没有安装它！
-resolution.recommends.mismatch={0} {1} 建议安装 {2} 的 {3}，但已经安装了的版本 {4} 不对！
-resolution.recommends.invalid={0} {1} 建议安装 {2} 的 {3}，但由于其他限制条件无法载入！
-resolution.recommends.suggestion=为了最佳体验，您应该安装 {2} 的 {3}。
-
-resolution.breaks.invalid={0} {1} 与 {2} 的 {3} 不兼容，但已经安装了的版本是 {4}！
-resolution.breaks.suggestion={0} 的开发者发现它们放到一起会引起问题。你需要删除其中一个模组，或搜索解决此问题的更新版本。
-
-resolution.conflicts.invalid={0} {1} 与 {2} 的 {3} 冲突，但已经安装了的版本是 {4}！
-resolution.conflicts.suggestion=尽管这不会阻止游戏启动，但 {0} 的开发者发现这种组合可能引起问题。你应该删除其中一个模组，或搜索解决此问题的更新版本。
-
-## mod version
-resolution.jij.builtin={0} {1} 是环境引用，通常需要通过实例或启动器的配置来调整
-## (no args)
-resolution.jij.builtinNoMention=环境引用，通常需要通过实例或启动器的配置来调整
-## mod version path
-resolution.jij.root={0} {1} 被从 {2} 载入
-## path
-resolution.jij.rootNoMention=被从 {0} 载入
-## mod version path
-resolution.jij.normal={0} {1} 通过 {2} 等方式提供
-## path
-resolution.jij.normalNoMention=通过 {0} 等方式提供
-
-## mod version reason
-resolution.inactive={0} {1}，原因：{2}
-## (no args)
-resolution.inactive.inactive_parent=停用的父模组（嵌套的 JAR 文件）
-resolution.inactive.incompatible=不兼容
-resolution.inactive.newer_active=较新版本已启用
-resolution.inactive.same_active=相同版本已启用
-resolution.inactive.to_remove=待移除
-resolution.inactive.to_replace=待替换
-resolution.inactive.unknown=未知
-resolution.inactive.wrong_environment=环境不对（仅适用于用户端／服务器）
-
-resolution.type.mod=模组
-
-resolution.version.any=任意版本
-resolution.version.none=无法满足的版本范围
-## version
-resolution.version.equal={0} 版本
-## lowerBound
-resolution.version.greater={0} 以上任意版本
-## lowerBound
-resolution.version.greaterEqual={0} 及以上版本
-## upperBound
-resolution.version.less={0} 以下任意版本
-## upperBound
-resolution.version.lessEqual={0} 及以下版本
-## majorVersion
-resolution.version.major=任意 {0}.x 版本
-## majorVersion minorVersion
-resolution.version.majorMinor=任意 {0}.{1}.x 版本
-## lowerBound upperBound
-resolution.version.rangeMinIncMaxInc=从 {0}（含）到 {1}（含）的任意版本
-resolution.version.rangeMinIncMaxExc=从 {0}（含）到 {1}（不含）的任意版本
-resolution.version.rangeMinExcMaxInc=从 {0}（含）到 {1}（不含）的任意版本
-resolution.version.rangeMinExcMaxExc=从 {0}（不含）到 {1}（不含）的任意版本
-
-## a b
-enumerationAnd.2={0} 和 {1}
-## a b c
-enumerationAnd.3={0}、{1} 和 {2}
-## first
-enumerationAnd.nPrefix={0}
-## allPrev cur
-enumerationAnd.n={0}、{1}
-## allPrev last
-enumerationAnd.nSuffix={0} 和 {1}
-## a b
-enumerationOr.2={0} 或 {1}
-## a b c
-enumerationOr.3={0}、{1} 或 {2}
-## first
-enumerationOr.nPrefix={0}
-## allPrev cur
-enumerationOr.n={0}、{1}
-## allPrev last
-enumerationOr.nSuffix={0} 或 {1}
diff --git a/src/main/java/net/fabricmc/loader/Messages_zh_TW.properties b/src/main/java/net/fabricmc/loader/Messages_zh_TW.properties
deleted file mode 100644
index a07bfe7f8d69d85d042732cec2c4c16494eddf13..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/Messages_zh_TW.properties
+++ /dev/null
@@ -1,141 +0,0 @@
-# translation keys used by Fabric Loader
-# comments starting with # describe entries, those with ## describe the available arguments
-# NOTE: single quotes must be escaped by appending another one (see java.text.MessageFormat)
-
-environment.client=用戶端
-environment.server=專用伺服器
-
-# error gui
-gui.button.copyError=複製錯誤
-gui.button.exit=離開
-gui.error.header=啟動失敗！
-gui.error.missingException=沒有更多資訊可用
-gui.tab.crash=崩潰
-
-# FormattedException main text
-exception.incompatible=找到不相容模組！
-exception.parsingOverride=解析前置項覆寫時發生錯誤！
-exception.initializerFailure=模組在啟動時崩潰！
-exception.minecraft.invokeFailure=啟動 Minecraft 失敗！
-exception.minecraft.generic=Minecraft 崩潰！
-
-# mod resolution errors
-
-resolution.solutionHeader=已找到潛在解決方案，這可能會解決你的問題：
-resolution.depListHeader=更多資訊：
-resolution.inactiveMods=停用的模組：
-
-# solution to install a mod: Install someMod, any version.
-## mod versionRange
-resolution.solution.addMod=安裝 {0}，{1}。
-## mod version path
-resolution.solution.removeMod=移除 {0} {1}（{2}）。
-## oldMods newMod newVersionRange
-resolution.solution.replaceMod=將 {0} 替換為 {1}，{2}。
-## oldMod newVersionRange
-resolution.solution.replaceModVersion=將 {0} 替換為 {1}。
-## oldMod newVersion
-resolution.solution.replaceModVersionDifferent=將 {0} 替換為與以下相容的 {1}：
-## mod version
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersion={0} {1}
-## mod versionRange
-resolution.solution.replaceModVersionDifferent.reqSupportedModVersions={0}，{1}
-##
-resolution.solution.replaceModVersionDifferent.unknown=其他無法自動確定的限制條件
-# solution to install a mod that can load in the current environment: Install someMod, any version.
-## oldMod newMod versionRange env
-resolution.solution.replaceModEnvDisabled=將 {0} 替換為 {1} {2} 版本，該版本可以在目前環境 ({3}) 中載入，或者根據它更新／移除相關模組。這是因為某個模組想要在 {3} 環境中載入，但依賴於另一個在 {3} 環境中不載入的模組。
-## mod version path
-resolution.solution.replaceMod.oldMod={0} {1}（{2}）
-## mod version
-resolution.solution.replaceMod.oldModNoPath={0} {1}
-
-## mod version dep depVersionRange presentVersions presentVersionCount
-
-resolution.depends.envDisabled={0} {1} 需要 {3} {2}，但該版本在此環境中被停用（僅適用於用戶端／伺服器）！
-resolution.depends.missing={0} {1} 需要 {3} {2}，但該版本缺失！
-resolution.depends.mismatch={0} {1} 需要 {3} {2}，但只有錯誤的版本可用：{4}！
-resolution.depends.invalid={0} {1} 需要 {3} {2}，由於其他限制條件無法載入！
-resolution.depends.suggestion=你需要安裝 {2} {3} 版本。
-
-resolution.recommends.envDisabled={0} {1} 建議安裝 {3} {2}，但該版本在此環境中被停用（僅適用於用戶端／伺服器）！
-resolution.recommends.missing={0} {1} 建議安裝 {3} {2}，但該版本缺失！
-resolution.recommends.mismatch={0} {1} 建議安裝 {3} {2}，但只有錯誤的版本可用：{4}！
-resolution.recommends.invalid={0} {1} 建議安裝 {3} {2}，由於其他限制條件無法載入！
-resolution.recommends.suggestion=為了最佳體驗，你應安裝 {2} {3} 版本。
-
-resolution.breaks.invalid={0} {1} 與 {3} {2} 不相容，但有匹配的版本可用：{4}！
-resolution.breaks.suggestion={0} 的開發者發現這種組合不起作用。你需要刪除其中一個模組，或檢查解決此問題的更新。
-
-resolution.conflicts.invalid={0} {1} 與 {3} {2} 衝突，其具體版本為：{4}！
-resolution.conflicts.suggestion=儘管這不會阻止遊戲啟動，但{0} 的開發者發現這種組合可能引起問題。你應刪除其中一個模組，或檢查解決此問題的更新。
-
-## mod version
-resolution.jij.builtin={0} {1} 是環境參考，通常需要安裝或變更啟動器以進行調整
-## (no args)
-resolution.jij.builtinNoMention=環境參考，通常需要安裝或變更啟動器以進行調整
-## mod version path
-resolution.jij.root={0} {1} 正在從 {2} 載入
-## path
-resolution.jij.rootNoMention=正在從 {0} 載入
-## mod version path
-resolution.jij.normal={0} {1} 通過 {2} 等方式提供
-## path
-resolution.jij.normalNoMention=通過 {0} 等方式提供
-
-## mod version reason
-resolution.inactive={0} {1}，原因：{2}
-## (no args)
-resolution.inactive.inactive_parent=停用的父模組（嵌套的 JAR 檔案）
-resolution.inactive.incompatible=不相容
-resolution.inactive.newer_active=較新版本已啟用
-resolution.inactive.same_active=相同版本已啟用
-resolution.inactive.to_remove=待移除
-resolution.inactive.to_replace=待替換
-resolution.inactive.unknown=未知
-resolution.inactive.wrong_environment=錯誤的環境（僅適用於用戶端／伺服器）
-
-resolution.type.mod=模組
-
-resolution.version.any=所有版本
-resolution.version.none=無法滿足的版本範圍
-## version
-resolution.version.equal=版本 {0}
-## lowerBound
-resolution.version.greater=任何大於 {0} 的版本
-## lowerBound
-resolution.version.greaterEqual=版本 {0} 以上（含）
-## upperBound
-resolution.version.less=低於 {0} 的所有版本
-## upperBound
-resolution.version.lessEqual=版本 {0} 以下（含）
-## majorVersion
-resolution.version.major=任何 {0}.x 版本
-## majorVersion minorVersion
-resolution.version.majorMinor=任何 {0}.{1}.x 版本
-## lowerBound upperBound
-resolution.version.rangeMinIncMaxInc=從 {0}（含）到 {1}（含）的版本
-resolution.version.rangeMinIncMaxExc=從 {0}（含）到 {1}（不含）的版本
-resolution.version.rangeMinExcMaxInc=從 {0}（含）到 {1}（不含）的版本
-resolution.version.rangeMinExcMaxExc=從 {0}（不含）到{1}（不含）的版本
-
-## a b
-enumerationAnd.2={0} 和 {1}
-## a b c
-enumerationAnd.3={0}、{1} 和 {2}
-## first
-enumerationAnd.nPrefix={0}
-## allPrev cur
-enumerationAnd.n={0}、{1}
-## allPrev last
-enumerationAnd.nSuffix={0} 和 {1}
-## a b
-enumerationOr.2={0}、{1}
-## a b c
-enumerationOr.3={0}、{1} 或 {2}
-## first
-enumerationOr.nPrefix={0}
-## allPrev cur
-enumerationOr.n={0}、{1}
-## allPrev last
-enumerationOr.nSuffix={0} 或 {1}
diff --git a/src/main/java/net/fabricmc/loader/ModContainer.java b/src/main/java/net/fabricmc/loader/ModContainer.java
deleted file mode 100644
index e9f42138888b431ab8f1844eb0b67c298b9acb1a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/ModContainer.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*    */ package net.fabricmc.loader;
-/*    */ 
-/*    */ import java.net.MalformedURLException;
-/*    */ import java.net.URL;
-/*    */ import java.nio.file.Path;
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.api.ModContainer;
-/*    */ import net.fabricmc.loader.impl.util.UrlUtil;
-/*    */ import net.fabricmc.loader.metadata.LoaderModMetadata;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public abstract class ModContainer
-/*    */   implements ModContainer
-/*    */ {
-/*    */   public abstract LoaderModMetadata getInfo();
-/*    */   
-/*    */   protected abstract List<Path> getCodeSourcePaths();
-/*    */   
-/*    */   public URL getOriginUrl() {
-/*    */     try {
-/* 37 */       return UrlUtil.asUrl(getCodeSourcePaths().get(0));
-/* 38 */     } catch (MalformedURLException e) {
-/* 39 */       throw new RuntimeException(e);
-/*    */     } 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\ModContainer.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java b/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java
index ec66d2c311fde9ada0e3666353a46e2c0b6472d1..ed69063cae1210b7a583e23bf112e2421cd089b2 100644
--- a/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java
+++ b/src/main/java/net/fabricmc/loader/impl/FabricLoaderImpl.java
@@ -20,7 +20,7 @@
 /*     */ import java.util.function.Consumer;
 /*     */ import java.util.stream.Collectors;
 /*     */ import net.fabricmc.api.EnvType;
-/*     */ import net.fabricmc.loader.FabricLoader;
+/*     */ import net.fabricmc.loader.api.FabricLoader;
 /*     */ import net.fabricmc.loader.api.LanguageAdapter;
 /*     */ import net.fabricmc.loader.api.MappingResolver;
 /*     */ import net.fabricmc.loader.api.ModContainer;
@@ -29,7 +29,6 @@
 /*     */ import net.fabricmc.loader.impl.discovery.ArgumentModCandidateFinder;
 /*     */ import net.fabricmc.loader.impl.discovery.ClasspathModCandidateFinder;
 /*     */ import net.fabricmc.loader.impl.discovery.DirectoryModCandidateFinder;
-/*     */ import net.fabricmc.loader.impl.discovery.ModCandidateFinder;
 /*     */ import net.fabricmc.loader.impl.discovery.ModCandidateImpl;
 /*     */ import net.fabricmc.loader.impl.discovery.ModDiscoverer;
 /*     */ import net.fabricmc.loader.impl.discovery.ModResolutionException;
@@ -69,8 +68,8 @@
 /*     */ 
 /*     */ 
 /*     */ public final class FabricLoaderImpl
-/*     */   extends FabricLoader
-/*     */ {
+/*     */ implements FabricLoader
+    /*     */ {
 /*  74 */   public static final FabricLoaderImpl INSTANCE = InitHelper.get();
 /*     */   
 /*     */   public static final int ASM_VERSION = 589824;
@@ -208,9 +207,9 @@
 /*     */ 
 /*     */     
 /* 210 */     ModDiscoverer discoverer = new ModDiscoverer(versionOverrides, depOverrides);
-/* 211 */     discoverer.addCandidateFinder((ModCandidateFinder)new ClasspathModCandidateFinder());
-/* 212 */     discoverer.addCandidateFinder((ModCandidateFinder)new DirectoryModCandidateFinder(getModsDirectory0(), remapRegularMods));
-/* 213 */     discoverer.addCandidateFinder((ModCandidateFinder)new ArgumentModCandidateFinder(remapRegularMods));
+/* 211 */     discoverer.addCandidateFinder((ClasspathModCandidateFinder)new ClasspathModCandidateFinder());
+/* 212 */     discoverer.addCandidateFinder((DirectoryModCandidateFinder)new DirectoryModCandidateFinder(getModsDirectory0(), remapRegularMods));
+/* 213 */     discoverer.addCandidateFinder((ArgumentModCandidateFinder)new ArgumentModCandidateFinder(remapRegularMods));
 /*     */     
 /* 215 */     Map<String, Set<ModCandidateImpl>> envDisabledMods = new HashMap<>();
 /* 216 */     this.modCandidates = discoverer.discoverMods(this, envDisabledMods);
@@ -485,7 +484,7 @@
 /*     */         }
 /*     */         
 /*     */         try {
-/* 488 */           this.adapterMap.put(laEntry.getKey(), Class.forName(laEntry.getValue(), true, FabricLauncherBase.getLauncher().getTargetClassLoader()).getDeclaredConstructor(new Class[0]).newInstance(new Object[0]));
+/* 488 */           this.adapterMap.put(laEntry.getKey(), (LanguageAdapter) Class.forName(laEntry.getValue(), true, FabricLauncherBase.getLauncher().getTargetClassLoader()).getDeclaredConstructor(new Class[0]).newInstance(new Object[0]));
 /* 489 */         } catch (Exception e) {
 /* 490 */           throw new RuntimeException("Failed to instantiate language adapter: " + (String)laEntry.getKey(), e);
 /*     */         } 
@@ -641,4 +640,4 @@
 /* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\FabricLoaderImpl.class
  * Java compiler version: 8 (52.0)
  * JD-Core Version:       1.1.3
- */
\ No newline at end of file
+ */
diff --git a/src/main/java/net/fabricmc/loader/impl/discovery/RuntimeModRemapper.java b/src/main/java/net/fabricmc/loader/impl/discovery/RuntimeModRemapper.java
index ff76c27a8368ea7638028ac500905c3b262a88e4..bcfe35d32b5e453f5dbfc4284b69d578c9ac7b5c 100644
--- a/src/main/java/net/fabricmc/loader/impl/discovery/RuntimeModRemapper.java
+++ b/src/main/java/net/fabricmc/loader/impl/discovery/RuntimeModRemapper.java
@@ -275,4 +275,4 @@
 /* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\discovery\RuntimeModRemapper.class
  * Java compiler version: 8 (52.0)
  * JD-Core Version:       1.1.3
- */
\ No newline at end of file
+ */
diff --git a/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java b/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java
index 461becbfbda282d13e5977c888d6f2c24c31b56e..4d056e500dac22a9e6bbd9dd7d7fb01abf7dfdf7 100644
--- a/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java
+++ b/src/main/java/net/fabricmc/loader/impl/game/minecraft/patch/EntrypointPatch.java
@@ -388,7 +388,7 @@
 /* 388 */           ListIterator<AbstractInsnNode> serverStartIt = serverStartMethod.instructions.iterator();
 /*     */ 
 /*     */           
-/* 391 */           MethodInsnNode dedicatedServerConstructor = (MethodInsnNode)findInsn(serverStartMethod, insn -> { if (insn instanceof MethodInsnNode && ((MethodInsnNode)insn).name.equals("<init>")) { Type constructorType = Type.getMethodType(((MethodInsnNode)insn).desc); return ((constructorType.getArgumentTypes()).length <= 0) ? false : constructorType.getArgumentTypes()[0].getDescriptor().equals("Ljava/lang/Thread;"); }  return false; }false);
+/* 391 */           MethodInsnNode dedicatedServerConstructor = (MethodInsnNode)findInsn(serverStartMethod, insn -> { if (insn instanceof MethodInsnNode && ((MethodInsnNode)insn).name.equals("<init>")) { Type constructorType = Type.getMethodType(((MethodInsnNode)insn).desc); return ((constructorType.getArgumentTypes()).length <= 0) ? false : constructorType.getArgumentTypes()[0].getDescriptor().equals("Ljava/lang/Thread;"); }  return false; }, false);
 /*     */ 
 /*     */ 
 /*     */ 
@@ -587,4 +587,4 @@
 /* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\game\minecraft\patch\EntrypointPatch.class
  * Java compiler version: 8 (52.0)
  * JD-Core Version:       1.1.3
- */
\ No newline at end of file
+ */
diff --git a/src/main/java/net/fabricmc/loader/impl/gui/FabricGuiEntry.java b/src/main/java/net/fabricmc/loader/impl/gui/FabricGuiEntry.java
index 5359fc023ae0119db32b97b5713f42df0b793c2c..4bdead1d02a9bcd275029e4ca9c1bb896c0baaee 100644
--- a/src/main/java/net/fabricmc/loader/impl/gui/FabricGuiEntry.java
+++ b/src/main/java/net/fabricmc/loader/impl/gui/FabricGuiEntry.java
@@ -105,7 +105,7 @@
 /*     */   }
 /*     */   
 /*     */   public static void displayError(String mainText, Throwable exception, boolean exitAfter) {
-/* 108 */     displayError(mainText, exception, tree -> { StringWriter error = new StringWriter(); error.append(mainText); if (exception != null) { error.append(System.lineSeparator()); exception.printStackTrace(new PrintWriter(error)); }  tree.addButton(Localization.format("gui.button.copyError", new Object[0]), FabricStatusTree.FabricBasicButtonType.CLICK_MANY).withClipboard(error.toString()); }exitAfter);
+/* 108 */     displayError(mainText, exception, tree -> { StringWriter error = new StringWriter(); error.append(mainText); if (exception != null) { error.append(System.lineSeparator()); exception.printStackTrace(new PrintWriter(error)); }  tree.addButton(Localization.format("gui.button.copyError", new Object[0]), FabricStatusTree.FabricBasicButtonType.CLICK_MANY).withClipboard(error.toString()); }, exitAfter);
 /*     */   }
 /*     */ 
 /*     */ 
@@ -157,4 +157,4 @@
 /* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\gui\FabricGuiEntry.class
  * Java compiler version: 8 (52.0)
  * JD-Core Version:       1.1.3
- */
\ No newline at end of file
+ */
diff --git a/src/main/java/net/fabricmc/loader/impl/gui/FabricStatusTree.java b/src/main/java/net/fabricmc/loader/impl/gui/FabricStatusTree.java
index 7b2e29c110ddcccb5f35f2bf908ff46c7d446f62..dc541346c27e4ea533db9d012f0f2e33336e8c9d 100644
--- a/src/main/java/net/fabricmc/loader/impl/gui/FabricStatusTree.java
+++ b/src/main/java/net/fabricmc/loader/impl/gui/FabricStatusTree.java
@@ -359,7 +359,7 @@
 /*     */     }
 /*     */     
 /*     */     public FabricStatusNode addCleanedException(Throwable exception) {
-/* 362 */       return addException(this, Collections.newSetFromMap(new IdentityHashMap<>()), exception, e -> { Throwable cause; while ((cause = e.getCause()) != null && (e.getSuppressed()).length <= 0) { String msg = e.getMessage(); if (msg == null) msg = e.getClass().getName();  if (!msg.equals(cause.getMessage()) && !msg.equals(cause.toString())) break;  e = cause; }  return e; }new StackTraceElement[0]);
+/* 362 */       return addException(this, Collections.newSetFromMap(new IdentityHashMap<>()), exception, e -> { Throwable cause; while ((cause = e.getCause()) != null && (e.getSuppressed()).length <= 0) { String msg = e.getMessage(); if (msg == null) msg = e.getClass().getName();  if (!msg.equals(cause.getMessage()) && !msg.equals(cause.toString())) break;  e = cause; }  return e; }, new StackTraceElement[0]);
 /*     */     }
 /*     */ 
 /*     */ 
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidener.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidener.java
deleted file mode 100644
index 1d4eb109a85b41fe43856b34292a638ec64fe0df..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidener.java
+++ /dev/null
@@ -1,326 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.accesswidener;
-/*     */ 
-/*     */ import java.util.HashMap;
-/*     */ import java.util.LinkedHashSet;
-/*     */ import java.util.Map;
-/*     */ import java.util.Set;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class AccessWidener
-/*     */   implements AccessWidenerVisitor
-/*     */ {
-/*     */   String namespace;
-/*  30 */   final Map<String, Access> classAccess = new HashMap<>();
-/*  31 */   final Map<EntryTriple, Access> methodAccess = new HashMap<>();
-/*  32 */   final Map<EntryTriple, Access> fieldAccess = new HashMap<>();
-/*     */ 
-/*     */   
-/*  35 */   final Set<String> classes = new LinkedHashSet<>();
-/*     */ 
-/*     */   
-/*     */   public void visitHeader(String namespace) {
-/*  39 */     if (this.namespace != null && !this.namespace.equals(namespace)) {
-/*  40 */       throw new RuntimeException(String.format("Namespace mismatch, expected %s got %s", new Object[] { this.namespace, namespace }));
-/*     */     }
-/*     */     
-/*  43 */     this.namespace = namespace;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitClass(String name, AccessWidenerReader.AccessType access, boolean transitive) {
-/*  48 */     this.classAccess.put(name, applyAccess(access, this.classAccess.getOrDefault(name, ClassAccess.DEFAULT), null));
-/*  49 */     addTargets(name);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitMethod(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {
-/*  54 */     addOrMerge(this.methodAccess, new EntryTriple(owner, name, descriptor), access, MethodAccess.DEFAULT);
-/*  55 */     addTargets(owner);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitField(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {
-/*  60 */     addOrMerge(this.fieldAccess, new EntryTriple(owner, name, descriptor), access, FieldAccess.DEFAULT);
-/*  61 */     addTargets(owner);
-/*     */   }
-/*     */   
-/*     */   private void addTargets(String clazz) {
-/*  65 */     clazz = clazz.replace('/', '.');
-/*  66 */     this.classes.add(clazz);
-/*     */ 
-/*     */     
-/*  69 */     while (clazz.contains("$")) {
-/*  70 */       clazz = clazz.substring(0, clazz.lastIndexOf("$"));
-/*  71 */       this.classes.add(clazz);
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   void addOrMerge(Map<EntryTriple, Access> map, EntryTriple entry, AccessWidenerReader.AccessType access, Access defaultAccess) {
-/*  76 */     if (entry == null || access == null) {
-/*  77 */       throw new RuntimeException("Input entry or access is null");
-/*     */     }
-/*     */     
-/*  80 */     map.put(entry, applyAccess(access, map.getOrDefault(entry, defaultAccess), entry));
-/*     */   }
-/*     */   
-/*     */   Access applyAccess(AccessWidenerReader.AccessType input, Access access, EntryTriple entryTriple) {
-/*  84 */     switch (input) {
-/*     */       case ACCESSIBLE:
-/*  86 */         makeClassAccessible(entryTriple);
-/*  87 */         return access.makeAccessible();
-/*     */       case EXTENDABLE:
-/*  89 */         makeClassExtendable(entryTriple);
-/*  90 */         return access.makeExtendable();
-/*     */       case MUTABLE:
-/*  92 */         return access.makeMutable();
-/*     */     } 
-/*  94 */     throw new UnsupportedOperationException("Unknown access type:" + input);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private void makeClassAccessible(EntryTriple entryTriple) {
-/*  99 */     if (entryTriple == null)
-/* 100 */       return;  this.classAccess.put(entryTriple.getOwner(), applyAccess(AccessWidenerReader.AccessType.ACCESSIBLE, this.classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));
-/*     */   }
-/*     */   
-/*     */   private void makeClassExtendable(EntryTriple entryTriple) {
-/* 104 */     if (entryTriple == null)
-/* 105 */       return;  this.classAccess.put(entryTriple.getOwner(), applyAccess(AccessWidenerReader.AccessType.EXTENDABLE, this.classAccess.getOrDefault(entryTriple.getOwner(), ClassAccess.DEFAULT), null));
-/*     */   }
-/*     */   
-/*     */   Access getClassAccess(String className) {
-/* 109 */     return this.classAccess.getOrDefault(className, ClassAccess.DEFAULT);
-/*     */   }
-/*     */   
-/*     */   Access getFieldAccess(EntryTriple entryTriple) {
-/* 113 */     return this.fieldAccess.getOrDefault(entryTriple, FieldAccess.DEFAULT);
-/*     */   }
-/*     */   
-/*     */   Access getMethodAccess(EntryTriple entryTriple) {
-/* 117 */     return this.methodAccess.getOrDefault(entryTriple, MethodAccess.DEFAULT);
-/*     */   }
-/*     */   
-/*     */   public Set<String> getTargets() {
-/* 121 */     return this.classes;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private static int makePublic(int i) {
-/* 129 */     return i & 0xFFFFFFF9 | 0x1;
-/*     */   }
-/*     */   
-/*     */   private static int makeProtected(int i) {
-/* 133 */     if ((i & 0x1) != 0)
-/*     */     {
-/* 135 */       return i;
-/*     */     }
-/*     */     
-/* 138 */     return i & 0xFFFFFFFD | 0x4;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private static int makeFinalIfPrivate(int access, String name, int ownerAccess) {
-/* 143 */     if (name.equals("<init>")) {
-/* 144 */       return access;
-/*     */     }
-/*     */ 
-/*     */     
-/* 148 */     if ((ownerAccess & 0x200) != 0 || (access & 0x8) != 0) {
-/* 149 */       return access;
-/*     */     }
-/*     */     
-/* 152 */     if ((access & 0x2) != 0) {
-/* 153 */       return access | 0x10;
-/*     */     }
-/*     */     
-/* 156 */     return access;
-/*     */   }
-/*     */   
-/*     */   private static int removeFinal(int i) {
-/* 160 */     return i & 0xFFFFFFEF;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   enum ClassAccess
-/*     */     implements Access
-/*     */   {
-/*     */     DEFAULT, ACCESSIBLE, EXTENDABLE, ACCESSIBLE_EXTENDABLE;
-/*     */     
-/*     */     private final AccessOperator operator;
-/*     */     
-/*     */     static {
-/* 172 */       DEFAULT = new ClassAccess("DEFAULT", 0, (access, name, ownerAccess) -> access);
-/* 173 */       ACCESSIBLE = new ClassAccess("ACCESSIBLE", 1, (access, name, ownerAccess) -> AccessWidener.makePublic(access));
-/* 174 */       EXTENDABLE = new ClassAccess("EXTENDABLE", 2, (access, name, ownerAccess) -> AccessWidener.makePublic(AccessWidener.removeFinal(access)));
-/* 175 */       ACCESSIBLE_EXTENDABLE = new ClassAccess("ACCESSIBLE_EXTENDABLE", 3, (access, name, ownerAccess) -> AccessWidener.makePublic(AccessWidener.removeFinal(access)));
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     ClassAccess(AccessOperator operator) {
-/* 180 */       this.operator = operator;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeAccessible() {
-/* 185 */       if (this == EXTENDABLE || this == ACCESSIBLE_EXTENDABLE) {
-/* 186 */         return ACCESSIBLE_EXTENDABLE;
-/*     */       }
-/*     */       
-/* 189 */       return ACCESSIBLE;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeExtendable() {
-/* 194 */       if (this == ACCESSIBLE || this == ACCESSIBLE_EXTENDABLE) {
-/* 195 */         return ACCESSIBLE_EXTENDABLE;
-/*     */       }
-/*     */       
-/* 198 */       return EXTENDABLE;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeMutable() {
-/* 203 */       throw new UnsupportedOperationException("Classes cannot be made mutable");
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public int apply(int access, String targetName, int ownerAccess) {
-/* 208 */       return this.operator.apply(access, targetName, ownerAccess);
-/*     */     } }
-/*     */   enum MethodAccess implements Access { DEFAULT, ACCESSIBLE, EXTENDABLE, ACCESSIBLE_EXTENDABLE;
-/*     */     
-/*     */     static {
-/* 213 */       DEFAULT = new MethodAccess("DEFAULT", 0, (access, name, ownerAccess) -> access);
-/* 214 */       ACCESSIBLE = new MethodAccess("ACCESSIBLE", 1, (access, name, ownerAccess) -> AccessWidener.makePublic(AccessWidener.makeFinalIfPrivate(access, name, ownerAccess)));
-/* 215 */       EXTENDABLE = new MethodAccess("EXTENDABLE", 2, (access, name, ownerAccess) -> AccessWidener.makeProtected(AccessWidener.removeFinal(access)));
-/* 216 */       ACCESSIBLE_EXTENDABLE = new MethodAccess("ACCESSIBLE_EXTENDABLE", 3, (access, name, owner) -> AccessWidener.makePublic(AccessWidener.removeFinal(access)));
-/*     */     }
-/*     */     private final AccessOperator operator;
-/*     */     
-/*     */     MethodAccess(AccessOperator operator) {
-/* 221 */       this.operator = operator;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeAccessible() {
-/* 226 */       if (this == EXTENDABLE || this == ACCESSIBLE_EXTENDABLE) {
-/* 227 */         return ACCESSIBLE_EXTENDABLE;
-/*     */       }
-/*     */       
-/* 230 */       return ACCESSIBLE;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeExtendable() {
-/* 235 */       if (this == ACCESSIBLE || this == ACCESSIBLE_EXTENDABLE) {
-/* 236 */         return ACCESSIBLE_EXTENDABLE;
-/*     */       }
-/*     */       
-/* 239 */       return EXTENDABLE;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeMutable() {
-/* 244 */       throw new UnsupportedOperationException("Methods cannot be made mutable");
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public int apply(int access, String targetName, int ownerAccess) {
-/* 249 */       return this.operator.apply(access, targetName, ownerAccess);
-/*     */     } }
-/*     */   enum FieldAccess implements Access { DEFAULT, ACCESSIBLE, MUTABLE, ACCESSIBLE_MUTABLE; private final AccessOperator operator;
-/*     */     
-/*     */     static {
-/* 254 */       DEFAULT = new FieldAccess("DEFAULT", 0, (access, name, ownerAccess) -> access);
-/* 255 */       ACCESSIBLE = new FieldAccess("ACCESSIBLE", 1, (access, name, ownerAccess) -> AccessWidener.makePublic(access));
-/* 256 */       MUTABLE = new FieldAccess("MUTABLE", 2, (access, name, ownerAccess) -> 
-/* 257 */           ((ownerAccess & 0x200) != 0 && (access & 0x8) != 0) ? access : AccessWidener.removeFinal(access));
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/* 264 */       ACCESSIBLE_MUTABLE = new FieldAccess("ACCESSIBLE_MUTABLE", 3, (access, name, ownerAccess) -> 
-/* 265 */           ((ownerAccess & 0x200) != 0 && (access & 0x8) != 0) ? AccessWidener.makePublic(access) : AccessWidener.makePublic(AccessWidener.removeFinal(access)));
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     FieldAccess(AccessOperator operator) {
-/* 276 */       this.operator = operator;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeAccessible() {
-/* 281 */       if (this == MUTABLE || this == ACCESSIBLE_MUTABLE) {
-/* 282 */         return ACCESSIBLE_MUTABLE;
-/*     */       }
-/*     */       
-/* 285 */       return ACCESSIBLE;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeExtendable() {
-/* 290 */       throw new UnsupportedOperationException("Fields cannot be made extendable");
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public Access makeMutable() {
-/* 295 */       if (this == ACCESSIBLE || this == ACCESSIBLE_MUTABLE) {
-/* 296 */         return ACCESSIBLE_MUTABLE;
-/*     */       }
-/*     */       
-/* 299 */       return MUTABLE;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public int apply(int access, String targetName, int ownerAccess) {
-/* 304 */       return this.operator.apply(access, targetName, ownerAccess);
-/*     */     } }
-/*     */ 
-/*     */   
-/*     */   static interface Access extends AccessOperator {
-/*     */     Access makeAccessible();
-/*     */     
-/*     */     Access makeExtendable();
-/*     */     
-/*     */     Access makeMutable();
-/*     */   }
-/*     */   
-/*     */   @FunctionalInterface
-/*     */   static interface AccessOperator {
-/*     */     int apply(int param1Int1, String param1String, int param1Int2);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\AccessWidener.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerClassVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerClassVisitor.java
deleted file mode 100644
index a496760fd1b270cb55632b0c069decc8eda61489..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerClassVisitor.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.accesswidener;
-/*     */ 
-/*     */ import org.objectweb.asm.ClassVisitor;
-/*     */ import org.objectweb.asm.FieldVisitor;
-/*     */ import org.objectweb.asm.Handle;
-/*     */ import org.objectweb.asm.MethodVisitor;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class AccessWidenerClassVisitor
-/*     */   extends ClassVisitor
-/*     */ {
-/*     */   private final AccessWidener accessWidener;
-/*     */   private String className;
-/*     */   private int classAccess;
-/*     */   
-/*     */   AccessWidenerClassVisitor(int api, ClassVisitor classVisitor, AccessWidener accessWidener) {
-/*  34 */     super(api, classVisitor);
-/*  35 */     this.accessWidener = accessWidener;
-/*     */   }
-/*     */   
-/*     */   public static ClassVisitor createClassVisitor(int api, ClassVisitor visitor, AccessWidener accessWidener) {
-/*  39 */     return new AccessWidenerClassVisitor(api, visitor, accessWidener);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
-/*  44 */     this.className = name;
-/*  45 */     this.classAccess = access;
-/*     */     
-/*  47 */     super.visit(version, this.accessWidener
-/*     */         
-/*  49 */         .getClassAccess(name).apply(access, name, this.classAccess), name, signature, superName, interfaces);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void visitPermittedSubclass(String permittedSubclass) {
-/*  59 */     AccessWidener.Access access = this.accessWidener.getClassAccess(this.className);
-/*     */     
-/*  61 */     if (access == AccessWidener.ClassAccess.EXTENDABLE || access == AccessWidener.ClassAccess.ACCESSIBLE_EXTENDABLE) {
-/*     */       return;
-/*     */     }
-/*     */     
-/*  65 */     super.visitPermittedSubclass(permittedSubclass);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitInnerClass(String name, String outerName, String innerName, int access) {
-/*  70 */     super.visitInnerClass(name, outerName, innerName, this.accessWidener
-/*     */ 
-/*     */ 
-/*     */         
-/*  74 */         .getClassAccess(name).apply(access, name, this.classAccess));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {
-/*  80 */     return super.visitField(this.accessWidener
-/*  81 */         .getFieldAccess(new EntryTriple(this.className, name, descriptor)).apply(access, name, this.classAccess), name, descriptor, signature, value);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
-/*  91 */     return new AccessWidenerMethodVisitor(super.visitMethod(this.accessWidener
-/*  92 */           .getMethodAccess(new EntryTriple(this.className, name, descriptor)).apply(access, name, this.classAccess), name, descriptor, signature, exceptions));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private class AccessWidenerMethodVisitor
-/*     */     extends MethodVisitor
-/*     */   {
-/*     */     AccessWidenerMethodVisitor(MethodVisitor methodVisitor) {
-/* 102 */       super(AccessWidenerClassVisitor.this.api, methodVisitor);
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public void visitMethodInsn(int opcode, String owner, String name, String descriptor, boolean isInterface) {
-/* 107 */       if (opcode == 183 && isTargetMethod(owner, name, descriptor)) {
-/* 108 */         opcode = 182;
-/*     */       }
-/*     */       
-/* 111 */       super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public void visitInvokeDynamicInsn(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments) {
-/* 116 */       for (int i = 0; i < bootstrapMethodArguments.length; i++) {
-/* 117 */         if (bootstrapMethodArguments[i] instanceof Handle) {
-/* 118 */           Handle handle = (Handle)bootstrapMethodArguments[i];
-/*     */           
-/* 120 */           if (handle.getTag() == 7 && isTargetMethod(handle.getOwner(), handle.getName(), handle.getDesc())) {
-/* 121 */             bootstrapMethodArguments[i] = new Handle(5, handle.getOwner(), handle.getName(), handle.getDesc(), handle.isInterface());
-/*     */           }
-/*     */         } 
-/*     */       } 
-/*     */       
-/* 126 */       super.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments);
-/*     */     }
-/*     */     
-/*     */     private boolean isTargetMethod(String owner, String name, String descriptor) {
-/* 130 */       return (owner.equals(AccessWidenerClassVisitor.this.className) && !name.equals("<init>") && AccessWidenerClassVisitor.this.accessWidener.getMethodAccess(new EntryTriple(owner, name, descriptor)) != AccessWidener.MethodAccess.DEFAULT);
-/*     */     }
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\AccessWidenerClassVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerFormatException.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerFormatException.java
deleted file mode 100644
index 3351e296bacc7082f44cdfc3f59d928226f32fb4..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerFormatException.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.accesswidener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class AccessWidenerFormatException
-/*    */   extends RuntimeException
-/*    */ {
-/*    */   private final int lineNumber;
-/*    */   
-/*    */   public AccessWidenerFormatException(int lineNumber, String message) {
-/* 26 */     super(message);
-/* 27 */     this.lineNumber = lineNumber;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 39 */     return getClass().getName() + ": line " + this.lineNumber + ": " + getMessage();
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\AccessWidenerFormatException.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerReader.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerReader.java
deleted file mode 100644
index 6df7fc23fb2ce21e19015c25543f422b7dda8913..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerReader.java
+++ /dev/null
@@ -1,310 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.accesswidener;
-/*     */ 
-/*     */ import java.io.BufferedReader;
-/*     */ import java.io.IOException;
-/*     */ import java.io.StringReader;
-/*     */ import java.nio.charset.Charset;
-/*     */ import java.nio.charset.StandardCharsets;
-/*     */ import java.util.Arrays;
-/*     */ import java.util.List;
-/*     */ import java.util.Locale;
-/*     */ import java.util.regex.Pattern;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class AccessWidenerReader
-/*     */ {
-/*  30 */   public static final Charset ENCODING = StandardCharsets.UTF_8;
-/*     */ 
-/*     */   
-/*  33 */   private static final Pattern V1_DELIMITER = Pattern.compile("\\s+");
-/*     */   
-/*  35 */   private static final Pattern V2_DELIMITER = Pattern.compile("[ \\t]+");
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private final AccessWidenerVisitor visitor;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private int lineNumber;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public AccessWidenerReader(AccessWidenerVisitor visitor) {
-/*  48 */     this.visitor = visitor;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void read(byte[] content) {
-/*  60 */     read(content, (String)null);
-/*     */   }
-/*     */   
-/*     */   public void read(byte[] content, String currentNamespace) {
-/*  64 */     String strContent = new String(content, ENCODING);
-/*     */     
-/*     */     try {
-/*  67 */       read(new BufferedReader(new StringReader(strContent)), currentNamespace);
-/*  68 */     } catch (IOException e) {
-/*  69 */       throw new RuntimeException(e);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void read(BufferedReader reader, String currentNamespace) throws IOException {
-/*  78 */     Header header = readHeader(reader);
-/*  79 */     this.lineNumber = 1;
-/*     */     
-/*  81 */     int version = header.version;
-/*     */     
-/*  83 */     if (currentNamespace != null && !header.namespace.equals(currentNamespace)) {
-/*  84 */       throw error("Namespace (%s) does not match current runtime namespace (%s)", new Object[] { Header.access$100(header), currentNamespace });
-/*     */     }
-/*     */     
-/*  87 */     this.visitor.visitHeader(header.namespace);
-/*     */ 
-/*     */ 
-/*     */     
-/*  91 */     Pattern delimiter = (version < 2) ? V1_DELIMITER : V2_DELIMITER;
-/*     */     String line;
-/*  93 */     while ((line = reader.readLine()) != null) {
-/*  94 */       this.lineNumber++;
-/*     */       
-/*  96 */       line = handleComment(version, line);
-/*     */       
-/*  98 */       if (line.isEmpty()) {
-/*     */         continue;
-/*     */       }
-/*     */       
-/* 102 */       if (Character.isWhitespace(line.codePointAt(0))) {
-/* 103 */         throw error("Leading whitespace is not allowed", new Object[0]);
-/*     */       }
-/*     */ 
-/*     */       
-/* 107 */       List<String> tokens = Arrays.asList(delimiter.split(line));
-/*     */       
-/* 109 */       String accessType = tokens.get(0);
-/*     */       
-/* 111 */       boolean transitive = false;
-/*     */       
-/* 113 */       if (version >= 2)
-/*     */       {
-/* 115 */         if (accessType.startsWith("transitive-")) {
-/* 116 */           accessType = accessType.substring("transitive-".length());
-/* 117 */           transitive = true;
-/*     */         } 
-/*     */       }
-/*     */       
-/* 121 */       AccessType access = readAccessType(accessType);
-/*     */       
-/* 123 */       if (tokens.size() < 2) {
-/* 124 */         throw error("Expected <class|field|method> following " + (String)tokens.get(0), new Object[0]);
-/*     */       }
-/*     */       
-/* 127 */       switch ((String)tokens.get(1)) {
-/*     */         case "class":
-/* 129 */           handleClass(line, tokens, transitive, access);
-/*     */           continue;
-/*     */         case "field":
-/* 132 */           handleField(line, tokens, transitive, access);
-/*     */           continue;
-/*     */         case "method":
-/* 135 */           handleMethod(line, tokens, transitive, access);
-/*     */           continue;
-/*     */       } 
-/* 138 */       throw error("Unsupported type: '" + (String)tokens.get(1) + "'", new Object[0]);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static Header readHeader(BufferedReader reader) throws IOException {
-/*     */     int version;
-/* 154 */     String headerLine = reader.readLine();
-/* 155 */     String[] header = headerLine.split("\\s+");
-/*     */     
-/* 157 */     if (header.length != 3 || !header[0].equals("accessWidener")) {
-/* 158 */       throw new AccessWidenerFormatException(1, "Invalid access widener file header. Expected: 'accessWidener <version> <namespace>'");
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 165 */     switch (header[1]) {
-/*     */       case "v1":
-/* 167 */         version = 1;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */         
-/* 179 */         return new Header(version, header[2]);case "v2": version = 2; return new Header(version, header[2]);
-/*     */     } 
-/*     */     throw new AccessWidenerFormatException(1, "Unsupported access widener format: " + header[1]);
-/*     */   } private void handleClass(String line, List<String> tokens, boolean transitive, AccessType access) {
-/* 183 */     if (tokens.size() != 3) {
-/* 184 */       throw error("Expected (<access> class <className>) got (%s)", new Object[] { line });
-/*     */     }
-/*     */     
-/* 187 */     String name = tokens.get(2);
-/* 188 */     validateClassName(name);
-/*     */     
-/*     */     try {
-/* 191 */       this.visitor.visitClass(name, access, transitive);
-/* 192 */     } catch (Exception e) {
-/* 193 */       throw error(e.toString(), new Object[0]);
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private void handleField(String line, List<String> tokens, boolean transitive, AccessType access) {
-/* 198 */     if (tokens.size() != 5) {
-/* 199 */       throw error("Expected (<access> field <className> <fieldName> <fieldDesc>) got (%s)", new Object[] { line });
-/*     */     }
-/*     */     
-/* 202 */     String owner = tokens.get(2);
-/* 203 */     String fieldName = tokens.get(3);
-/* 204 */     String descriptor = tokens.get(4);
-/*     */     
-/* 206 */     validateClassName(owner);
-/*     */     
-/*     */     try {
-/* 209 */       this.visitor.visitField(owner, fieldName, descriptor, access, transitive);
-/* 210 */     } catch (Exception e) {
-/* 211 */       throw error(e.toString(), new Object[0]);
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private void handleMethod(String line, List<String> tokens, boolean transitive, AccessType access) {
-/* 216 */     if (tokens.size() != 5) {
-/* 217 */       throw error("Expected (<access> method <className> <methodName> <methodDesc>) got (%s)", new Object[] { line });
-/*     */     }
-/*     */     
-/* 220 */     String owner = tokens.get(2);
-/* 221 */     String methodName = tokens.get(3);
-/* 222 */     String descriptor = tokens.get(4);
-/*     */     
-/* 224 */     validateClassName(owner);
-/*     */     
-/*     */     try {
-/* 227 */       this.visitor.visitMethod(owner, methodName, descriptor, access, transitive);
-/* 228 */     } catch (Exception e) {
-/* 229 */       throw error(e.toString(), new Object[0]);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private String handleComment(int version, String line) {
-/* 235 */     int commentPos = line.indexOf('#');
-/*     */     
-/* 237 */     if (commentPos >= 0) {
-/* 238 */       line = line.substring(0, commentPos);
-/*     */ 
-/*     */ 
-/*     */       
-/* 242 */       if (version <= 1) {
-/* 243 */         line = line.trim();
-/*     */       }
-/*     */     } 
-/*     */     
-/* 247 */     return line;
-/*     */   }
-/*     */   
-/*     */   private AccessType readAccessType(String access) {
-/* 251 */     switch (access.toLowerCase(Locale.ROOT)) {
-/*     */       case "accessible":
-/* 253 */         return AccessType.ACCESSIBLE;
-/*     */       case "extendable":
-/* 255 */         return AccessType.EXTENDABLE;
-/*     */       case "mutable":
-/* 257 */         return AccessType.MUTABLE;
-/*     */     } 
-/* 259 */     throw error("Unknown access type: " + access, new Object[0]);
-/*     */   }
-/*     */   
-/*     */   public enum AccessType
-/*     */   {
-/* 264 */     ACCESSIBLE("accessible"),
-/* 265 */     EXTENDABLE("extendable"),
-/* 266 */     MUTABLE("mutable");
-/*     */     
-/*     */     private final String id;
-/*     */     
-/*     */     AccessType(String id) {
-/* 271 */       this.id = id;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public String toString() {
-/* 276 */       return this.id;
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private AccessWidenerFormatException error(String format, Object... args) {
-/* 284 */     String message = String.format(Locale.ROOT, format, args);
-/* 285 */     return new AccessWidenerFormatException(this.lineNumber, message);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private void validateClassName(String className) {
-/* 290 */     if (className.contains("."))
-/* 291 */       throw error("Class-names must be specified as a/b/C, not a.b.C, but found: %s", new Object[] { className }); 
-/*     */   }
-/*     */   
-/*     */   public static class Header
-/*     */   {
-/*     */     private final int version;
-/*     */     private final String namespace;
-/*     */     
-/*     */     Header(int version, String namespace) {
-/* 300 */       this.version = version;
-/* 301 */       this.namespace = namespace;
-/*     */     }
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\AccessWidenerReader.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerRemapper.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerRemapper.java
deleted file mode 100644
index 2fe50319e13fe0a069f1e2cee7d3df1b5028898a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerRemapper.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.accesswidener;
-/*    */ 
-/*    */ import org.objectweb.asm.commons.Remapper;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class AccessWidenerRemapper
-/*    */   implements AccessWidenerVisitor
-/*    */ {
-/*    */   private final AccessWidenerVisitor delegate;
-/*    */   private final String fromNamespace;
-/*    */   private final String toNamespace;
-/*    */   private final Remapper remapper;
-/*    */   
-/*    */   public AccessWidenerRemapper(AccessWidenerVisitor delegate, Remapper remapper, String fromNamespace, String toNamespace) {
-/* 44 */     this.delegate = delegate;
-/* 45 */     this.fromNamespace = fromNamespace;
-/* 46 */     this.toNamespace = toNamespace;
-/* 47 */     this.remapper = remapper;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitHeader(String namespace) {
-/* 52 */     if (!this.fromNamespace.equals(namespace)) {
-/* 53 */       throw new IllegalArgumentException("Cannot remap access widener from namespace '" + namespace + "'. Expected: '" + this.fromNamespace + "'");
-/*    */     }
-/*    */ 
-/*    */     
-/* 57 */     this.delegate.visitHeader(this.toNamespace);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitClass(String name, AccessWidenerReader.AccessType access, boolean transitive) {
-/* 62 */     this.delegate.visitClass(this.remapper.map(name), access, transitive);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitMethod(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {
-/* 67 */     this.delegate.visitMethod(this.remapper
-/* 68 */         .map(owner), this.remapper
-/* 69 */         .mapMethodName(owner, name, descriptor), this.remapper
-/* 70 */         .mapDesc(descriptor), access, transitive);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void visitField(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {
-/* 78 */     this.delegate.visitField(this.remapper
-/* 79 */         .map(owner), this.remapper
-/* 80 */         .mapFieldName(owner, name, descriptor), this.remapper
-/* 81 */         .mapDesc(descriptor), access, transitive);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\AccessWidenerRemapper.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerVisitor.java
deleted file mode 100644
index 0ddd5c83afd3ab75974935679d91ed147764b7d7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerVisitor.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package net.fabricmc.loader.impl.lib.accesswidener;
-
-public interface AccessWidenerVisitor {
-  default void visitHeader(String namespace) {}
-  
-  default void visitClass(String name, AccessWidenerReader.AccessType access, boolean transitive) {}
-  
-  default void visitMethod(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {}
-  
-  default void visitField(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {}
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\AccessWidenerVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerWriter.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerWriter.java
deleted file mode 100644
index f4ca3fb009d451b601ccd8ba8f286d3cf9fa5fba..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/AccessWidenerWriter.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.accesswidener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class AccessWidenerWriter
-/*    */   implements AccessWidenerVisitor
-/*    */ {
-/* 20 */   private final StringBuilder builder = new StringBuilder();
-/*    */ 
-/*    */   
-/*    */   private final int version;
-/*    */   
-/*    */   private String namespace;
-/*    */ 
-/*    */   
-/*    */   public AccessWidenerWriter(int version) {
-/* 29 */     this.version = version;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public AccessWidenerWriter() {
-/* 36 */     this(2);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitHeader(String namespace) {
-/* 41 */     if (this.namespace == null) {
-/* 42 */       this.builder.append("accessWidener\tv")
-/* 43 */         .append(this.version)
-/* 44 */         .append('\t')
-/* 45 */         .append(namespace)
-/* 46 */         .append('\n');
-/* 47 */     } else if (!this.namespace.equals(namespace)) {
-/* 48 */       throw new IllegalArgumentException("Cannot write different namespaces to the same file (" + this.namespace + " != " + namespace + ")");
-/*    */     } 
-/*    */ 
-/*    */     
-/* 52 */     this.namespace = namespace;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitClass(String name, AccessWidenerReader.AccessType access, boolean transitive) {
-/* 57 */     writeAccess(access, transitive);
-/* 58 */     this.builder.append("\tclass\t").append(name).append('\n');
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitMethod(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {
-/* 63 */     writeAccess(access, transitive);
-/* 64 */     this.builder.append("\tmethod\t").append(owner).append('\t').append(name)
-/* 65 */       .append('\t').append(descriptor).append('\n');
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitField(String owner, String name, String descriptor, AccessWidenerReader.AccessType access, boolean transitive) {
-/* 70 */     writeAccess(access, transitive);
-/* 71 */     this.builder.append("\tfield\t").append(owner).append('\t').append(name)
-/* 72 */       .append('\t').append(descriptor).append('\n');
-/*    */   }
-/*    */   
-/*    */   public byte[] write() {
-/* 76 */     return writeString().getBytes(AccessWidenerReader.ENCODING);
-/*    */   }
-/*    */   
-/*    */   public String writeString() {
-/* 80 */     if (this.namespace == null) {
-/* 81 */       throw new IllegalStateException("No namespace set. visitHeader wasn't called.");
-/*    */     }
-/*    */     
-/* 84 */     return this.builder.toString();
-/*    */   }
-/*    */   
-/*    */   private void writeAccess(AccessWidenerReader.AccessType access, boolean transitive) {
-/* 88 */     if (transitive) {
-/* 89 */       if (this.version < 2) {
-/* 90 */         throw new IllegalStateException("Cannot write transitive rule in version " + this.version);
-/*    */       }
-/*    */       
-/* 93 */       this.builder.append("transitive-");
-/*    */     } 
-/*    */     
-/* 96 */     this.builder.append(access);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\AccessWidenerWriter.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/EntryTriple.java b/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/EntryTriple.java
deleted file mode 100644
index c1ee7375fd9d308af7071c6ff069fce7b766b4a0..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/accesswidener/EntryTriple.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.accesswidener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ final class EntryTriple
-/*    */ {
-/*    */   private final String owner;
-/*    */   private final String name;
-/*    */   private final String desc;
-/*    */   
-/*    */   EntryTriple(String owner, String name, String desc) {
-/* 25 */     this.owner = owner;
-/* 26 */     this.name = name;
-/* 27 */     this.desc = desc;
-/*    */   }
-/*    */   
-/*    */   public String getOwner() {
-/* 31 */     return this.owner;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 43 */     return "EntryTriple{owner=" + this.owner + ",name=" + this.name + ",desc=" + this.desc + "}";
-/*    */   }
-/*    */   
-/*    */   public boolean equals(Object o) {
-/* 47 */     if (!(o instanceof EntryTriple))
-/* 48 */       return false; 
-/* 49 */     if (o == this) {
-/* 50 */       return true;
-/*    */     }
-/* 52 */     EntryTriple other = (EntryTriple)o;
-/* 53 */     return (other.owner.equals(this.owner) && other.name.equals(this.name) && other.desc.equals(this.desc));
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public int hashCode() {
-/* 58 */     return this.owner.hashCode() * 37 + this.name.hashCode() * 19 + this.desc.hashCode();
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\accesswidener\EntryTriple.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/FlatMappingVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/FlatMappingVisitor.java
deleted file mode 100644
index fb093d2caaaa586ebbc1968238151ec97ac7fcc5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/FlatMappingVisitor.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.util.List;
-/*     */ import java.util.Set;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public interface FlatMappingVisitor
-/*     */ {
-/*     */   default Set<MappingFlag> getFlags() {
-/*  33 */     return MappingFlag.NONE;
-/*     */   }
-/*     */   
-/*     */   default void reset() {
-/*  37 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default boolean visitHeader() throws IOException {
-/*  46 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void visitNamespaces(String paramString, List<String> paramList) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default void visitMetadata(String key, @Nullable String value) throws IOException {}
-/*     */ 
-/*     */   
-/*     */   default boolean visitContent() throws IOException {
-/*  59 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   boolean visitClass(String paramString, @Nullable String[] paramArrayOfString) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void visitClassComment(String paramString1, @Nullable String[] paramArrayOfString, String paramString2) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   boolean visitField(String paramString1, String paramString2, @Nullable String paramString3, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void visitFieldComment(String paramString1, String paramString2, @Nullable String paramString3, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3, String paramString4) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   boolean visitMethod(String paramString1, String paramString2, @Nullable String paramString3, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void visitMethodComment(String paramString1, String paramString2, @Nullable String paramString3, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3, String paramString4) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   boolean visitMethodArg(String paramString1, String paramString2, @Nullable String paramString3, int paramInt1, int paramInt2, @Nullable String paramString4, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3, String[] paramArrayOfString4) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void visitMethodArgComment(String paramString1, String paramString2, @Nullable String paramString3, int paramInt1, int paramInt2, @Nullable String paramString4, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3, @Nullable String[] paramArrayOfString4, String paramString5) throws IOException;
-/*     */ 
-/*     */   
-/*     */   boolean visitMethodVar(String paramString1, String paramString2, @Nullable String paramString3, int paramInt1, int paramInt2, int paramInt3, int paramInt4, @Nullable String paramString4, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3, String[] paramArrayOfString4) throws IOException;
-/*     */ 
-/*     */   
-/*     */   void visitMethodVarComment(String paramString1, String paramString2, @Nullable String paramString3, int paramInt1, int paramInt2, int paramInt3, int paramInt4, @Nullable String paramString4, @Nullable String[] paramArrayOfString1, @Nullable String[] paramArrayOfString2, @Nullable String[] paramArrayOfString3, @Nullable String[] paramArrayOfString4, String paramString5) throws IOException;
-/*     */ 
-/*     */   
-/*     */   default boolean visitEnd() throws IOException {
-/* 102 */     return true;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\FlatMappingVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappedElementKind.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappedElementKind.java
deleted file mode 100644
index 6524b8c8324150ecf8e52e6677656da6a3ca7547..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappedElementKind.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.mappingio;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingFlag.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingFlag.java
deleted file mode 100644
index 6524b8c8324150ecf8e52e6677656da6a3ca7547..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingFlag.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.mappingio;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingReader.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingReader.java
deleted file mode 100644
index 06d49f276408ed9953d198773c581b1d3e1bc0e1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingReader.java
+++ /dev/null
@@ -1,135 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio;
-/*     */ 
-/*     */ import java.io.BufferedReader;
-/*     */ import java.io.IOException;
-/*     */ import java.io.Reader;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.format.MappingFormat;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class MappingReader
-/*     */ {
-/*     */   @Nullable
-/*     */   public static MappingFormat detectFormat(Reader reader) throws IOException {
-/*  57 */     char[] buffer = new char[4096];
-/*  58 */     int pos = 0;
-/*     */ 
-/*     */ 
-/*     */     
-/*  62 */     BufferedReader br = (reader instanceof BufferedReader) ? (BufferedReader)reader : new BufferedReader(reader);
-/*     */     
-/*  64 */     br.mark(4096);
-/*     */     int len;
-/*  66 */     while (pos < buffer.length && (
-/*  67 */       len = br.read(buffer, pos, buffer.length - pos)) >= 0) {
-/*  68 */       pos += len;
-/*     */     }
-/*     */     
-/*  71 */     br.reset();
-/*  72 */     if (pos < 3) return null;
-/*     */     
-/*  74 */     switch (String.valueOf(buffer, 0, 3)) {
-/*     */       case "v1\t":
-/*  76 */         return MappingFormat.TINY_FILE;
-/*     */       case "tin":
-/*  78 */         return MappingFormat.TINY_2_FILE;
-/*     */       case "tsr":
-/*  80 */         return MappingFormat.TSRG_2_FILE;
-/*     */       case "CLA":
-/*  82 */         return MappingFormat.ENIGMA_FILE;
-/*     */       case "PK:":
-/*     */       case "CL:":
-/*     */       case "MD:":
-/*     */       case "FD:":
-/*  87 */         return detectSrgOrXsrg(br);
-/*     */     } 
-/*     */     
-/*  90 */     String headerStr = String.valueOf(buffer, 0, pos);
-/*     */     
-/*  92 */     if (headerStr.contains(" -> "))
-/*  93 */       return MappingFormat.PROGUARD_FILE; 
-/*  94 */     if (headerStr.contains("\n\t")) {
-/*  95 */       return MappingFormat.TSRG_FILE;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/* 100 */     return null;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private static MappingFormat detectSrgOrXsrg(BufferedReader reader) throws IOException {
-/*     */     String line;
-/* 106 */     while ((line = reader.readLine()) != null) {
-/* 107 */       if (line.startsWith("FD:")) {
-/* 108 */         String[] parts = line.split(" ");
-/*     */         
-/* 110 */         if (parts.length >= 5) {
-/* 111 */           if (isEmptyOrStartsWithHash(parts[3]) || isEmptyOrStartsWithHash(parts[4])) {
-/*     */             continue;
-/*     */           }
-/*     */           
-/* 115 */           return MappingFormat.XSRG_FILE;
-/*     */         } 
-/*     */         
-/*     */         break;
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 122 */     return MappingFormat.SRG_FILE;
-/*     */   }
-/*     */   
-/*     */   private static boolean isEmptyOrStartsWithHash(String string) {
-/* 126 */     if (string.isEmpty() || string.startsWith("#")) return true; 
-/* 127 */     return false;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\MappingReader.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingUtil.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingUtil.java
deleted file mode 100644
index 00f274e7fae64cfa40ac3965f39e7ce5ae1a8e68..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingUtil.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.mappingio;
-/*    */ 
-/*    */ import java.util.Map;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class MappingUtil
-/*    */ {
-/*    */   public static String mapDesc(String desc, Map<String, String> clsMap) {
-/* 26 */     return mapDesc(desc, 0, desc.length(), clsMap);
-/*    */   }
-/*    */   
-/*    */   public static String mapDesc(String desc, int start, int end, Map<String, String> clsMap) {
-/* 30 */     StringBuilder ret = null;
-/* 31 */     int searchStart = start;
-/*    */     
-/*    */     int clsStart;
-/* 34 */     while ((clsStart = desc.indexOf('L', searchStart)) >= 0) {
-/* 35 */       int clsEnd = desc.indexOf(';', clsStart + 1);
-/* 36 */       if (clsEnd < 0) throw new IllegalArgumentException();
-/*    */       
-/* 38 */       String cls = desc.substring(clsStart + 1, clsEnd);
-/* 39 */       String mappedCls = clsMap.get(cls);
-/*    */       
-/* 41 */       if (mappedCls != null) {
-/* 42 */         if (ret == null) ret = new StringBuilder(end - start);
-/*    */         
-/* 44 */         ret.append(desc, start, clsStart + 1);
-/* 45 */         ret.append(mappedCls);
-/* 46 */         start = clsEnd;
-/*    */       } 
-/*    */       
-/* 49 */       searchStart = clsEnd + 1;
-/*    */     } 
-/*    */     
-/* 52 */     if (ret == null) return desc.substring(start, end);
-/*    */     
-/* 54 */     ret.append(desc, start, end);
-/*    */     
-/* 56 */     return ret.toString();
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\MappingUtil.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingVisitor.java
deleted file mode 100644
index 66f1eba43cad30c7a77a3fd5b064e584b2ba603a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingVisitor.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.util.List;
-/*     */ import java.util.Set;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public interface MappingVisitor
-/*     */ {
-/*     */   default Set<MappingFlag> getFlags() {
-/*  53 */     return MappingFlag.NONE;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default void reset() {
-/*  60 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default boolean visitHeader() throws IOException {
-/*  69 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void visitNamespaces(String paramString, List<String> paramList) throws IOException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default void visitMetadata(String key, @Nullable String value) throws IOException {}
-/*     */ 
-/*     */   
-/*     */   default boolean visitContent() throws IOException {
-/*  82 */     return true;
-/*     */   }
-/*     */   
-/*     */   boolean visitClass(String paramString) throws IOException;
-/*     */   
-/*     */   boolean visitField(String paramString1, @Nullable String paramString2) throws IOException;
-/*     */   
-/*     */   boolean visitMethod(String paramString1, @Nullable String paramString2) throws IOException;
-/*     */   
-/*     */   boolean visitMethodArg(int paramInt1, int paramInt2, @Nullable String paramString) throws IOException;
-/*     */   
-/*     */   boolean visitMethodVar(int paramInt1, int paramInt2, int paramInt3, int paramInt4, @Nullable String paramString) throws IOException;
-/*     */   
-/*     */   default boolean visitEnd() throws IOException {
-/*  96 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void visitDstName(MappedElementKind paramMappedElementKind, int paramInt, String paramString) throws IOException;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default void visitDstDesc(MappedElementKind targetKind, int namespace, String desc) throws IOException {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default boolean visitElementContent(MappedElementKind targetKind) throws IOException {
-/* 120 */     return true;
-/*     */   }
-/*     */   
-/*     */   void visitComment(MappedElementKind paramMappedElementKind, String paramString) throws IOException;
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\MappingVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingWriter.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingWriter.java
deleted file mode 100644
index ca7f9a2ee0fa0e813a20b4c61dc7f70f1f280b66..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/MappingWriter.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.mappingio;
-/*    */ 
-/*    */ import java.io.Closeable;
-/*    */ import java.io.IOException;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public interface MappingWriter
-/*    */   extends Closeable, MappingVisitor
-/*    */ {
-/*    */   default boolean visitEnd() throws IOException {
-/* 65 */     close();
-/* 66 */     return true;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\MappingWriter.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/FlatAsRegularMappingVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/FlatAsRegularMappingVisitor.java
deleted file mode 100644
index c2c82491be37b5f4a3cefed81b42ccc928e29493..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/FlatAsRegularMappingVisitor.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.adapter;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.util.Arrays;
-/*     */ import java.util.List;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.FlatMappingVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappedElementKind;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingFlag;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class FlatAsRegularMappingVisitor
-/*     */   implements MappingVisitor
-/*     */ {
-/*     */   private final FlatMappingVisitor next;
-/*     */   private String srcClsName;
-/*     */   private String srcMemberName;
-/*     */   private String srcMemberDesc;
-/*     */   private String srcMemberSubName;
-/*     */   private int argIdx;
-/*     */   private int lvIndex;
-/*     */   private int startOpIdx;
-/*     */   private int endOpIdx;
-/*     */   private String[] dstNames;
-/*     */   private String[] dstClassNames;
-/*     */   private String[] dstMemberNames;
-/*     */   private String[] dstMemberDescs;
-/*     */   
-/*     */   public FlatAsRegularMappingVisitor(FlatMappingVisitor out) {
-/*  33 */     this.next = out;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Set<MappingFlag> getFlags() {
-/*  38 */     return this.next.getFlags();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void reset() {
-/*  43 */     this.next.reset();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitHeader() throws IOException {
-/*  48 */     return this.next.visitHeader();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitNamespaces(String srcNamespace, List<String> dstNamespaces) throws IOException {
-/*  53 */     this.next.visitNamespaces(srcNamespace, dstNamespaces);
-/*     */     
-/*  55 */     int count = dstNamespaces.size();
-/*  56 */     this.dstNames = new String[count];
-/*  57 */     Set<MappingFlag> flags = this.next.getFlags();
-/*     */     
-/*  59 */     if (flags.contains(MappingFlag.NEEDS_ELEMENT_UNIQUENESS)) {
-/*  60 */       this.dstClassNames = new String[count];
-/*  61 */       this.dstMemberNames = new String[count];
-/*     */     } else {
-/*  63 */       this.dstClassNames = this.dstMemberNames = null;
-/*     */     } 
-/*     */     
-/*  66 */     this.dstMemberDescs = (flags.contains(MappingFlag.NEEDS_DST_FIELD_DESC) || flags.contains(MappingFlag.NEEDS_DST_METHOD_DESC)) ? new String[count] : null;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitMetadata(String key, @Nullable String value) throws IOException {
-/*  71 */     this.next.visitMetadata(key, value);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitContent() throws IOException {
-/*  76 */     return this.next.visitContent();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitClass(String srcName) {
-/*  81 */     this.srcClsName = srcName;
-/*     */     
-/*  83 */     Arrays.fill((Object[])this.dstNames, (Object)null);
-/*  84 */     if (this.dstClassNames != null) Arrays.fill((Object[])this.dstClassNames, (Object)null);
-/*     */     
-/*  86 */     return true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitField(String srcName, @Nullable String srcDesc) {
-/*  91 */     this.srcMemberName = srcName;
-/*  92 */     this.srcMemberDesc = srcDesc;
-/*     */     
-/*  94 */     Arrays.fill((Object[])this.dstNames, (Object)null);
-/*  95 */     if (this.dstMemberNames != null) Arrays.fill((Object[])this.dstMemberNames, (Object)null); 
-/*  96 */     if (this.dstMemberDescs != null) Arrays.fill((Object[])this.dstMemberDescs, (Object)null);
-/*     */     
-/*  98 */     return true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitMethod(String srcName, @Nullable String srcDesc) {
-/* 103 */     this.srcMemberName = srcName;
-/* 104 */     this.srcMemberDesc = srcDesc;
-/*     */     
-/* 106 */     Arrays.fill((Object[])this.dstNames, (Object)null);
-/* 107 */     if (this.dstMemberNames != null) Arrays.fill((Object[])this.dstMemberNames, (Object)null); 
-/* 108 */     if (this.dstMemberDescs != null) Arrays.fill((Object[])this.dstMemberDescs, (Object)null);
-/*     */     
-/* 110 */     return true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitMethodArg(int argPosition, int lvIndex, @Nullable String srcName) {
-/* 115 */     this.srcMemberSubName = srcName;
-/* 116 */     this.argIdx = argPosition;
-/* 117 */     this.lvIndex = lvIndex;
-/*     */     
-/* 119 */     Arrays.fill((Object[])this.dstNames, (Object)null);
-/*     */     
-/* 121 */     return true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitMethodVar(int lvtRowIndex, int lvIndex, int startOpIdx, int endOpIdx, @Nullable String srcName) {
-/* 126 */     this.srcMemberSubName = srcName;
-/* 127 */     this.argIdx = lvtRowIndex;
-/* 128 */     this.lvIndex = lvIndex;
-/* 129 */     this.startOpIdx = startOpIdx;
-/* 130 */     this.endOpIdx = endOpIdx;
-/*     */     
-/* 132 */     Arrays.fill((Object[])this.dstNames, (Object)null);
-/*     */     
-/* 134 */     return true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitEnd() throws IOException {
-/* 139 */     return this.next.visitEnd();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitDstName(MappedElementKind targetKind, int namespace, String name) {
-/* 144 */     this.dstNames[namespace] = name;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitDstDesc(MappedElementKind targetKind, int namespace, String desc) {
-/* 149 */     if (this.dstMemberDescs != null) this.dstMemberDescs[namespace] = desc;
-/*     */   
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitElementContent(MappedElementKind targetKind) throws IOException {
-/*     */     boolean relay;
-/* 156 */     switch (targetKind) {
-/*     */       case CLASS:
-/* 158 */         relay = this.next.visitClass(this.srcClsName, this.dstNames);
-/* 159 */         if (relay && this.dstClassNames != null) System.arraycopy(this.dstNames, 0, this.dstClassNames, 0, this.dstNames.length);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */         
-/* 183 */         return relay;case FIELD: relay = this.next.visitField(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.dstClassNames, this.dstNames, this.dstMemberDescs); if (relay && this.dstMemberNames != null) System.arraycopy(this.dstNames, 0, this.dstMemberNames, 0, this.dstNames.length);  return relay;case METHOD: relay = this.next.visitMethod(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.dstClassNames, this.dstNames, this.dstMemberDescs); if (relay && this.dstMemberNames != null) System.arraycopy(this.dstNames, 0, this.dstMemberNames, 0, this.dstNames.length);  return relay;case METHOD_ARG: relay = this.next.visitMethodArg(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.argIdx, this.lvIndex, this.srcMemberSubName, this.dstClassNames, this.dstMemberNames, this.dstMemberDescs, this.dstNames); return relay;case METHOD_VAR: relay = this.next.visitMethodVar(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.argIdx, this.lvIndex, this.startOpIdx, this.endOpIdx, this.srcMemberSubName, this.dstClassNames, this.dstMemberNames, this.dstMemberDescs, this.dstNames); return relay;
-/*     */     } 
-/*     */     throw new IllegalStateException();
-/*     */   }
-/*     */   public void visitComment(MappedElementKind targetKind, String comment) throws IOException {
-/* 188 */     switch (targetKind) {
-/*     */       case CLASS:
-/* 190 */         this.next.visitClassComment(this.srcClsName, this.dstClassNames, comment);
-/*     */         break;
-/*     */       case FIELD:
-/* 193 */         this.next.visitFieldComment(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.dstClassNames, this.dstMemberNames, this.dstMemberDescs, comment);
-/*     */         break;
-/*     */       
-/*     */       case METHOD:
-/* 197 */         this.next.visitMethodComment(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.dstClassNames, this.dstMemberNames, this.dstMemberDescs, comment);
-/*     */         break;
-/*     */       
-/*     */       case METHOD_ARG:
-/* 201 */         this.next.visitMethodArgComment(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.argIdx, this.lvIndex, this.srcMemberSubName, this.dstClassNames, this.dstMemberNames, this.dstMemberDescs, this.dstNames, comment);
-/*     */         break;
-/*     */       
-/*     */       case METHOD_VAR:
-/* 205 */         this.next.visitMethodVarComment(this.srcClsName, this.srcMemberName, this.srcMemberDesc, this.argIdx, this.lvIndex, this.startOpIdx, this.endOpIdx, this.srcMemberSubName, this.dstClassNames, this.dstMemberNames, this.dstMemberDescs, this.dstNames, comment);
-/*     */         break;
-/*     */     } 
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\adapter\FlatAsRegularMappingVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/ForwardingMappingVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/ForwardingMappingVisitor.java
deleted file mode 100644
index d5b09220b8d46f74d49d4a0725c3decbba786e7e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/ForwardingMappingVisitor.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.adapter;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.util.List;
-/*     */ import java.util.Objects;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappedElementKind;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingFlag;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class ForwardingMappingVisitor
-/*     */   implements MappingVisitor
-/*     */ {
-/*     */   protected final MappingVisitor next;
-/*     */   
-/*     */   protected ForwardingMappingVisitor(MappingVisitor next) {
-/*  32 */     Objects.requireNonNull(next, "null next");
-/*     */     
-/*  34 */     this.next = next;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Set<MappingFlag> getFlags() {
-/*  39 */     return this.next.getFlags();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void reset() {
-/*  44 */     this.next.reset();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitHeader() throws IOException {
-/*  49 */     return this.next.visitHeader();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitNamespaces(String srcNamespace, List<String> dstNamespaces) throws IOException {
-/*  54 */     this.next.visitNamespaces(srcNamespace, dstNamespaces);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitMetadata(String key, @Nullable String value) throws IOException {
-/*  59 */     this.next.visitMetadata(key, value);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitContent() throws IOException {
-/*  64 */     return this.next.visitContent();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitClass(String srcName) throws IOException {
-/*  69 */     return this.next.visitClass(srcName);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitField(String srcName, @Nullable String srcDesc) throws IOException {
-/*  74 */     return this.next.visitField(srcName, srcDesc);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitMethod(String srcName, @Nullable String srcDesc) throws IOException {
-/*  79 */     return this.next.visitMethod(srcName, srcDesc);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitMethodArg(int argPosition, int lvIndex, @Nullable String srcName) throws IOException {
-/*  84 */     return this.next.visitMethodArg(argPosition, lvIndex, srcName);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitMethodVar(int lvtRowIndex, int lvIndex, int startOpIdx, int endOpIdx, @Nullable String srcName) throws IOException {
-/*  89 */     return this.next.visitMethodVar(lvtRowIndex, lvIndex, startOpIdx, endOpIdx, srcName);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitEnd() throws IOException {
-/*  94 */     return this.next.visitEnd();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitDstName(MappedElementKind targetKind, int namespace, String name) throws IOException {
-/*  99 */     this.next.visitDstName(targetKind, namespace, name);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitDstDesc(MappedElementKind targetKind, int namespace, String desc) throws IOException {
-/* 104 */     this.next.visitDstDesc(targetKind, namespace, desc);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean visitElementContent(MappedElementKind targetKind) throws IOException {
-/* 109 */     return this.next.visitElementContent(targetKind);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitComment(MappedElementKind targetKind, String comment) throws IOException {
-/* 114 */     this.next.visitComment(targetKind, comment);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\adapter\ForwardingMappingVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/MappingDstNsReorder.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/MappingDstNsReorder.java
deleted file mode 100644
index 3fdc42bc4ac08e5e3002c8776e128b26f84f7c17..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/MappingDstNsReorder.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.mappingio.adapter;
-/*    */ 
-/*    */ import java.io.IOException;
-/*    */ import java.util.Arrays;
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.mappingio.MappedElementKind;
-/*    */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class MappingDstNsReorder
-/*    */   extends ForwardingMappingVisitor
-/*    */ {
-/*    */   private final List<String> newDstNs;
-/*    */   private int[] nsMap;
-/*    */   
-/*    */   public MappingDstNsReorder(MappingVisitor next, List<String> newDstNs) {
-/* 29 */     super(next);
-/*    */     
-/* 31 */     Objects.requireNonNull(newDstNs, "null newDstNs list");
-/*    */     
-/* 33 */     this.newDstNs = newDstNs;
-/*    */   }
-/*    */   
-/*    */   public MappingDstNsReorder(MappingVisitor next, String... newDstNs) {
-/* 37 */     this(next, Arrays.asList(newDstNs));
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitNamespaces(String srcNamespace, List<String> dstNamespaces) throws IOException {
-/* 42 */     this.nsMap = new int[dstNamespaces.size()];
-/*    */     
-/* 44 */     for (int i = 0; i < dstNamespaces.size(); i++) {
-/* 45 */       this.nsMap[i] = this.newDstNs.indexOf(dstNamespaces.get(i));
-/*    */     }
-/*    */     
-/* 48 */     super.visitNamespaces(srcNamespace, this.newDstNs);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitDstName(MappedElementKind targetKind, int namespace, String name) throws IOException {
-/* 53 */     namespace = this.nsMap[namespace];
-/*    */     
-/* 55 */     if (namespace >= 0) {
-/* 56 */       super.visitDstName(targetKind, namespace, name);
-/*    */     }
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitDstDesc(MappedElementKind targetKind, int namespace, String desc) throws IOException {
-/* 62 */     namespace = this.nsMap[namespace];
-/*    */     
-/* 64 */     if (namespace >= 0)
-/* 65 */       super.visitDstDesc(targetKind, namespace, desc); 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\adapter\MappingDstNsReorder.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/MappingSourceNsSwitch.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/MappingSourceNsSwitch.java
deleted file mode 100644
index c699d73ed22e73e20ae7d7fd5dfc90fef7fabfb5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/adapter/MappingSourceNsSwitch.java
+++ /dev/null
@@ -1,525 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.adapter;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.Arrays;
-/*     */ import java.util.EnumSet;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.List;
-/*     */ import java.util.Map;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappedElementKind;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingFlag;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingUtil;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class MappingSourceNsSwitch
-/*     */   extends ForwardingMappingVisitor
-/*     */ {
-/*     */   private final String newSourceNsName;
-/*     */   private final boolean dropMissingNewSrcName;
-/*     */   private int newSourceNs;
-/*     */   private String oldSourceNsName;
-/*     */   private final Map<String, String> classMap;
-/*     */   private boolean classMapReady;
-/*     */   private boolean passThrough;
-/*     */   private boolean relayHeaderOrMetadata;
-/*     */   private String srcName;
-/*     */   private String srcDesc;
-/*     */   private int argIdx;
-/*     */   private int lvIndex;
-/*     */   private int startOpIdx;
-/*     */   private int endOpIdx;
-/*     */   private String[] dstNames;
-/*     */   private String[] dstDescs;
-/*     */   
-/*     */   public MappingSourceNsSwitch(MappingVisitor next, String newSourceNs) {
-/*  49 */     this(next, newSourceNs, false);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public MappingSourceNsSwitch(MappingVisitor next, String newSourceNs, boolean dropMissingNewSrcName) {
-/*  60 */     super(next);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 311 */     this.classMap = new HashMap<>();
-/*     */     this.newSourceNsName = newSourceNs;
-/*     */     this.dropMissingNewSrcName = dropMissingNewSrcName;
-/*     */   }
-/*     */   
-/*     */   public Set<MappingFlag> getFlags() {
-/*     */     if (this.passThrough)
-/*     */       return this.next.getFlags(); 
-/*     */     Set<MappingFlag> ret = EnumSet.noneOf(MappingFlag.class);
-/*     */     ret.addAll(this.next.getFlags());
-/*     */     ret.add(MappingFlag.NEEDS_MULTIPLE_PASSES);
-/*     */     ret.add(MappingFlag.NEEDS_ELEMENT_UNIQUENESS);
-/*     */     return ret;
-/*     */   }
-/*     */   
-/*     */   public void reset() {
-/*     */     this.classMapReady = false;
-/*     */     this.passThrough = false;
-/*     */     this.classMap.clear();
-/*     */     this.next.reset();
-/*     */   }
-/*     */   
-/*     */   public boolean visitHeader() throws IOException {
-/*     */     if (!this.classMapReady)
-/*     */       return true; 
-/*     */     return this.next.visitHeader();
-/*     */   }
-/*     */   
-/*     */   public void visitNamespaces(String srcNamespace, List<String> dstNamespaces) throws IOException {
-/*     */     if (!this.classMapReady) {
-/*     */       if (srcNamespace.equals(this.newSourceNsName)) {
-/*     */         this.classMapReady = true;
-/*     */         this.passThrough = true;
-/*     */         this.relayHeaderOrMetadata = this.next.visitHeader();
-/*     */         if (this.relayHeaderOrMetadata)
-/*     */           this.next.visitNamespaces(srcNamespace, dstNamespaces); 
-/*     */       } else {
-/*     */         this.newSourceNs = dstNamespaces.indexOf(this.newSourceNsName);
-/*     */         if (this.newSourceNs < 0)
-/*     */           throw new RuntimeException("invalid new source ns " + this.newSourceNsName + ": not in " + dstNamespaces + " or " + srcNamespace); 
-/*     */         this.oldSourceNsName = srcNamespace;
-/*     */         int count = dstNamespaces.size();
-/*     */         this.dstNames = new String[count];
-/*     */       } 
-/*     */     } else {
-/*     */       this.relayHeaderOrMetadata = true;
-/*     */       List<String> newDstNamespaces = new ArrayList<>(dstNamespaces);
-/*     */       newDstNamespaces.set(this.newSourceNs, this.oldSourceNsName);
-/*     */       this.next.visitNamespaces(this.newSourceNsName, newDstNamespaces);
-/*     */       Set<MappingFlag> flags = this.next.getFlags();
-/*     */       if (flags.contains(MappingFlag.NEEDS_DST_FIELD_DESC) || flags.contains(MappingFlag.NEEDS_DST_METHOD_DESC)) {
-/*     */         this.dstDescs = new String[dstNamespaces.size()];
-/*     */       } else {
-/*     */         this.dstDescs = null;
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public void visitMetadata(String key, @Nullable String value) throws IOException {
-/*     */     if (this.classMapReady && this.relayHeaderOrMetadata)
-/*     */       this.next.visitMetadata(key, value); 
-/*     */   }
-/*     */   
-/*     */   public boolean visitContent() throws IOException {
-/*     */     if (!this.classMapReady)
-/*     */       return true; 
-/*     */     this.relayHeaderOrMetadata = true;
-/*     */     return this.next.visitContent();
-/*     */   }
-/*     */   
-/*     */   public boolean visitClass(String srcName) throws IOException {
-/*     */     if (this.passThrough)
-/*     */       return this.next.visitClass(srcName); 
-/*     */     this.srcName = srcName;
-/*     */     return true;
-/*     */   }
-/*     */   
-/*     */   public boolean visitField(String srcName, @Nullable String srcDesc) throws IOException {
-/*     */     assert this.classMapReady;
-/*     */     if (this.passThrough)
-/*     */       return this.next.visitField(srcName, srcDesc); 
-/*     */     this.srcName = srcName;
-/*     */     this.srcDesc = srcDesc;
-/*     */     return true;
-/*     */   }
-/*     */   
-/*     */   public boolean visitMethod(String srcName, @Nullable String srcDesc) throws IOException {
-/*     */     assert this.classMapReady;
-/*     */     if (this.passThrough)
-/*     */       return this.next.visitMethod(srcName, srcDesc); 
-/*     */     this.srcName = srcName;
-/*     */     this.srcDesc = srcDesc;
-/*     */     return true;
-/*     */   }
-/*     */   
-/*     */   public boolean visitMethodArg(int argPosition, int lvIndex, @Nullable String srcName) throws IOException {
-/*     */     assert this.classMapReady;
-/*     */     if (this.passThrough)
-/*     */       return this.next.visitMethodArg(argPosition, lvIndex, srcName); 
-/*     */     this.srcName = srcName;
-/*     */     this.argIdx = argPosition;
-/*     */     this.lvIndex = lvIndex;
-/*     */     return true;
-/*     */   }
-/*     */   
-/*     */   public boolean visitMethodVar(int lvtRowIndex, int lvIndex, int startOpIdx, int endOpIdx, @Nullable String srcName) throws IOException {
-/*     */     assert this.classMapReady;
-/*     */     if (this.passThrough)
-/*     */       return this.next.visitMethodVar(lvtRowIndex, lvIndex, startOpIdx, endOpIdx, srcName); 
-/*     */     this.srcName = srcName;
-/*     */     this.argIdx = lvtRowIndex;
-/*     */     this.lvIndex = lvIndex;
-/*     */     this.startOpIdx = startOpIdx;
-/*     */     this.endOpIdx = endOpIdx;
-/*     */     return true;
-/*     */   }
-/*     */   
-/*     */   public boolean visitEnd() throws IOException {
-/*     */     if (!this.classMapReady) {
-/*     */       this.classMapReady = true;
-/*     */       return false;
-/*     */     } 
-/*     */     return this.next.visitEnd();
-/*     */   }
-/*     */   
-/*     */   public void visitDstName(MappedElementKind targetKind, int namespace, String name) throws IOException {
-/*     */     if (!this.classMapReady) {
-/*     */       if (namespace == this.newSourceNs)
-/*     */         this.classMap.put(this.srcName, name); 
-/*     */       return;
-/*     */     } 
-/*     */     if (this.passThrough) {
-/*     */       this.next.visitDstName(targetKind, namespace, name);
-/*     */       return;
-/*     */     } 
-/*     */     if (namespace >= this.dstNames.length)
-/*     */       throw new IllegalArgumentException("out of bounds namespace"); 
-/*     */     this.dstNames[namespace] = name;
-/*     */   }
-/*     */   
-/*     */   public void visitDstDesc(MappedElementKind targetKind, int namespace, String desc) throws IOException {
-/*     */     if (this.passThrough) {
-/*     */       this.next.visitDstDesc(targetKind, namespace, desc);
-/*     */     } else if (this.classMapReady && this.dstDescs != null) {
-/*     */       this.dstDescs[namespace] = desc;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public boolean visitElementContent(MappedElementKind targetKind) throws IOException {
-/*     */     boolean relay;
-/*     */     if (!this.classMapReady)
-/*     */       return false; 
-/*     */     if (this.passThrough)
-/*     */       return this.next.visitElementContent(targetKind); 
-/*     */     String dstName = this.dstNames[this.newSourceNs];
-/*     */     if (dstName == null && targetKind != MappedElementKind.METHOD_ARG && targetKind != MappedElementKind.METHOD_VAR) {
-/*     */       if (this.dropMissingNewSrcName && !this.srcName.startsWith("<")) {
-/*     */         Arrays.fill((Object[])this.dstNames, (Object)null);
-/*     */         if (this.dstDescs != null)
-/*     */           Arrays.fill((Object[])this.dstDescs, (Object)null); 
-/*     */         return false;
-/*     */       } 
-/*     */       dstName = this.srcName;
-/*     */     } 
-/*     */     switch (targetKind) {
-/*     */       case CLASS:
-/*     */         relay = this.next.visitClass(dstName);
-/*     */         break;
-/*     */       case FIELD:
-/*     */         relay = this.next.visitField(dstName, (this.srcDesc != null) ? MappingUtil.mapDesc(this.srcDesc, this.classMap) : null);
-/*     */         break;
-/*     */       case METHOD:
-/*     */         relay = this.next.visitMethod(dstName, (this.srcDesc != null) ? MappingUtil.mapDesc(this.srcDesc, this.classMap) : null);
-/*     */         break;
-/*     */       case METHOD_ARG:
-/*     */         relay = this.next.visitMethodArg(this.argIdx, this.lvIndex, dstName);
-/*     */         break;
-/*     */       case METHOD_VAR:
-/*     */         relay = this.next.visitMethodVar(this.argIdx, this.lvIndex, this.startOpIdx, this.endOpIdx, dstName);
-/*     */         break;
-/*     */       default:
-/*     */         throw new IllegalStateException();
-/*     */     } 
-/*     */     if (relay) {
-/*     */       boolean sendDesc = (this.dstDescs != null && this.srcDesc != null && (targetKind == MappedElementKind.FIELD || targetKind == MappedElementKind.METHOD));
-/*     */       for (int i = 0; i < this.dstNames.length; i++) {
-/*     */         if (i == this.newSourceNs) {
-/*     */           this.next.visitDstName(targetKind, i, this.srcName);
-/*     */           if (sendDesc)
-/*     */             this.next.visitDstDesc(targetKind, i, this.srcDesc); 
-/*     */         } else {
-/*     */           String name = this.dstNames[i];
-/*     */           if (name != null)
-/*     */             this.next.visitDstName(targetKind, i, name); 
-/*     */           if (sendDesc) {
-/*     */             String desc = this.dstDescs[i];
-/*     */             if (desc != null)
-/*     */               this.next.visitDstDesc(targetKind, i, desc); 
-/*     */           } 
-/*     */         } 
-/*     */       } 
-/*     */       relay = this.next.visitElementContent(targetKind);
-/*     */     } 
-/*     */     Arrays.fill((Object[])this.dstNames, (Object)null);
-/*     */     if (this.dstDescs != null)
-/*     */       Arrays.fill((Object[])this.dstDescs, (Object)null); 
-/*     */     return relay;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\adapter\MappingSourceNsSwitch.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/ColumnFileReader.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/ColumnFileReader.java
deleted file mode 100644
index 02f76de9eca490c7d6ff8714cd39daea73642efd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/ColumnFileReader.java
+++ /dev/null
@@ -1,530 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.format;
-/*     */ 
-/*     */ import java.io.Closeable;
-/*     */ import java.io.IOException;
-/*     */ import java.io.Reader;
-/*     */ import java.util.Arrays;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.format.tiny.Tiny2Util;
-/*     */ import org.jetbrains.annotations.ApiStatus.Internal;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ @Internal
-/*     */ public final class ColumnFileReader
-/*     */   implements Closeable
-/*     */ {
-/*     */   private final Reader reader;
-/*     */   private final char columnSeparator;
-/*     */   private char[] buffer;
-/*     */   private int bufferPos;
-/*     */   private int bufferLimit;
-/*     */   private int mark;
-/*     */   private int lineNumber;
-/*     */   private boolean eol;
-/*     */   private boolean eof;
-/*     */   private int markedLineNumber;
-/*     */   private boolean markedEol;
-/*     */   private boolean markedEof;
-/*     */   
-/*     */   public ColumnFileReader(Reader reader, char columnSeparator) {
-/* 336 */     this.buffer = new char[16384];
-/*     */ 
-/*     */     
-/* 339 */     this.mark = -1;
-/* 340 */     this.lineNumber = 1;
-/*     */     this.reader = reader;
-/*     */     this.columnSeparator = columnSeparator;
-/*     */   }
-/*     */   
-/*     */   public void close() throws IOException {
-/*     */     this.reader.close();
-/*     */   }
-/*     */   
-/*     */   public boolean nextCol(String expect) throws IOException {
-/*     */     if (this.eol)
-/*     */       return false; 
-/*     */     int len = expect.length();
-/*     */     if (!fillBuffer(len))
-/*     */       return false; 
-/*     */     for (int i = 0; i < len; i++) {
-/*     */       if (this.buffer[this.bufferPos + i] != expect.charAt(i))
-/*     */         return false; 
-/*     */     } 
-/*     */     char trailing = Character.MIN_VALUE;
-/*     */     if (fillBuffer(len + 1) && (trailing = this.buffer[this.bufferPos + len]) != this.columnSeparator && trailing != '\n' && trailing != '\r')
-/*     */       return false; 
-/*     */     this.bufferPos += expect.length();
-/*     */     if (trailing == this.columnSeparator) {
-/*     */       this.bufferPos++;
-/*     */     } else {
-/*     */       this.eol = true;
-/*     */     } 
-/*     */     return true;
-/*     */   }
-/*     */   
-/*     */   @Nullable
-/*     */   public String nextCol() throws IOException {
-/*     */     return nextCol(false);
-/*     */   }
-/*     */   
-/*     */   @Nullable
-/*     */   public String nextEscapedCol() throws IOException {
-/*     */     return nextCol(true);
-/*     */   }
-/*     */   
-/*     */   @Nullable
-/*     */   public String nextCol(boolean unescape) throws IOException {
-/*     */     int start;
-/*     */     if (this.eol)
-/*     */       return null; 
-/*     */     int end = this.bufferPos;
-/*     */     int firstEscaped = -1;
-/*     */     label41: while (true) {
-/*     */       while (end < this.bufferLimit) {
-/*     */         char c = this.buffer[end];
-/*     */         if (c == this.columnSeparator || c == '\n' || c == '\r') {
-/*     */           start = this.bufferPos;
-/*     */           this.bufferPos = end;
-/*     */           if (c == this.columnSeparator) {
-/*     */             this.bufferPos++;
-/*     */             break label41;
-/*     */           } 
-/*     */           this.eol = true;
-/*     */           break label41;
-/*     */         } 
-/*     */         if (unescape && c == '\\' && firstEscaped < 0)
-/*     */           firstEscaped = this.bufferPos; 
-/*     */         end++;
-/*     */       } 
-/*     */       int oldStart = this.bufferPos;
-/*     */       boolean filled = fillBuffer(end - this.bufferPos + 1);
-/*     */       int posShift = this.bufferPos - oldStart;
-/*     */       assert posShift <= 0;
-/*     */       end += posShift;
-/*     */       if (firstEscaped >= 0)
-/*     */         firstEscaped += posShift; 
-/*     */       if (!filled) {
-/*     */         start = this.bufferPos;
-/*     */         this.bufferPos = end;
-/*     */         this.eol = true;
-/*     */         break;
-/*     */       } 
-/*     */     } 
-/*     */     int len = end - start;
-/*     */     if (len == 0)
-/*     */       return ""; 
-/*     */     if (firstEscaped >= 0)
-/*     */       return Tiny2Util.unescape(String.valueOf(this.buffer, start, len)); 
-/*     */     return String.valueOf(this.buffer, start, len);
-/*     */   }
-/*     */   
-/*     */   public int nextIntCol() throws IOException {
-/*     */     String str = nextCol(false);
-/*     */     try {
-/*     */       return (str != null) ? Integer.parseInt(str) : -1;
-/*     */     } catch (NumberFormatException e) {
-/*     */       throw new IOException("invalid number in line " + this.lineNumber + ": " + str);
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public boolean nextLine(int indent) throws IOException {
-/*     */     label28: do {
-/*     */       while (this.bufferPos < this.bufferLimit) {
-/*     */         char c = this.buffer[this.bufferPos];
-/*     */         if (c == '\n') {
-/*     */           if (indent == 0) {
-/*     */             if (!fillBuffer(2))
-/*     */               break label28; 
-/*     */             c = this.buffer[this.bufferPos + 1];
-/*     */             if (c == '\n' || c == '\r') {
-/*     */               this.bufferPos++;
-/*     */               this.lineNumber++;
-/*     */               continue;
-/*     */             } 
-/*     */           } 
-/*     */           if (!fillBuffer(indent + 1))
-/*     */             return false; 
-/*     */           for (int i = 1; i <= indent; i++) {
-/*     */             if (this.buffer[this.bufferPos + i] != '\t')
-/*     */               return false; 
-/*     */           } 
-/*     */           this.bufferPos += indent + 1;
-/*     */           this.lineNumber++;
-/*     */           this.eol = false;
-/*     */           return true;
-/*     */         } 
-/*     */         this.bufferPos++;
-/*     */       } 
-/*     */     } while (fillBuffer(1));
-/*     */     return false;
-/*     */   }
-/*     */   
-/*     */   public int getLineNumber() {
-/*     */     return this.lineNumber;
-/*     */   }
-/*     */   
-/*     */   public void mark() {
-/*     */     if (this.bufferPos > 0) {
-/*     */       int available = this.bufferLimit - this.bufferPos;
-/*     */       System.arraycopy(this.buffer, this.bufferPos, this.buffer, 0, available);
-/*     */       this.bufferPos = 0;
-/*     */       this.bufferLimit = available;
-/*     */       this.markedLineNumber = this.lineNumber;
-/*     */       this.markedEol = this.eol;
-/*     */       this.markedEof = this.eof;
-/*     */     } 
-/*     */     this.mark = this.bufferPos;
-/*     */   }
-/*     */   
-/*     */   public void reset() {
-/*     */     if (this.mark < 0)
-/*     */       throw new IllegalStateException("not marked"); 
-/*     */     this.bufferPos = this.mark;
-/*     */     this.lineNumber = this.markedLineNumber;
-/*     */     this.eol = this.markedEol;
-/*     */     this.eof = this.markedEof;
-/*     */   }
-/*     */   
-/*     */   private boolean fillBuffer(int count) throws IOException {
-/*     */     int available = this.bufferLimit - this.bufferPos;
-/*     */     int req = count - available;
-/*     */     if (req <= 0)
-/*     */       return true; 
-/*     */     if (this.bufferPos + count > this.buffer.length)
-/*     */       if (this.mark >= 0) {
-/*     */         this.buffer = Arrays.copyOf(this.buffer, Math.max(this.bufferPos + count, this.buffer.length * 2));
-/*     */       } else {
-/*     */         if (count > this.buffer.length) {
-/*     */           char[] newBuffer = new char[Math.max(count, this.buffer.length * 2)];
-/*     */           System.arraycopy(this.buffer, this.bufferPos, newBuffer, 0, available);
-/*     */           this.buffer = newBuffer;
-/*     */         } else {
-/*     */           System.arraycopy(this.buffer, this.bufferPos, this.buffer, 0, available);
-/*     */         } 
-/*     */         this.bufferPos = 0;
-/*     */         this.bufferLimit = available;
-/*     */       }  
-/*     */     int reqLimit = this.bufferLimit + req;
-/*     */     do {
-/*     */       int read = this.reader.read(this.buffer, this.bufferLimit, this.buffer.length - this.bufferLimit);
-/*     */       if (read < 0) {
-/*     */         this.eof = this.eol = true;
-/*     */         return false;
-/*     */       } 
-/*     */       this.bufferLimit += read;
-/*     */     } while (this.bufferLimit < reqLimit);
-/*     */     return true;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\format\ColumnFileReader.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/MappingFormat.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/MappingFormat.java
deleted file mode 100644
index 788855ae20b99bd1adf30dc147b73a5e0ab6c2cb..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/MappingFormat.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.mappingio.format;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny1FileReader.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny1FileReader.java
deleted file mode 100644
index e8970698e799690506838ede31e2e7c1c4fe7217..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny1FileReader.java
+++ /dev/null
@@ -1,188 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.format.tiny;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.io.Reader;
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.List;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappedElementKind;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingFlag;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.format.ColumnFileReader;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.tree.MappingTree;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.tree.MemoryMappingTree;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class Tiny1FileReader
-/*     */ {
-/*     */   public static List<String> getNamespaces(Reader reader) throws IOException {
-/*  37 */     return getNamespaces(new ColumnFileReader(reader, '\t'));
-/*     */   }
-/*     */   
-/*     */   private static List<String> getNamespaces(ColumnFileReader reader) throws IOException {
-/*  41 */     if (!reader.nextCol("v1")) {
-/*  42 */       throw new IOException("invalid/unsupported tiny file: no tiny 1 header");
-/*     */     }
-/*     */     
-/*  45 */     List<String> ret = new ArrayList<>();
-/*     */     
-/*     */     String ns;
-/*  48 */     while ((ns = reader.nextCol()) != null) {
-/*  49 */       ret.add(ns);
-/*     */     }
-/*     */     
-/*  52 */     return ret;
-/*     */   }
-/*     */   
-/*     */   public static void read(Reader reader, MappingVisitor visitor) throws IOException {
-/*  56 */     read(new ColumnFileReader(reader, '\t'), visitor);
-/*     */   }
-/*     */   private static void read(ColumnFileReader reader, MappingVisitor visitor) throws IOException {
-/*     */     MemoryMappingTree memoryMappingTree;
-/*  60 */     if (!reader.nextCol("v1")) {
-/*  61 */       throw new IOException("invalid/unsupported tiny file: no tiny 1 header");
-/*     */     }
-/*     */     
-/*  64 */     String srcNamespace = reader.nextCol();
-/*  65 */     List<String> dstNamespaces = new ArrayList<>();
-/*     */     
-/*     */     String dstNamespace;
-/*  68 */     while ((dstNamespace = reader.nextCol()) != null) {
-/*  69 */       dstNamespaces.add(dstNamespace);
-/*     */     }
-/*     */     
-/*  72 */     int dstNsCount = dstNamespaces.size();
-/*  73 */     Set<MappingFlag> flags = visitor.getFlags();
-/*  74 */     MappingVisitor parentVisitor = null;
-/*     */     
-/*  76 */     if (flags.contains(MappingFlag.NEEDS_ELEMENT_UNIQUENESS) || flags.contains(MappingFlag.NEEDS_HEADER_METADATA)) {
-/*  77 */       parentVisitor = visitor;
-/*  78 */       memoryMappingTree = new MemoryMappingTree();
-/*  79 */     } else if (flags.contains(MappingFlag.NEEDS_MULTIPLE_PASSES)) {
-/*  80 */       reader.mark();
-/*     */     } 
-/*     */     
-/*     */     while (true) {
-/*  84 */       boolean visitHeader = memoryMappingTree.visitHeader();
-/*     */       
-/*  86 */       if (visitHeader) {
-/*  87 */         memoryMappingTree.visitNamespaces(srcNamespace, dstNamespaces);
-/*     */       }
-/*     */       
-/*  90 */       if (memoryMappingTree.visitContent()) {
-/*  91 */         String lastClass = null;
-/*  92 */         boolean lastClassDstNamed = false;
-/*  93 */         boolean visitLastClass = false;
-/*     */         
-/*  95 */         while (reader.nextLine(0)) {
-/*     */ 
-/*     */           
-/*  98 */           if (reader.nextCol("CLASS")) {
-/*  99 */             String srcName = reader.nextCol();
-/* 100 */             if (srcName == null || srcName.isEmpty()) throw new IOException("missing class-name-a in line " + reader.getLineNumber());
-/*     */             
-/* 102 */             if (!lastClassDstNamed || !srcName.equals(lastClass)) {
-/* 103 */               lastClass = srcName;
-/* 104 */               lastClassDstNamed = true;
-/* 105 */               visitLastClass = memoryMappingTree.visitClass(srcName);
-/*     */               
-/* 107 */               if (visitLastClass) {
-/* 108 */                 readDstNames(reader, MappedElementKind.CLASS, dstNsCount, (MappingVisitor)memoryMappingTree);
-/* 109 */                 visitLastClass = memoryMappingTree.visitElementContent(MappedElementKind.CLASS);
-/*     */               } 
-/*     */             }  continue;
-/* 112 */           }  boolean isMethod; if ((isMethod = reader.nextCol("METHOD")) || reader.nextCol("FIELD")) {
-/* 113 */             String srcOwner = reader.nextCol();
-/* 114 */             if (srcOwner == null || srcOwner.isEmpty()) throw new IOException("missing class-name-a in line " + reader.getLineNumber());
-/*     */             
-/* 116 */             if (!srcOwner.equals(lastClass)) {
-/* 117 */               lastClass = srcOwner;
-/* 118 */               lastClassDstNamed = false;
-/* 119 */               visitLastClass = (memoryMappingTree.visitClass(srcOwner) && memoryMappingTree.visitElementContent(MappedElementKind.CLASS));
-/*     */             } 
-/*     */             
-/* 122 */             if (visitLastClass) {
-/* 123 */               String srcDesc = reader.nextCol();
-/* 124 */               if (srcDesc == null || srcDesc.isEmpty()) throw new IOException("missing desc-a in line " + reader.getLineNumber()); 
-/* 125 */               String srcName = reader.nextCol();
-/* 126 */               if (srcName == null || srcName.isEmpty()) throw new IOException("missing name-a in line " + reader.getLineNumber());
-/*     */               
-/* 128 */               if ((isMethod && memoryMappingTree.visitMethod(srcName, srcDesc)) || (!isMethod && memoryMappingTree
-/* 129 */                 .visitField(srcName, srcDesc))) {
-/* 130 */                 MappedElementKind kind = isMethod ? MappedElementKind.METHOD : MappedElementKind.FIELD;
-/* 131 */                 readDstNames(reader, kind, dstNsCount, (MappingVisitor)memoryMappingTree);
-/* 132 */                 memoryMappingTree.visitElementContent(kind);
-/*     */               } 
-/*     */             }  continue;
-/*     */           } 
-/* 136 */           String line = reader.nextCol();
-/* 137 */           String prefix = "# INTERMEDIARY-COUNTER ";
-/*     */           
-/*     */           String[] parts;
-/* 140 */           if (line.startsWith("# INTERMEDIARY-COUNTER ") && (
-/* 141 */             parts = line.substring("# INTERMEDIARY-COUNTER ".length()).split(" ")).length == 2) {
-/* 142 */             String property = null;
-/*     */             
-/* 144 */             switch (parts[0]) {
-/*     */               case "class":
-/* 146 */                 property = "next-intermediary-class";
-/*     */                 break;
-/*     */               case "field":
-/* 149 */                 property = "next-intermediary-field";
-/*     */                 break;
-/*     */               case "method":
-/* 152 */                 property = "next-intermediary-method";
-/*     */                 break;
-/*     */             } 
-/*     */             
-/* 156 */             if (property != null) {
-/* 157 */               memoryMappingTree.visitMetadata(property, parts[1]);
-/*     */             }
-/*     */           } 
-/*     */         } 
-/*     */       } 
-/*     */ 
-/*     */       
-/* 164 */       if (memoryMappingTree.visitEnd())
-/*     */         break; 
-/* 166 */       reader.reset();
-/*     */     } 
-/*     */     
-/* 169 */     if (parentVisitor != null) {
-/* 170 */       ((MappingTree)memoryMappingTree).accept(parentVisitor);
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   private static void readDstNames(ColumnFileReader reader, MappedElementKind subjectKind, int dstNsCount, MappingVisitor visitor) throws IOException {
-/* 175 */     for (int dstNs = 0; dstNs < dstNsCount; dstNs++) {
-/* 176 */       String name = reader.nextCol();
-/* 177 */       if (name == null) throw new IOException("missing name columns in line " + reader.getLineNumber());
-/*     */       
-/* 179 */       if (!name.isEmpty()) visitor.visitDstName(subjectKind, dstNs, name); 
-/*     */     } 
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\format\tiny\Tiny1FileReader.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny2FileReader.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny2FileReader.java
deleted file mode 100644
index 696a2f214dc414d4b9da554611f559cf9d190c7f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny2FileReader.java
+++ /dev/null
@@ -1,224 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.format.tiny;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.io.Reader;
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.List;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappedElementKind;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingFlag;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.format.ColumnFileReader;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class Tiny2FileReader
-/*     */ {
-/*     */   public static List<String> getNamespaces(Reader reader) throws IOException {
-/*  34 */     return getNamespaces(new ColumnFileReader(reader, '\t'));
-/*     */   }
-/*     */   
-/*     */   private static List<String> getNamespaces(ColumnFileReader reader) throws IOException {
-/*  38 */     if (!reader.nextCol("tiny") || reader
-/*  39 */       .nextIntCol() != 2 || reader
-/*  40 */       .nextIntCol() < 0) {
-/*  41 */       throw new IOException("invalid/unsupported tiny file: no tiny 2 header");
-/*     */     }
-/*     */     
-/*  44 */     List<String> ret = new ArrayList<>();
-/*     */     
-/*     */     String ns;
-/*  47 */     while ((ns = reader.nextCol()) != null) {
-/*  48 */       ret.add(ns);
-/*     */     }
-/*     */     
-/*  51 */     return ret;
-/*     */   }
-/*     */   
-/*     */   public static void read(Reader reader, MappingVisitor visitor) throws IOException {
-/*  55 */     read(new ColumnFileReader(reader, '\t'), visitor);
-/*     */   }
-/*     */   
-/*     */   private static void read(ColumnFileReader reader, MappingVisitor visitor) throws IOException {
-/*  59 */     if (!reader.nextCol("tiny") || reader
-/*  60 */       .nextIntCol() != 2 || reader
-/*  61 */       .nextIntCol() < 0) {
-/*  62 */       throw new IOException("invalid/unsupported tiny file: no tiny 2 header");
-/*     */     }
-/*     */     
-/*  65 */     String srcNamespace = reader.nextCol();
-/*  66 */     List<String> dstNamespaces = new ArrayList<>();
-/*     */     
-/*     */     String dstNamespace;
-/*  69 */     while ((dstNamespace = reader.nextCol()) != null) {
-/*  70 */       dstNamespaces.add(dstNamespace);
-/*     */     }
-/*     */     
-/*  73 */     int dstNsCount = dstNamespaces.size();
-/*     */     
-/*  75 */     if (visitor.getFlags().contains(MappingFlag.NEEDS_MULTIPLE_PASSES)) {
-/*  76 */       reader.mark();
-/*     */     }
-/*     */     
-/*  79 */     boolean firstIteration = true;
-/*  80 */     boolean escapeNames = false;
-/*     */     
-/*     */     while (true) {
-/*  83 */       boolean visitHeader = visitor.visitHeader();
-/*     */       
-/*  85 */       if (visitHeader) {
-/*  86 */         visitor.visitNamespaces(srcNamespace, dstNamespaces);
-/*     */       }
-/*     */       
-/*  89 */       if (visitHeader || firstIteration) {
-/*  90 */         while (reader.nextLine(1)) {
-/*  91 */           if (!visitHeader) {
-/*  92 */             if (!escapeNames && reader.nextCol("escaped-names"))
-/*  93 */               escapeNames = true; 
-/*     */             continue;
-/*     */           } 
-/*  96 */           String key = reader.nextCol();
-/*  97 */           if (key == null) throw new IOException("missing property key in line " + reader.getLineNumber()); 
-/*  98 */           String value = reader.nextEscapedCol();
-/*     */           
-/* 100 */           if (key.equals("escaped-names")) {
-/* 101 */             escapeNames = true;
-/*     */           }
-/*     */           
-/* 104 */           visitor.visitMetadata(key, value);
-/*     */         } 
-/*     */       }
-/*     */ 
-/*     */       
-/* 109 */       if (visitor.visitContent()) {
-/* 110 */         while (reader.nextLine(0)) {
-/* 111 */           if (reader.nextCol("c")) {
-/* 112 */             String srcName = reader.nextCol(escapeNames);
-/* 113 */             if (srcName == null || srcName.isEmpty()) throw new IOException("missing class-name-a in line " + reader.getLineNumber());
-/*     */             
-/* 115 */             if (visitor.visitClass(srcName)) {
-/* 116 */               readClass(reader, dstNsCount, escapeNames, visitor);
-/*     */             }
-/*     */           } 
-/*     */         } 
-/*     */       }
-/*     */       
-/* 122 */       if (visitor.visitEnd())
-/*     */         break; 
-/* 124 */       reader.reset();
-/* 125 */       firstIteration = false;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private static void readClass(ColumnFileReader reader, int dstNsCount, boolean escapeNames, MappingVisitor visitor) throws IOException {
-/* 130 */     readDstNames(reader, MappedElementKind.CLASS, dstNsCount, escapeNames, visitor);
-/* 131 */     if (!visitor.visitElementContent(MappedElementKind.CLASS))
-/*     */       return; 
-/* 133 */     while (reader.nextLine(1)) {
-/* 134 */       if (reader.nextCol("f")) {
-/* 135 */         String srcDesc = reader.nextCol(escapeNames);
-/* 136 */         if (srcDesc == null || srcDesc.isEmpty()) throw new IOException("missing field-desc-a in line " + reader.getLineNumber()); 
-/* 137 */         String srcName = reader.nextCol(escapeNames);
-/* 138 */         if (srcName == null || srcName.isEmpty()) throw new IOException("missing field-name-a in line " + reader.getLineNumber());
-/*     */         
-/* 140 */         if (visitor.visitField(srcName, srcDesc))
-/* 141 */           readElement(reader, MappedElementKind.FIELD, dstNsCount, escapeNames, visitor);  continue;
-/*     */       } 
-/* 143 */       if (reader.nextCol("m")) {
-/* 144 */         String srcDesc = reader.nextCol(escapeNames);
-/* 145 */         if (srcDesc == null || srcDesc.isEmpty()) throw new IOException("missing method-desc-a in line " + reader.getLineNumber()); 
-/* 146 */         String srcName = reader.nextCol(escapeNames);
-/* 147 */         if (srcName == null || srcName.isEmpty()) throw new IOException("missing method-name-a in line " + reader.getLineNumber());
-/*     */         
-/* 149 */         if (visitor.visitMethod(srcName, srcDesc))
-/* 150 */           readMethod(reader, dstNsCount, escapeNames, visitor);  continue;
-/*     */       } 
-/* 152 */       if (reader.nextCol("c")) {
-/* 153 */         readComment(reader, MappedElementKind.CLASS, visitor);
-/*     */       }
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private static void readMethod(ColumnFileReader reader, int dstNsCount, boolean escapeNames, MappingVisitor visitor) throws IOException {
-/* 159 */     readDstNames(reader, MappedElementKind.METHOD, dstNsCount, escapeNames, visitor);
-/* 160 */     if (!visitor.visitElementContent(MappedElementKind.METHOD))
-/*     */       return; 
-/* 162 */     while (reader.nextLine(2)) {
-/* 163 */       if (reader.nextCol("p")) {
-/* 164 */         int lvIndex = reader.nextIntCol();
-/* 165 */         if (lvIndex < 0) throw new IOException("missing/invalid parameter lv-index in line " + reader.getLineNumber()); 
-/* 166 */         String srcName = reader.nextCol(escapeNames);
-/* 167 */         if (srcName == null) throw new IOException("missing var-name-a column in line " + reader.getLineNumber()); 
-/* 168 */         if (srcName.isEmpty()) srcName = null;
-/*     */         
-/* 170 */         if (visitor.visitMethodArg(-1, lvIndex, srcName))
-/* 171 */           readElement(reader, MappedElementKind.METHOD_ARG, dstNsCount, escapeNames, visitor);  continue;
-/*     */       } 
-/* 173 */       if (reader.nextCol("v")) {
-/* 174 */         int lvIndex = reader.nextIntCol();
-/* 175 */         if (lvIndex < 0) throw new IOException("missing/invalid variable lv-index in line " + reader.getLineNumber()); 
-/* 176 */         int startOpIdx = reader.nextIntCol();
-/* 177 */         if (startOpIdx < 0) throw new IOException("missing/invalid variable lv-start-offset in line " + reader.getLineNumber()); 
-/* 178 */         int lvtRowIndex = reader.nextIntCol();
-/* 179 */         String srcName = reader.nextCol(escapeNames);
-/* 180 */         if (srcName == null) throw new IOException("missing var-name-a column in line " + reader.getLineNumber()); 
-/* 181 */         if (srcName.isEmpty()) srcName = null;
-/*     */         
-/* 183 */         if (visitor.visitMethodVar(lvtRowIndex, lvIndex, startOpIdx, -1, srcName))
-/* 184 */           readElement(reader, MappedElementKind.METHOD_VAR, dstNsCount, escapeNames, visitor);  continue;
-/*     */       } 
-/* 186 */       if (reader.nextCol("c")) {
-/* 187 */         readComment(reader, MappedElementKind.METHOD, visitor);
-/*     */       }
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private static void readElement(ColumnFileReader reader, MappedElementKind kind, int dstNsCount, boolean escapeNames, MappingVisitor visitor) throws IOException {
-/* 193 */     readDstNames(reader, kind, dstNsCount, escapeNames, visitor);
-/* 194 */     if (!visitor.visitElementContent(kind))
-/*     */       return; 
-/* 196 */     while (reader.nextLine(kind.level + 1)) {
-/* 197 */       if (reader.nextCol("c")) {
-/* 198 */         readComment(reader, kind, visitor);
-/*     */       }
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private static void readComment(ColumnFileReader reader, MappedElementKind subjectKind, MappingVisitor visitor) throws IOException {
-/* 204 */     String comment = reader.nextEscapedCol();
-/* 205 */     if (comment == null) throw new IOException("missing comment in line " + reader.getLineNumber());
-/*     */     
-/* 207 */     visitor.visitComment(subjectKind, comment);
-/*     */   }
-/*     */   
-/*     */   private static void readDstNames(ColumnFileReader reader, MappedElementKind subjectKind, int dstNsCount, boolean escapeNames, MappingVisitor visitor) throws IOException {
-/* 211 */     for (int dstNs = 0; dstNs < dstNsCount; dstNs++) {
-/* 212 */       String name = reader.nextCol(escapeNames);
-/* 213 */       if (name == null) throw new IOException("missing name columns in line " + reader.getLineNumber());
-/*     */       
-/* 215 */       if (!name.isEmpty()) visitor.visitDstName(subjectKind, dstNs, name); 
-/*     */     } 
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\format\tiny\Tiny2FileReader.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny2Util.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny2Util.java
deleted file mode 100644
index 8ba7a5be5b30529d7bb6ddb8fdc1a2955aebdb47..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/format/tiny/Tiny2Util.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.mappingio.format.tiny;
-/*    */ 
-/*    */ import org.jetbrains.annotations.ApiStatus.Internal;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Internal
-/*    */ public final class Tiny2Util
-/*    */ {
-/*    */   public static String unescape(String str) {
-/* 58 */     int type, pos = str.indexOf('\\');
-/* 59 */     if (pos < 0) return str;
-/*    */     
-/* 61 */     StringBuilder ret = new StringBuilder(str.length() - 1);
-/* 62 */     int start = 0;
-/*    */     
-/*    */     do {
-/* 65 */       ret.append(str, start, pos);
-/* 66 */       pos++;
-/*    */ 
-/*    */       
-/* 69 */       if (pos >= str.length())
-/* 70 */         throw new RuntimeException("incomplete escape sequence at the end"); 
-/* 71 */       if ((type = "\\nr0t".indexOf(str.charAt(pos))) < 0) {
-/* 72 */         throw new RuntimeException("invalid escape character: \\" + str.charAt(pos));
-/*    */       }
-/* 74 */       ret.append("\\\n\r\000\t".charAt(type));
-/*    */ 
-/*    */       
-/* 77 */       start = pos + 1;
-/* 78 */     } while ((pos = str.indexOf('\\', start)) >= 0);
-/*    */     
-/* 80 */     ret.append(str, start, str.length());
-/*    */     
-/* 82 */     return ret.toString();
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\format\tiny\Tiny2Util.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/HierarchyInfoProvider.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/HierarchyInfoProvider.java
deleted file mode 100644
index 73045e4d4637703fc4d2c3200961490b7a0a54a3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/HierarchyInfoProvider.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.mappingio.tree;
-/*    */ 
-/*    */ import java.util.Collection;
-/*    */ import org.jetbrains.annotations.ApiStatus.Experimental;
-/*    */ import org.jetbrains.annotations.Nullable;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Experimental
-/*    */ public interface HierarchyInfoProvider<T>
-/*    */ {
-/*    */   String getNamespace();
-/*    */   
-/*    */   @Nullable
-/*    */   T getMethodHierarchy(String paramString1, String paramString2, @Nullable String paramString3);
-/*    */   
-/*    */   @Nullable
-/*    */   default T getMethodHierarchy(MappingTreeView.MethodMappingView method) {
-/* 48 */     int nsId = method.getTree().getNamespaceId(getNamespace());
-/* 49 */     if (nsId == -2) throw new IllegalArgumentException("disassociated namespace");
-/*    */     
-/* 51 */     String owner = method.getOwner().getName(nsId);
-/* 52 */     String name = method.getName(nsId);
-/* 53 */     String desc = method.getDesc(nsId);
-/*    */     
-/* 55 */     if (owner == null || name == null) {
-/* 56 */       return null;
-/*    */     }
-/* 58 */     return getMethodHierarchy(owner, name, desc);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   int getHierarchySize(T paramT);
-/*    */ 
-/*    */   
-/*    */   Collection<? extends MappingTreeView.MethodMappingView> getHierarchyMethods(T paramT, MappingTreeView paramMappingTreeView);
-/*    */   
-/*    */   default Collection<? extends MappingTree.MethodMapping> getHierarchyMethods(T hierarchy, MappingTree tree) {
-/* 68 */     return (Collection)getHierarchyMethods(hierarchy, tree);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\tree\HierarchyInfoProvider.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MappingTree.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MappingTree.java
deleted file mode 100644
index 53a8670dd75e8b0b410bf4d59a74396b49613237..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MappingTree.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.mappingio.tree;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MappingTreeView.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MappingTreeView.java
deleted file mode 100644
index fd51e6eb2eec957f080e2d22e9b7e7671632c502..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MappingTreeView.java
+++ /dev/null
@@ -1,345 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.tree;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.util.Collection;
-/*     */ import java.util.List;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*     */ import org.jetbrains.annotations.Nullable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public interface MappingTreeView
-/*     */ {
-/*     */   static {
-/*  27 */     if (null.$assertionsDisabled);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default int getNamespaceId(String namespace) {
-/*  55 */     if (namespace.equals(getSrcNamespace())) {
-/*  56 */       return -1;
-/*     */     }
-/*     */     
-/*  59 */     int ret = getDstNamespaces().indexOf(namespace);
-/*     */     
-/*  61 */     return (ret >= 0) ? ret : -2;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   @Nullable
-/*     */   default ClassMappingView getClass(String name, int namespace) {
-/*  78 */     if (namespace < 0) return getClass(name);
-/*     */     
-/*  80 */     for (ClassMappingView cls : getClasses()) {
-/*  81 */       if (name.equals(cls.getDstName(namespace))) return cls;
-/*     */     
-/*     */     } 
-/*  84 */     return null;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   @Nullable
-/*     */   default FieldMappingView getField(String clsName, String name, @Nullable String desc, int namespace) {
-/*  98 */     ClassMappingView owner = getClass(clsName, namespace);
-/*  99 */     return (owner != null) ? owner.getField(name, desc, namespace) : null;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   @Nullable
-/*     */   default MethodMappingView getMethod(String clsName, String name, @Nullable String desc, int namespace) {
-/* 116 */     ClassMappingView owner = getClass(clsName, namespace);
-/* 117 */     return (owner != null) ? owner.getMethod(name, desc, namespace) : null;
-/*     */   }
-/*     */   
-/*     */   default void accept(MappingVisitor visitor) throws IOException {
-/* 121 */     accept(visitor, VisitOrder.createByInputOrder());
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default String mapClassName(String name, int srcNamespace, int dstNamespace) {
-/* 131 */     if (!null.$assertionsDisabled && name.indexOf('.') >= 0) throw new AssertionError();
-/*     */     
-/* 133 */     if (srcNamespace == dstNamespace) return name;
-/*     */     
-/* 135 */     ClassMappingView cls = getClass(name, srcNamespace);
-/* 136 */     if (cls == null) return name;
-/*     */     
-/* 138 */     String ret = cls.getName(dstNamespace);
-/*     */     
-/* 140 */     return (ret != null) ? ret : name;
-/*     */   }
-/*     */   
-/*     */   default String mapDesc(CharSequence desc, int namespace) {
-/* 144 */     return mapDesc(desc, 0, desc.length(), -1, namespace);
-/*     */   }
-/*     */   
-/*     */   default String mapDesc(CharSequence desc, int srcNamespace, int dstNamespace) {
-/* 148 */     return mapDesc(desc, 0, desc.length(), srcNamespace, dstNamespace);
-/*     */   }
-/*     */   @Nullable
-/*     */   String getSrcNamespace();
-/*     */   List<String> getDstNamespaces();
-/*     */   Collection<? extends ClassMappingView> getClasses();
-/*     */   
-/*     */   default String mapDesc(CharSequence desc, int start, int end, int srcNamespace, int dstNamespace) {
-/* 156 */     if (srcNamespace == dstNamespace) return desc.subSequence(start, end).toString();
-/*     */     
-/* 158 */     StringBuilder ret = null;
-/* 159 */     int copyOffset = start;
-/* 160 */     int offset = start;
-/*     */     
-/* 162 */     while (offset < end) {
-/* 163 */       char c = desc.charAt(offset++);
-/*     */       
-/* 165 */       if (c == 'L') {
-/* 166 */         int idEnd = offset;
-/*     */         
-/* 168 */         while (idEnd < end) {
-/* 169 */           c = desc.charAt(idEnd);
-/* 170 */           if (c == ';')
-/* 171 */             break;  idEnd++;
-/*     */         } 
-/*     */         
-/* 174 */         if (idEnd >= end) throw new IllegalArgumentException("invalid descriptor: " + desc.subSequence(start, end));
-/*     */         
-/* 176 */         String cls = desc.subSequence(offset, idEnd).toString();
-/* 177 */         String mappedCls = mapClassName(cls, srcNamespace, dstNamespace);
-/*     */         
-/* 179 */         if (mappedCls != null && !mappedCls.equals(cls)) {
-/* 180 */           if (ret == null) ret = new StringBuilder(end - start);
-/*     */           
-/* 182 */           ret.append(desc, copyOffset, offset);
-/* 183 */           ret.append(mappedCls);
-/* 184 */           copyOffset = idEnd;
-/*     */         } 
-/*     */         
-/* 187 */         offset = idEnd + 1;
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 191 */     if (ret == null) return desc.subSequence(start, end).toString();
-/*     */     
-/* 193 */     ret.append(desc, copyOffset, end);
-/*     */     
-/* 195 */     return ret.toString();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   @Nullable
-/*     */   ClassMappingView getClass(String paramString);
-/*     */ 
-/*     */   
-/*     */   void accept(MappingVisitor paramMappingVisitor, VisitOrder paramVisitOrder) throws IOException;
-/*     */ 
-/*     */   
-/*     */   public static interface ElementMappingView
-/*     */   {
-/*     */     MappingTreeView getTree();
-/*     */ 
-/*     */     
-/*     */     @Nullable
-/*     */     default String getName(int namespace) {
-/* 213 */       if (namespace < 0) {
-/* 214 */         return getSrcName();
-/*     */       }
-/* 216 */       return getDstName(namespace);
-/*     */     }
-/*     */     String getSrcName();
-/*     */     
-/*     */     @Nullable
-/*     */     default String getName(String namespace) {
-/* 222 */       int nsId = getTree().getNamespaceId(namespace);
-/*     */       
-/* 224 */       if (nsId == -2) {
-/* 225 */         return null;
-/*     */       }
-/* 227 */       return getName(nsId);
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     @Nullable
-/*     */     String getDstName(int param1Int);
-/*     */ 
-/*     */     
-/*     */     @Nullable
-/*     */     String getComment();
-/*     */   }
-/*     */   
-/*     */   public static interface ClassMappingView
-/*     */     extends ElementMappingView
-/*     */   {
-/*     */     Collection<? extends FieldMappingView> getFields();
-/*     */     
-/*     */     @Nullable
-/*     */     MappingTreeView.FieldMappingView getField(String param1String1, @Nullable String param1String2);
-/*     */     
-/*     */     @Nullable
-/*     */     default MappingTreeView.FieldMappingView getField(String name, @Nullable String desc, int namespace) {
-/* 249 */       if (namespace < 0) return getField(name, desc);
-/*     */       
-/* 251 */       for (FieldMappingView field : getFields()) {
-/* 252 */         if (!name.equals(field.getDstName(namespace)))
-/*     */           continue;  String mDesc;
-/* 254 */         if (desc != null && (mDesc = field.getDesc(namespace)) != null && !desc.equals(mDesc))
-/*     */           continue; 
-/* 256 */         return field;
-/*     */       } 
-/*     */       
-/* 259 */       return null;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     Collection<? extends MethodMappingView> getMethods();
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     @Nullable
-/*     */     MappingTreeView.MethodMappingView getMethod(String param1String1, @Nullable String param1String2);
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     @Nullable
-/*     */     default MappingTreeView.MethodMappingView getMethod(String name, @Nullable String desc, int namespace) {
-/* 275 */       if (namespace < 0) return getMethod(name, desc);
-/*     */       
-/* 277 */       for (MethodMappingView method : getMethods()) {
-/* 278 */         if (!name.equals(method.getDstName(namespace)))
-/*     */           continue; 
-/*     */         String mDesc;
-/* 281 */         if (desc != null && (mDesc = method.getDesc(namespace)) != null && !desc.equals(mDesc) && (!desc.endsWith(")") || !mDesc.startsWith(desc)))
-/*     */           continue; 
-/* 283 */         return method;
-/*     */       } 
-/*     */       
-/* 286 */       return null;
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static interface MemberMappingView
-/*     */     extends ElementMappingView
-/*     */   {
-/*     */     ClassMappingView getOwner();
-/*     */ 
-/*     */     
-/*     */     @Nullable
-/*     */     String getSrcDesc();
-/*     */ 
-/*     */     
-/*     */     @Nullable
-/*     */     default String getDesc(int namespace) {
-/* 304 */       String srcDesc = getSrcDesc();
-/*     */       
-/* 306 */       if (namespace < 0 || srcDesc == null) {
-/* 307 */         return srcDesc;
-/*     */       }
-/* 309 */       return getTree().mapDesc(srcDesc, namespace);
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   public static interface FieldMappingView extends MemberMappingView {}
-/*     */   
-/*     */   public static interface MethodMappingView extends MemberMappingView {}
-/*     */   
-/*     */   public static interface MethodVarMappingView extends ElementMappingView {
-/*     */     int getLvtRowIndex();
-/*     */     
-/*     */     int getLvIndex();
-/*     */     
-/*     */     int getStartOpIdx();
-/*     */     
-/*     */     int getEndOpIdx();
-/*     */   }
-/*     */   
-/*     */   public static interface MethodArgMappingView extends ElementMappingView {
-/*     */     int getArgPosition();
-/*     */     
-/*     */     int getLvIndex();
-/*     */   }
-/*     */   
-/*     */   public static interface MetadataEntryView {
-/*     */     String getKey();
-/*     */     
-/*     */     @Nullable
-/*     */     String getValue();
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\tree\MappingTreeView.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MemoryMappingTree.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MemoryMappingTree.java
deleted file mode 100644
index 53a8670dd75e8b0b410bf4d59a74396b49613237..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/MemoryMappingTree.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.mappingio.tree;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/VisitOrder.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/VisitOrder.java
deleted file mode 100644
index 074496f1ccf2cdeea5519b7a251d7013b3237b03..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/VisitOrder.java
+++ /dev/null
@@ -1,274 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.mappingio.tree;
-/*     */ 
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.Collection;
-/*     */ import java.util.Comparator;
-/*     */ import java.util.List;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class VisitOrder
-/*     */ {
-/*     */   private Comparator<MappingTreeView.ClassMappingView> classComparator;
-/*     */   private Comparator<MappingTreeView.FieldMappingView> fieldComparator;
-/*     */   private Comparator<MappingTreeView.MethodMappingView> methodComparator;
-/*     */   private Comparator<MappingTreeView.MethodArgMappingView> methodArgComparator;
-/*     */   private Comparator<MappingTreeView.MethodVarMappingView> methodVarComparator;
-/*     */   private boolean methodsFirst;
-/*     */   private boolean methodVarsFirst;
-/*     */   
-/*     */   public static VisitOrder createByInputOrder() {
-/*  41 */     return new VisitOrder();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public <T extends MappingTreeView.ClassMappingView> Collection<T> sortClasses(Collection<T> classes) {
-/* 233 */     return sort(classes, (Comparator)this.classComparator);
-/*     */   }
-/*     */   
-/*     */   public <T extends MappingTreeView.FieldMappingView> Collection<T> sortFields(Collection<T> fields) {
-/* 237 */     return sort(fields, (Comparator)this.fieldComparator);
-/*     */   }
-/*     */   
-/*     */   public <T extends MappingTreeView.MethodMappingView> Collection<T> sortMethods(Collection<T> methods) {
-/* 241 */     return sort(methods, (Comparator)this.methodComparator);
-/*     */   }
-/*     */   
-/*     */   public <T extends MappingTreeView.MethodArgMappingView> Collection<T> sortMethodArgs(Collection<T> args) {
-/* 245 */     return sort(args, (Comparator)this.methodArgComparator);
-/*     */   }
-/*     */   
-/*     */   public <T extends MappingTreeView.MethodVarMappingView> Collection<T> sortMethodVars(Collection<T> vars) {
-/* 249 */     return sort(vars, (Comparator)this.methodVarComparator);
-/*     */   }
-/*     */   
-/*     */   private static <T> Collection<T> sort(Collection<T> inputs, Comparator<? super T> comparator) {
-/* 253 */     if (comparator == null || inputs.size() < 2) return inputs;
-/*     */     
-/* 255 */     List<T> ret = new ArrayList<>(inputs);
-/* 256 */     ret.sort(comparator);
-/*     */     
-/* 258 */     return ret;
-/*     */   }
-/*     */   
-/*     */   public boolean isMethodsFirst() {
-/* 262 */     return this.methodsFirst;
-/*     */   }
-/*     */   
-/*     */   public boolean isMethodVarsFirst() {
-/* 266 */     return this.methodVarsFirst;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\tree\VisitOrder.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/VisitableMappingTree.java b/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/VisitableMappingTree.java
deleted file mode 100644
index f20935ed77b74c3c5357e9754a3fb0d1e67a7fb1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/mappingio/tree/VisitableMappingTree.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package net.fabricmc.loader.impl.lib.mappingio.tree;
-
-import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-
-public interface VisitableMappingTree extends MappingVisitor, MappingTree {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\mappingio\tree\VisitableMappingTree.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/about-sat4j.html b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/about-sat4j.html
deleted file mode 100644
index e0924b1ce0dc9aefd293f3d83756f31e01d4a8c4..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/about-sat4j.html
+++ /dev/null
@@ -1,56 +0,0 @@
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
-    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
-<title>About</title>
-</head>
-<body lang="EN-US">
-<h2>About This Content</h2>
- 
-<p>June, 2010</p>	
-<h3>License</h3>
-
-<p>The Eclipse Foundation makes available all content in this plug-in (&quot;Content&quot;).    		Unless otherwise indicated below, the Content is provided to you under the terms and conditions of the  		Eclipse Public License Version 1.0 (&quot;EPL&quot;).  A copy of the EPL is available   		at <a href="http://www.eclipse.org/org/documents/epl-v10.php">http://www.eclipse.org/legal/epl-v10.html</a>.  		For purposes of the EPL, &quot;Program&quot; will mean the Content.</p>
-
-<p>If you did not receive this Content directly from the Eclipse Foundation, the Content is   		being redistributed by another party (&quot;Redistributor&quot;) and different terms and conditions may  		apply to your use of any object code in the Content.  Check the Redistributor&rsquo;s license   		that was provided with the Content.  If no such license exists, contact the Redistributor.  Unless otherwise  		indicated below, the terms and conditions of the EPL still apply to any source code in the Content  		and such source code may be obtained at <a href="http://www.eclipse.org/">http://www.eclipse.org</a>.</p>
-
-<h3>Third Party Content</h3>
-<p>The Content includes items that have been sourced from third parties as set out below. If you   		did not receive this Content directly from the Eclipse Foundation, the following is provided   		for informational purposes only, and you should look to the Redistributor&rsquo;s license for   		terms and conditions of use.</p>
-<h4>SAT4J 2.3.6 SUBSET (Core) </h4>
-<p>The SAT4J project makes available all content in this plug-in ("Content"). Your use of the Content is governed by the terms and conditions of the Eclipse Public License Version 1.0 ("EPL"). A copy of the EPL is available at http://www.eclipse.org/legal/epl-v10.html. For purposes of the EPL, "Program" will mean the Content. </p>
-<p>Alternatively, the Content may be obtained from the SAT4J project website at <a href="http://www.sat4j.org/">http://www.sat4j.org/</a> for use under the terms of either the GNU Lesser General Public License Version 2.1 or later (the "LGPL"), in which case the provisions of the LGPL are applicable instead of those above. If you wish to allow use of your version of the Content only under the terms of the LGPL, and not to allow others to use your version of this Content under the terms of the EPL, indicate your decision by deleting the provisions above and replace them with the notice and other provisions required by the LGPL. If you do not delete the provisions above, a recipient may use your version of this file under the terms of the EPL or the LGPL.</p>
-<p>The Eclipse Foundation elects to include this software in this distribution under the EPL license. The source code for this plug-in can be obtained from the SAT4J project website at <a href="http://www.sat4j.org/">http://www.sat4j.org/</a></p>
-
-<p>SAT4J includes content that was obtained under licenses  that differ from the SAT4J licenses. <br />
-  The content in the following classes</br>
-
-<ul>
-  <li>org/sat4j/core/Vec.java</li>
-  <li>org/sat4j/core/VecInt.java</li>
-  <li>org/sat4j/minisat/core/Solver.java</li>
-</ul>
-<p>is based on code obtained from the  Minisat 1.1.4 implementation, the source code for which can be found at <a href="www.minisat.se ">www.minisat.se</a>, under the following permissive license:<br />
-<br />
- MiniSat -- Copyright (c) 2003-2005, Niklas Een, Niklas Sorensson<br />
-<br />
- Permission is hereby granted, free of charge, to any person obtaining a<br />
- copy of this software and associated documentation files (the<br />
-&quot;Software&quot;), to deal in the Software without restriction, including<br />
- without limitation the rights to use, copy, modify, merge, publish,<br />
-distribute, sublicense, and/or sell copies of the Software, and to<br />
- permit persons to whom the Software is furnished to do so, subject to<br />
- the following conditions:<br />
-<br />
- The above copyright notice and this permission notice shall be included<br />
- in all copies or substantial portions of the Software.<br />
-<br />
- THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS<br />
- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br />
- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND<br />
- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE<br />
- LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION<br />
- OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION<br />
-WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. </p>
-</body>
-</html>
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ASolverFactory.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ASolverFactory.java
deleted file mode 100644
index 6ebdd476c8b482b8df48fccd53769059629f3566..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ASolverFactory.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.core;
-
-import java.io.Serializable;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-
-public abstract class ASolverFactory<T extends ISolver> implements Serializable {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\core\ASolverFactory.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/EmptyVecInt.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/EmptyVecInt.java
deleted file mode 100644
index 818a9f149f579d3e420c60ac8e54ba3fc97d0b31..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/EmptyVecInt.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.core;
-/*     */ 
-/*     */ import java.util.Comparator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ final class EmptyVecInt
-/*     */   implements IVecInt
-/*     */ {
-/*     */   public int size() {
-/*  44 */     return 0;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void shrink(int nofelems) {}
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IVecInt pop() {
-/*  54 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void growTo(int newsize, int pad) {}
-/*     */ 
-/*     */   
-/*     */   public void ensure(int nsize) {}
-/*     */   
-/*     */   public IVecInt push(int elem) {
-/*  64 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void unsafePush(int elem) {
-/*  68 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void clear() {}
-/*     */   
-/*     */   public int last() {
-/*  75 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public int get(int i) {
-/*  79 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void set(int i, int o) {
-/*  83 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public boolean contains(int e) {
-/*  87 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void copyTo(IVecInt copy) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void copyTo(int[] is) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void moveTo(int[] dest) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(int elem) {
-/* 110 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public int delete(int i) {
-/* 114 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void sort() {}
-/*     */ 
-/*     */   
-/*     */   public void sortUnique() {}
-/*     */   
-/*     */   public int unsafeGet(int eleem) {
-/* 124 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void moveTo(int dest, int source) {
-/* 136 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public boolean isEmpty() {
-/* 140 */     return true;
-/*     */   }
-/*     */   
-/*     */   public IteratorInt iterator() {
-/* 144 */     return new IteratorInt()
-/*     */       {
-/*     */         public boolean hasNext() {
-/* 147 */           return false;
-/*     */         }
-/*     */         
-/*     */         public int next() {
-/* 151 */           throw new UnsupportedOperationException();
-/*     */         }
-/*     */       };
-/*     */   }
-/*     */   
-/*     */   public int[] toArray() {
-/* 157 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public int indexOf(int e) {
-/* 161 */     return -1;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 166 */     return "[]";
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object o) {
-/* 179 */     if (o instanceof IVecInt) {
-/* 180 */       return ((IVecInt)o).isEmpty();
-/*     */     }
-/* 182 */     return false;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 187 */     return 0;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void sort(Comparator<Integer> comparator) {}
-/*     */ 
-/*     */   
-/*     */   public IVecInt clone() {
-/* 195 */     return new EmptyVecInt();
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\core\EmptyVecInt.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/LiteralsUtils.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/LiteralsUtils.java
deleted file mode 100644
index 7556ba6ce063d7ef58dd34d0b2efb938c97628ad..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/LiteralsUtils.java
+++ /dev/null
@@ -1,136 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.core;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class LiteralsUtils
-/*     */ {
-/*     */   public static int var(int p) {
-/*  67 */     assert p > 1;
-/*  68 */     return p >> 1;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static int neg(int p) {
-/*  79 */     return p ^ 0x1;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static int negLit(int var) {
-/* 103 */     return var << 1 ^ 0x1;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static int toDimacs(int p) {
-/* 115 */     return (((p & 0x1) == 0) ? 1 : -1) * (p >> 1);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static int toInternal(int x) {
-/* 128 */     return (x < 0) ? (-x << 1 ^ 0x1) : (x << 1);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\core\LiteralsUtils.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ReadOnlyVec.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ReadOnlyVec.java
deleted file mode 100644
index eca391fd78f5300759f262c65f4f3b0ee3558052..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ReadOnlyVec.java
+++ /dev/null
@@ -1,207 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.core;
-/*     */ 
-/*     */ import java.util.Comparator;
-/*     */ import java.util.Iterator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class ReadOnlyVec<T>
-/*     */   implements IVec<T>
-/*     */ {
-/*     */   private final IVec<T> vec;
-/*     */   
-/*     */   public ReadOnlyVec(IVec<T> vec) {
-/*  55 */     this.vec = vec;
-/*     */   }
-/*     */   
-/*     */   public void clear() {
-/*  59 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void copyTo(IVec<T> copy) {
-/*  63 */     this.vec.copyTo(copy);
-/*     */   }
-/*     */   
-/*     */   public <E> void copyTo(E[] dest) {
-/*  67 */     this.vec.copyTo((Object[])dest);
-/*     */   }
-/*     */   
-/*     */   public T delete(int i) {
-/*  71 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void ensure(int nsize) {
-/*  75 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public T get(int i) {
-/*  80 */     return (T)this.vec.get(i);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isEmpty() {
-/*  96 */     return this.vec.isEmpty();
-/*     */   }
-/*     */   
-/*     */   public Iterator<T> iterator() {
-/* 100 */     return this.vec.iterator();
-/*     */   }
-/*     */   
-/*     */   public T last() {
-/* 104 */     return (T)this.vec.last();
-/*     */   }
-/*     */   
-/*     */   public void moveTo(IVec<T> dest) {
-/* 108 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void moveTo(int dest, int source) {
-/* 112 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void pop() {
-/* 116 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public IVec<T> push(T elem) {
-/* 120 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void remove(T elem) {
-/* 124 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void removeFromLast(T elem) {
-/* 128 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void set(int i, T o) {
-/* 132 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void shrinkTo(int newsize) {
-/* 140 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 144 */     return this.vec.size();
-/*     */   }
-/*     */   
-/*     */   public void sort(Comparator<T> comparator) {
-/* 148 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 182 */     return this.vec.toString();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 187 */     return this.vec.hashCode();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 192 */     return this.vec.equals(obj);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public IVec<T> clone() {
-/* 197 */     IVec<T> cloned = new Vec<>(size());
-/* 198 */     copyTo(cloned);
-/* 199 */     return new ReadOnlyVec(cloned);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\core\ReadOnlyVec.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ReadOnlyVecInt.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ReadOnlyVecInt.java
deleted file mode 100644
index 990321c964ea4de8693b2da25d96d6ca2e44dfce..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/ReadOnlyVecInt.java
+++ /dev/null
@@ -1,232 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.core;
-/*     */ 
-/*     */ import java.util.Comparator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class ReadOnlyVecInt
-/*     */   implements IVecInt
-/*     */ {
-/*     */   private final IVecInt vec;
-/*     */   
-/*     */   public ReadOnlyVecInt(IVecInt vec) {
-/*  53 */     this.vec = vec;
-/*     */   }
-/*     */   
-/*     */   public void clear() {
-/*  57 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public boolean contains(int e) {
-/*  61 */     return this.vec.contains(e);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void copyTo(IVecInt copy) {
-/*  73 */     this.vec.copyTo(copy);
-/*     */   }
-/*     */   
-/*     */   public void copyTo(int[] is) {
-/*  77 */     this.vec.copyTo(is);
-/*     */   }
-/*     */   
-/*     */   public int delete(int i) {
-/*  81 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void ensure(int nsize) {
-/*  85 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public int get(int i) {
-/*  89 */     return this.vec.get(i);
-/*     */   }
-/*     */   
-/*     */   public void growTo(int newsize, int pad) {
-/*  93 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isEmpty() {
-/* 101 */     return this.vec.isEmpty();
-/*     */   }
-/*     */   
-/*     */   public IteratorInt iterator() {
-/* 105 */     return this.vec.iterator();
-/*     */   }
-/*     */   
-/*     */   public int last() {
-/* 109 */     return this.vec.last();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void moveTo(int[] dest) {
-/* 117 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void moveTo(int dest, int source) {
-/* 121 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IVecInt pop() {
-/* 129 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public IVecInt push(int elem) {
-/* 133 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void remove(int elem) {
-/* 137 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void set(int i, int o) {
-/* 141 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void shrink(int nofelems) {
-/* 145 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int size() {
-/* 153 */     return this.vec.size();
-/*     */   }
-/*     */   
-/*     */   public void sort() {
-/* 157 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void sortUnique() {
-/* 161 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public int unsafeGet(int eleem) {
-/* 165 */     return this.vec.unsafeGet(eleem);
-/*     */   }
-/*     */   
-/*     */   public void unsafePush(int elem) {
-/* 169 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] toArray() {
-/* 176 */     int[] copy = new int[this.vec.size()];
-/* 177 */     this.vec.copyTo(copy);
-/* 178 */     return copy;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int indexOf(int e) {
-/* 185 */     return this.vec.indexOf(e);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 190 */     return this.vec.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 208 */     return this.vec.hashCode();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 213 */     return this.vec.equals(obj);
-/*     */   }
-/*     */   
-/*     */   public void sort(Comparator<Integer> comparator) {
-/* 217 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public IVecInt clone() {
-/* 222 */     IVecInt cloned = new VecInt(size());
-/* 223 */     copyTo(cloned);
-/* 224 */     return cloned;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\core\ReadOnlyVecInt.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/Vec.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/Vec.java
deleted file mode 100644
index 17010db302ae95e958a26e883a80c6b1acd690f0..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/Vec.java
+++ /dev/null
@@ -1,554 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.core;
-/*     */ 
-/*     */ import java.util.Arrays;
-/*     */ import java.util.Comparator;
-/*     */ import java.util.Iterator;
-/*     */ import java.util.NoSuchElementException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class Vec<T>
-/*     */   implements IVec<T>
-/*     */ {
-/*     */   private int nbelem;
-/*     */   private T[] myarray;
-/*     */   
-/*     */   public Vec() {
-/*  75 */     this(5);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Vec(int size) {
-/* 101 */     this.myarray = (T[])new Object[size];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int size() {
-/* 123 */     return this.nbelem;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void shrinkTo(int newsize) {
-/* 149 */     for (int i = this.nbelem; i > newsize; i--) {
-/* 150 */       this.myarray[i - 1] = null;
-/*     */     }
-/* 152 */     this.nbelem = newsize;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void pop() {
-/* 162 */     this.myarray[--this.nbelem] = null;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void ensure(int nsize) {
-/* 176 */     if (nsize >= this.myarray.length) {
-/* 177 */       T[] narray = (T[])new Object[Math.max(nsize, this.nbelem * 2)];
-/* 178 */       System.arraycopy(this.myarray, 0, narray, 0, this.nbelem);
-/* 179 */       this.myarray = narray;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public IVec<T> push(T elem) {
-/* 184 */     ensure(this.nbelem + 1);
-/* 185 */     this.myarray[this.nbelem++] = elem;
-/* 186 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void clear() {
-/* 224 */     Arrays.fill((Object[])this.myarray, 0, this.nbelem, (Object)null);
-/* 225 */     this.nbelem = 0;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public T last() {
-/* 236 */     return this.myarray[this.nbelem - 1];
-/*     */   }
-/*     */   
-/*     */   public T get(int index) {
-/* 240 */     return this.myarray[index];
-/*     */   }
-/*     */   
-/*     */   public void set(int index, T elem) {
-/* 244 */     this.myarray[index] = elem;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(T elem) {
-/* 255 */     int j = 0;
-/* 256 */     for (; this.myarray[j] != elem; j++) {
-/* 257 */       if (j == size()) {
-/* 258 */         throw new NoSuchElementException();
-/*     */       }
-/*     */     } 
-/* 261 */     System.arraycopy(this.myarray, j + 1, this.myarray, j, size() - j - 1);
-/* 262 */     this.myarray[--this.nbelem] = null;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void removeFromLast(T elem) {
-/* 275 */     int j = this.nbelem - 1;
-/* 276 */     for (; this.myarray[j] != elem; j--) {
-/* 277 */       if (j == -1) {
-/* 278 */         throw new NoSuchElementException();
-/*     */       }
-/*     */     } 
-/* 281 */     System.arraycopy(this.myarray, j + 1, this.myarray, j, size() - j - 1);
-/* 282 */     this.myarray[--this.nbelem] = null;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public T delete(int index) {
-/* 296 */     T ith = this.myarray[index];
-/* 297 */     this.myarray[index] = this.myarray[--this.nbelem];
-/* 298 */     this.myarray[this.nbelem] = null;
-/* 299 */     return ith;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void copyTo(IVec<T> copy) {
-/* 311 */     Vec<T> ncopy = (Vec<T>)copy;
-/* 312 */     int nsize = this.nbelem + ncopy.nbelem;
-/* 313 */     copy.ensure(nsize);
-/* 314 */     System.arraycopy(this.myarray, 0, ncopy.myarray, ncopy.nbelem, this.nbelem);
-/*     */     
-/* 316 */     ncopy.nbelem = nsize;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public <E> void copyTo(E[] dest) {
-/* 331 */     System.arraycopy(this.myarray, 0, dest, 0, this.nbelem);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void moveTo(IVec<T> dest) {
-/* 338 */     copyTo(dest);
-/* 339 */     clear();
-/*     */   }
-/*     */   
-/*     */   public void moveTo(int dest, int source) {
-/* 343 */     if (dest != source) {
-/* 344 */       this.myarray[dest] = this.myarray[source];
-/* 345 */       this.myarray[source] = null;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 365 */     StringBuilder stb = new StringBuilder();
-/* 366 */     for (int i = 0; i < this.nbelem - 1; i++) {
-/* 367 */       stb.append(this.myarray[i]);
-/* 368 */       stb.append(",");
-/*     */     } 
-/* 370 */     if (this.nbelem > 0) {
-/* 371 */       stb.append(this.myarray[this.nbelem - 1]);
-/*     */     }
-/* 373 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void selectionSort(int from, int to, Comparator<T> cmp) {
-/* 380 */     for (int i = from; i < to - 1; i++) {
-/* 381 */       int besti = i;
-/* 382 */       for (int j = i + 1; j < to; j++) {
-/* 383 */         if (cmp.compare(this.myarray[j], this.myarray[besti]) < 0) {
-/* 384 */           besti = j;
-/*     */         }
-/*     */       } 
-/* 387 */       T tmp = this.myarray[i];
-/* 388 */       this.myarray[i] = this.myarray[besti];
-/* 389 */       this.myarray[besti] = tmp;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   void sort(int from, int to, Comparator<T> cmp) {
-/* 394 */     int width = to - from;
-/* 395 */     if (width <= 15) {
-/* 396 */       selectionSort(from, to, cmp);
-/*     */     } else {
-/* 398 */       T pivot = this.myarray[width / 2 + from];
-/*     */       
-/* 400 */       int i = from - 1;
-/* 401 */       int j = to;
-/*     */ 
-/*     */       
-/*     */       while (true) {
-/* 405 */         i++;
-/* 406 */         if (cmp.compare(this.myarray[i], pivot) >= 0) {
-/*     */           do {
-/* 408 */             j--;
-/* 409 */           } while (cmp.compare(pivot, this.myarray[j]) < 0);
-/*     */           
-/* 411 */           if (i >= j) {
-/*     */             break;
-/*     */           }
-/*     */           
-/* 415 */           T tmp = this.myarray[i];
-/* 416 */           this.myarray[i] = this.myarray[j];
-/* 417 */           this.myarray[j] = tmp;
-/*     */         } 
-/*     */       } 
-/* 420 */       sort(from, i, cmp);
-/* 421 */       sort(i, to, cmp);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void sort(Comparator<T> comparator) {
-/* 432 */     sort(0, this.nbelem, comparator);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 464 */     if (obj instanceof IVec) {
-/* 465 */       IVec<?> v = (IVec)obj;
-/* 466 */       if (v.size() != size()) {
-/* 467 */         return false;
-/*     */       }
-/* 469 */       for (int i = 0; i < size(); i++) {
-/* 470 */         if (!v.get(i).equals(get(i))) {
-/* 471 */           return false;
-/*     */         }
-/*     */       } 
-/* 474 */       return true;
-/*     */     } 
-/* 476 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 486 */     int sum = 0;
-/* 487 */     for (int i = 0; i < this.nbelem; i++) {
-/* 488 */       sum += this.myarray[i].hashCode() / this.nbelem;
-/*     */     }
-/* 490 */     return sum;
-/*     */   }
-/*     */   
-/*     */   public Iterator<T> iterator() {
-/* 494 */     return new Iterator<T>() {
-/* 495 */         private int i = 0;
-/*     */         
-/*     */         public boolean hasNext() {
-/* 498 */           return (this.i < Vec.this.nbelem);
-/*     */         }
-/*     */         
-/*     */         public T next() {
-/* 502 */           if (this.i == Vec.this.nbelem) {
-/* 503 */             throw new NoSuchElementException();
-/*     */           }
-/* 505 */           return (T)Vec.this.myarray[this.i++];
-/*     */         }
-/*     */         
-/*     */         public void remove() {
-/* 509 */           throw new UnsupportedOperationException();
-/*     */         }
-/*     */       };
-/*     */   }
-/*     */   
-/*     */   public boolean isEmpty() {
-/* 515 */     return (this.nbelem == 0);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IVec<T> clone() {
-/* 544 */     IVec<T> cloned = new Vec(size());
-/* 545 */     copyTo(cloned);
-/* 546 */     return cloned;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\core\Vec.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/VecInt.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/VecInt.java
deleted file mode 100644
index 1c18bcbd0d97f720bb907d763d0de34f5f99592a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/core/VecInt.java
+++ /dev/null
@@ -1,665 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.core;
-/*     */ 
-/*     */ import java.util.Comparator;
-/*     */ import java.util.NoSuchElementException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class VecInt
-/*     */   implements IVecInt
-/*     */ {
-/*  76 */   public static final IVecInt EMPTY = new EmptyVecInt(); private int nbelem;
-/*     */   
-/*     */   public VecInt() {
-/*  79 */     this(5);
-/*     */   }
-/*     */   private int[] myarray;
-/*     */   public VecInt(int size) {
-/*  83 */     this.myarray = new int[size];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public VecInt(int[] lits) {
-/*  97 */     this.myarray = lits;
-/*  98 */     this.nbelem = lits.length;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public VecInt(int size, int pad) {
-/* 110 */     this.myarray = new int[size];
-/* 111 */     for (int i = 0; i < size; i++) {
-/* 112 */       this.myarray[i] = pad;
-/*     */     }
-/* 114 */     this.nbelem = size;
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 118 */     return this.nbelem;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void shrink(int nofelems) {
-/* 130 */     this.nbelem -= nofelems;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IVecInt pop() {
-/* 145 */     this.nbelem--;
-/* 146 */     return this;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void growTo(int newsize, int pad) {
-/* 151 */     ensure(newsize);
-/* 152 */     while (--newsize >= 0) {
-/* 153 */       this.myarray[this.nbelem++] = pad;
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   public void ensure(int nsize) {
-/* 158 */     if (nsize >= this.myarray.length) {
-/* 159 */       int[] narray = new int[Math.max(nsize, this.nbelem * 2)];
-/* 160 */       System.arraycopy(this.myarray, 0, narray, 0, this.nbelem);
-/* 161 */       this.myarray = narray;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public IVecInt push(int elem) {
-/* 166 */     ensure(this.nbelem + 1);
-/* 167 */     this.myarray[this.nbelem++] = elem;
-/* 168 */     return this;
-/*     */   }
-/*     */   
-/*     */   public void unsafePush(int elem) {
-/* 172 */     this.myarray[this.nbelem++] = elem;
-/*     */   }
-/*     */   
-/*     */   public void clear() {
-/* 176 */     this.nbelem = 0;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int last() {
-/* 181 */     return this.myarray[this.nbelem - 1];
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 186 */     return this.myarray[i];
-/*     */   }
-/*     */   
-/*     */   public int unsafeGet(int i) {
-/* 190 */     return this.myarray[i];
-/*     */   }
-/*     */   
-/*     */   public void set(int i, int o) {
-/* 194 */     assert i >= 0 && i < this.nbelem;
-/* 195 */     this.myarray[i] = o;
-/*     */   }
-/*     */   
-/*     */   public boolean contains(int e) {
-/* 199 */     int[] workArray = this.myarray;
-/* 200 */     for (int i = 0; i < this.nbelem; i++) {
-/* 201 */       if (workArray[i] == e) {
-/* 202 */         return true;
-/*     */       }
-/*     */     } 
-/* 205 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int indexOf(int e) {
-/* 212 */     int[] workArray = this.myarray;
-/* 213 */     for (int i = 0; i < this.nbelem; i++) {
-/* 214 */       if (workArray[i] == e) {
-/* 215 */         return i;
-/*     */       }
-/*     */     } 
-/* 218 */     return -1;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void copyTo(IVecInt copy) {
-/* 243 */     VecInt ncopy = (VecInt)copy;
-/* 244 */     int nsize = this.nbelem + ncopy.nbelem;
-/* 245 */     ncopy.ensure(nsize);
-/* 246 */     System.arraycopy(this.myarray, 0, ncopy.myarray, ncopy.nbelem, this.nbelem);
-/*     */     
-/* 248 */     ncopy.nbelem = nsize;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void copyTo(int[] is) {
-/* 260 */     System.arraycopy(this.myarray, 0, is, 0, this.nbelem);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void moveTo(int dest, int source) {
-/* 278 */     this.myarray[dest] = this.myarray[source];
-/*     */   }
-/*     */   
-/*     */   public void moveTo(int[] dest) {
-/* 282 */     System.arraycopy(this.myarray, 0, dest, 0, this.nbelem);
-/* 283 */     this.nbelem = 0;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(int elem) {
-/* 318 */     int j = 0;
-/* 319 */     for (; this.myarray[j] != elem; j++) {
-/* 320 */       if (j == size())
-/* 321 */         throw new NoSuchElementException(); 
-/*     */     } 
-/* 323 */     System.arraycopy(this.myarray, j + 1, this.myarray, j, size() - j - 1);
-/* 324 */     pop();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int delete(int i) {
-/* 338 */     int ith = this.myarray[i];
-/* 339 */     this.myarray[i] = this.myarray[--this.nbelem];
-/* 340 */     return ith;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 354 */     StringBuilder stb = new StringBuilder();
-/* 355 */     for (int i = 0; i < this.nbelem - 1; i++) {
-/* 356 */       stb.append(this.myarray[i]);
-/* 357 */       stb.append(",");
-/*     */     } 
-/* 359 */     if (this.nbelem > 0) {
-/* 360 */       stb.append(this.myarray[this.nbelem - 1]);
-/*     */     }
-/* 362 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void selectionSort(int from, int to) {
-/* 369 */     for (int i = from; i < to - 1; i++) {
-/* 370 */       int besti = i;
-/* 371 */       for (int j = i + 1; j < to; j++) {
-/* 372 */         if (this.myarray[j] < this.myarray[besti]) {
-/* 373 */           besti = j;
-/*     */         }
-/*     */       } 
-/* 376 */       int tmp = this.myarray[i];
-/* 377 */       this.myarray[i] = this.myarray[besti];
-/* 378 */       this.myarray[besti] = tmp;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   void sort(int from, int to) {
-/* 383 */     int width = to - from;
-/* 384 */     if (width <= 15) {
-/* 385 */       selectionSort(from, to);
-/*     */     } else {
-/* 387 */       int[] locarray = this.myarray;
-/* 388 */       int pivot = locarray[width / 2 + from];
-/*     */       
-/* 390 */       int i = from - 1;
-/* 391 */       int j = to;
-/*     */ 
-/*     */       
-/*     */       while (true) {
-/* 395 */         i++;
-/* 396 */         if (locarray[i] >= pivot) {
-/*     */           do {
-/* 398 */             j--;
-/* 399 */           } while (pivot < locarray[j]);
-/*     */           
-/* 401 */           if (i >= j) {
-/*     */             break;
-/*     */           }
-/*     */           
-/* 405 */           int tmp = locarray[i];
-/* 406 */           locarray[i] = locarray[j];
-/* 407 */           locarray[j] = tmp;
-/*     */         } 
-/*     */       } 
-/* 410 */       sort(from, i);
-/* 411 */       sort(i, to);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void sort() {
-/* 419 */     sort(0, this.nbelem);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void sortUnique() {
-/* 425 */     if (this.nbelem == 0) {
-/*     */       return;
-/*     */     }
-/*     */     
-/* 429 */     sort(0, this.nbelem);
-/* 430 */     int i = 1;
-/* 431 */     int[] locarray = this.myarray;
-/* 432 */     int last = locarray[0];
-/* 433 */     for (int j = 1; j < this.nbelem; j++) {
-/* 434 */       if (last < locarray[j]) {
-/* 435 */         last = locarray[i] = locarray[j];
-/* 436 */         i++;
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 440 */     this.nbelem = i;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 455 */     if (obj instanceof IVecInt) {
-/* 456 */       IVecInt v = (IVecInt)obj;
-/* 457 */       if (v.size() != this.nbelem) {
-/* 458 */         return false;
-/*     */       }
-/* 460 */       for (int i = 0; i < this.nbelem; i++) {
-/* 461 */         if (v.get(i) != this.myarray[i]) {
-/* 462 */           return false;
-/*     */         }
-/*     */       } 
-/* 465 */       return true;
-/*     */     } 
-/* 467 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 477 */     long sum = 0L;
-/* 478 */     for (int i = 0; i < this.nbelem; i++) {
-/* 479 */       sum += this.myarray[i];
-/*     */     }
-/* 481 */     return (int)sum / this.nbelem;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IteratorInt iterator() {
-/* 522 */     return new IteratorInt() {
-/* 523 */         private int i = 0;
-/*     */         
-/*     */         public boolean hasNext() {
-/* 526 */           return (this.i < VecInt.this.nbelem);
-/*     */         }
-/*     */         
-/*     */         public int next() {
-/* 530 */           if (this.i == VecInt.this.nbelem) {
-/* 531 */             throw new NoSuchElementException();
-/*     */           }
-/* 533 */           return VecInt.this.myarray[this.i++];
-/*     */         }
-/*     */       };
-/*     */   }
-/*     */   
-/*     */   public boolean isEmpty() {
-/* 539 */     return (this.nbelem == 0);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] toArray() {
-/* 546 */     return this.myarray;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void selectionSort(int from, int to, Comparator<Integer> cmp) {
-/* 598 */     for (int i = from; i < to - 1; i++) {
-/* 599 */       int besti = i;
-/* 600 */       for (int j = i + 1; j < to; j++) {
-/* 601 */         if (cmp.compare(Integer.valueOf(this.myarray[j]), Integer.valueOf(this.myarray[besti])) < 0) {
-/* 602 */           besti = j;
-/*     */         }
-/*     */       } 
-/* 605 */       int tmp = this.myarray[i];
-/* 606 */       this.myarray[i] = this.myarray[besti];
-/* 607 */       this.myarray[besti] = tmp;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   void sort(int from, int to, Comparator<Integer> cmp) {
-/* 612 */     int width = to - from;
-/* 613 */     if (width <= 15) {
-/* 614 */       selectionSort(from, to, cmp);
-/*     */     } else {
-/* 616 */       int pivot = this.myarray[width / 2 + from];
-/*     */       
-/* 618 */       int i = from - 1;
-/* 619 */       int j = to;
-/*     */ 
-/*     */       
-/*     */       while (true) {
-/* 623 */         i++;
-/* 624 */         if (cmp.compare(Integer.valueOf(this.myarray[i]), Integer.valueOf(pivot)) >= 0) {
-/*     */           do {
-/* 626 */             j--;
-/* 627 */           } while (cmp.compare(Integer.valueOf(pivot), Integer.valueOf(this.myarray[j])) < 0);
-/*     */           
-/* 629 */           if (i >= j) {
-/*     */             break;
-/*     */           }
-/*     */           
-/* 633 */           int tmp = this.myarray[i];
-/* 634 */           this.myarray[i] = this.myarray[j];
-/* 635 */           this.myarray[j] = tmp;
-/*     */         } 
-/*     */       } 
-/* 638 */       sort(from, i, cmp);
-/* 639 */       sort(i, to, cmp);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void sort(Comparator<Integer> comparator) {
-/* 650 */     sort(0, this.nbelem, comparator);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public IVecInt clone() {
-/* 655 */     IVecInt cloned = new VecInt(size());
-/* 656 */     copyTo(cloned);
-/* 657 */     return cloned;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\core\VecInt.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/AbstractDataStructureFactory.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/AbstractDataStructureFactory.java
deleted file mode 100644
index 476cb7fc44299de62c5da387621bbae3d718a0af..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/AbstractDataStructureFactory.java
+++ /dev/null
@@ -1,136 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.DataStructureFactory;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Learner;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class AbstractDataStructureFactory
-/*     */   implements Serializable, DataStructureFactory
-/*     */ {
-/*  84 */   protected ILits lits = createLits();
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*  89 */   private final IVec<Propagatable> tmp = (IVec<Propagatable>)new Vec();
-/*     */   
-/*     */   protected UnitPropagationListener solver;
-/*     */   protected Learner learner;
-/*     */   
-/*     */   protected abstract ILits createLits();
-/*     */   
-/*     */   public ILits getVocabulary() {
-/*  97 */     return this.lits;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setUnitPropagationListener(UnitPropagationListener s) {
-/* 105 */     this.solver = s;
-/*     */   }
-/*     */   
-/*     */   public void setLearner(Learner learner) {
-/* 109 */     this.learner = learner;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void reset() {}
-/*     */   
-/*     */   public void learnConstraint(Constr constr) {
-/* 116 */     this.learner.learn(constr);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Constr createCardinalityConstraint(IVecInt literals, int degree) throws ContradictionException {
-/* 128 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\AbstractDataStructureFactory.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/card/AtLeast.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/card/AtLeast.java
deleted file mode 100644
index 9d7b0f430da37717c5f949bbbab4aa0aca66516f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/card/AtLeast.java
+++ /dev/null
@@ -1,422 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.card;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import java.util.HashSet;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Lits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Undoable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class AtLeast
-/*     */   implements Serializable, Undoable, Constr, Propagatable
-/*     */ {
-/*     */   protected int maxUnsatisfied;
-/*     */   private int counter;
-/*     */   protected final int[] lits;
-/*     */   protected final ILits voc;
-/*     */   
-/*     */   public AtLeast(ILits voc, IVecInt ps, int degree) {
-/*  81 */     if (degree == 1) {
-/*  82 */       throw new IllegalArgumentException("cards with degree 1 are clauses!!!!");
-/*     */     }
-/*     */     
-/*  85 */     this.maxUnsatisfied = ps.size() - degree;
-/*  86 */     this.voc = voc;
-/*  87 */     this.counter = 0;
-/*  88 */     this.lits = new int[ps.size()];
-/*  89 */     ps.moveTo(this.lits);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected static int niceParameters(UnitPropagationListener s, ILits voc, IVecInt ps, int deg) throws ContradictionException {
-/*  95 */     if (ps.size() < deg) {
-/*  96 */       throw new ContradictionException();
-/*     */     }
-/*  98 */     int degree = deg; int i;
-/*  99 */     for (i = 0; i < ps.size(); ) {
-/*     */       
-/* 101 */       if (voc.isUnassigned(ps.get(i))) {
-/*     */         
-/* 103 */         i++;
-/*     */         
-/*     */         continue;
-/*     */       } 
-/* 107 */       if (voc.isSatisfied(ps.get(i))) {
-/* 108 */         degree--;
-/*     */       }
-/*     */ 
-/*     */       
-/* 112 */       ps.delete(i);
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 117 */     ps.sortUnique();
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 122 */     if (ps.size() == degree) {
-/* 123 */       for (i = 0; i < ps.size(); i++) {
-/* 124 */         if (!s.enqueue(ps.get(i))) {
-/* 125 */           throw new ContradictionException();
-/*     */         }
-/*     */       } 
-/* 128 */       return 0;
-/*     */     } 
-/*     */     
-/* 131 */     if (ps.size() < degree) {
-/* 132 */       throw new ContradictionException();
-/*     */     }
-/* 134 */     return degree;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/* 159 */     for (int q : this.lits) {
-/* 160 */       this.voc.watches(q ^ 0x1).remove(this);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/* 172 */     this.voc.watch(p, this);
-/*     */     
-/* 174 */     if (this.counter == this.maxUnsatisfied) {
-/* 175 */       return false;
-/*     */     }
-/*     */     
-/* 178 */     this.counter++;
-/* 179 */     this.voc.undos(p).push(this);
-/*     */ 
-/*     */     
-/* 182 */     if (this.counter == this.maxUnsatisfied) {
-/* 183 */       for (int q : this.lits) {
-/* 184 */         if (this.voc.isUnassigned(q) && !s.enqueue(q, this)) {
-/* 185 */           return false;
-/*     */         }
-/*     */       } 
-/*     */     }
-/* 189 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean simplify() {
-/* 198 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void undo(int p) {
-/* 207 */     this.counter--;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/* 216 */     int c = (p == -1) ? -1 : 0;
-/* 217 */     for (int q : this.lits) {
-/* 218 */       if (this.voc.isFalsified(q)) {
-/* 219 */         outReason.push(q ^ 0x1);
-/* 220 */         if (++c >= this.maxUnsatisfied) {
-/*     */           return;
-/*     */         }
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean learnt() {
-/* 234 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getActivity() {
-/* 243 */     return 0.0D;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setActivity(double d) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean locked() {
-/* 263 */     return true;
-/*     */   }
-/*     */   
-/*     */   public void setLearnt() {
-/* 267 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void register() {
-/* 271 */     this.counter = 0;
-/* 272 */     for (int q : this.lits) {
-/* 273 */       this.voc.watch(q ^ 0x1, this);
-/* 274 */       if (this.voc.isFalsified(q)) {
-/* 275 */         this.counter++;
-/* 276 */         this.voc.undos(q ^ 0x1).push(this);
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 282 */     return this.lits.length;
-/*     */   }
-/*     */   
-/*     */   public int get(int i) {
-/* 286 */     return this.lits[i];
-/*     */   }
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/* 290 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/* 294 */     boolean ret = true; int arrayOfInt[], i; byte b;
-/* 295 */     for (arrayOfInt = this.lits, i = arrayOfInt.length, b = 0; b < i; ) { Integer lit = Integer.valueOf(arrayOfInt[b]);
-/* 296 */       if (this.voc.isUnassigned(lit.intValue()))
-/* 297 */         ret &= s.enqueue(lit.intValue(), this); 
-/*     */       b++; }
-/*     */     
-/* 300 */     assert ret == true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 314 */     StringBuilder stb = new StringBuilder();
-/* 315 */     stb.append("Card (" + this.lits.length + ") : ");
-/* 316 */     for (int lit : this.lits) {
-/*     */       
-/* 318 */       stb.append(" + ");
-/* 319 */       stb.append(Lits.toString(lit));
-/* 320 */       stb.append("[");
-/* 321 */       stb.append(this.voc.valueToString(lit));
-/* 322 */       stb.append("@");
-/* 323 */       stb.append(this.voc.getLevel(lit));
-/* 324 */       stb.append("]  ");
-/*     */     } 
-/* 326 */     stb.append(">= ");
-/* 327 */     stb.append(size() - this.maxUnsatisfied);
-/*     */     
-/* 329 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 341 */     return false;
-/*     */   }
-/*     */   
-/*     */   public Constr toConstraint() {
-/* 345 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagatePI(MandatoryLiteralListener l, int p) {
-/* 364 */     this.voc.watch(p, this);
-/*     */     
-/* 366 */     this.counter++;
-/* 367 */     this.voc.undos(p).push(this);
-/*     */ 
-/*     */     
-/* 370 */     if (this.counter == this.maxUnsatisfied) {
-/* 371 */       for (int q : this.lits) {
-/* 372 */         if (!this.voc.isFalsified(q)) {
-/* 373 */           l.isMandatory(q);
-/*     */         }
-/*     */       } 
-/*     */     }
-/* 377 */     return true;
-/*     */   }
-/*     */   
-/*     */   public boolean canBeSatisfiedByCountingLiterals() {
-/* 381 */     return true;
-/*     */   }
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 385 */     return this.lits.length - this.maxUnsatisfied;
-/*     */   }
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 389 */     int nbSatisfied = 0;
-/* 390 */     int degree = size() - this.maxUnsatisfied;
-/* 391 */     for (int p : this.lits) {
-/*     */       
-/* 393 */       nbSatisfied++;
-/* 394 */       if (this.voc.isSatisfied(p) && nbSatisfied >= degree) {
-/* 395 */         return true;
-/*     */       }
-/*     */     } 
-/*     */     
-/* 399 */     return false;
-/*     */   }
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 403 */     int nUnsat = 0;
-/* 404 */     Set<Integer> litsSet = new HashSet<>(); int arrayOfInt[], j; byte b;
-/* 405 */     for (arrayOfInt = this.lits, j = arrayOfInt.length, b = 0; b < j; ) { Integer integer = Integer.valueOf(arrayOfInt[b]);
-/* 406 */       litsSet.add(integer); b++; }
-/* 407 */      for (int i = 0; i < trail.size(); i++) {
-/*     */       
-/* 409 */       nUnsat++;
-/* 410 */       if (litsSet.contains(Integer.valueOf(trail.get(i) ^ 0x1)) && nUnsat == this.maxUnsatisfied) {
-/* 411 */         return i;
-/*     */       }
-/*     */     } 
-/* 414 */     return -1;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\card\AtLeast.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/card/MinWatchCard.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/card/MinWatchCard.java
deleted file mode 100644
index 42d8a0036c3b07aad4a8caeefe883190097a3526..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/card/MinWatchCard.java
+++ /dev/null
@@ -1,743 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.card;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import java.util.HashSet;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Lits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.UnitClauses;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Undoable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class MinWatchCard
-/*     */   implements Serializable, Undoable, Constr, Propagatable
-/*     */ {
-/*     */   protected int degree;
-/*     */   protected final int[] lits;
-/*     */   private boolean moreThan;
-/*     */   protected int watchCumul;
-/*     */   private final ILits voc;
-/*     */   protected final int maxUnsatisfied;
-/*     */   private int savedindex;
-/*     */   
-/*     */   public MinWatchCard(ILits voc, IVecInt ps, boolean moreThan, int degree) {
-/* 668 */     this.savedindex = this.degree + 1; this.voc = voc; this.degree = degree; this.moreThan = moreThan; int[] index = new int[voc.nVars() * 2 + 2]; for (int i = 0; i < ps.size(); i++) { int p = ps.get(i); if (index[p ^ 0x1] == 0) { index[p] = index[p] + 1; } else { index[p ^ 0x1] = index[p ^ 0x1] - 1; }  }  int ind = 0; while (ind < ps.size()) { if (index[ps.get(ind)] > 0) { index[ps.get(ind)] = index[ps.get(ind)] - 1; ind++; continue; }  if ((ps.get(ind) & 0x1) != 0) this.degree--;  ps.delete(ind); }  this.lits = new int[ps.size()]; ps.moveTo(this.lits); normalize(); this.maxUnsatisfied = this.lits.length - this.degree;
-/*     */   } public void calcReason(int p, IVecInt outReason) { int c = (p == -1) ? -1 : 0; for (int q : this.lits) { if (this.voc.isFalsified(q)) { outReason.push(q ^ 0x1); if (++c >= this.maxUnsatisfied) return;  }  }  } public double getActivity() { return 0.0D; } public void incActivity(double claInc) {} public void setActivity(double d) {} public boolean learnt() { return false; } protected static int linearisation(ILits voc, IVecInt ps) { int modif = 0; for (int i = 0; i < ps.size(); ) { if (voc.isUnassigned(ps.get(i))) { i++; continue; }  if (voc.isSatisfied(ps.get(i))) modif--;  ps.set(i, ps.last()); ps.pop(); }  assert modif <= 0; return modif; } public boolean locked() { return true; } public static Constr minWatchCardNew(UnitPropagationListener s, ILits voc, IVecInt ps, boolean moreThan, int degree) throws ContradictionException { int mydegree = degree + linearisation(voc, ps); if (ps.size() < mydegree) throw new ContradictionException();  if (ps.size() == mydegree) { for (int i = 0; i < ps.size(); i++) { if (!s.enqueue(ps.get(i))) throw new ContradictionException();  }  return (Constr)new UnitClauses(ps); }  MinWatchCard retour = new MinWatchCard(voc, ps, moreThan, mydegree); if (retour.degree <= 0) return null;  retour.computeWatches(); retour.computePropagation(s); return retour; } public final void normalize() { if (!this.moreThan) { this.degree = 0 - this.degree; for (int indLit = 0; indLit < this.lits.length; indLit++) { this.lits[indLit] = this.lits[indLit] ^ 0x1; this.degree++; }  this.moreThan = true; }  } public boolean propagate(UnitPropagationListener s, int p) { this.savedindex = this.degree + 1; if (this.watchCumul == this.degree) { this.voc.watch(p, this); return false; }  int indFalsified = 0; while ((this.lits[indFalsified] ^ 0x1) != p) indFalsified++;  assert this.watchCumul > this.degree; int indSwap = this.degree + 1; while (indSwap < this.lits.length && this.voc.isFalsified(this.lits[indSwap])) indSwap++;  if (indSwap == this.lits.length) { this.voc.watch(p, this); this.watchCumul--; assert this.watchCumul == this.degree; this.voc.undos(p).push(this); for (int i = 0; i <= this.degree; i++) { if (p != (this.lits[i] ^ 0x1) && !s.enqueue(this.lits[i], this)) return false;  }  return true; }  int tmpInt = this.lits[indSwap]; this.lits[indSwap] = this.lits[indFalsified]; this.lits[indFalsified] = tmpInt; this.voc.watch(tmpInt ^ 0x1, this); return true; } public void remove(UnitPropagationListener upl) { for (int i = 0; i < Math.min(this.degree + 1, this.lits.length); i++) this.voc.watches(this.lits[i] ^ 0x1).remove(this);  }
-/*     */   public void rescaleBy(double d) {}
-/*     */   public boolean simplify() { for (int i = 0, count = 0; i < this.lits.length; i++) { if (this.voc.isSatisfied(this.lits[i]) && ++count == this.degree) return true;  }  return false; }
-/* 672 */   public boolean propagatePI(MandatoryLiteralListener l, int p) { int indFalsified = 0;
-/* 673 */     while ((this.lits[indFalsified] ^ 0x1) != p) {
-/* 674 */       indFalsified++;
-/*     */     }
-/* 676 */     assert this.watchCumul >= this.degree;
-/*     */ 
-/*     */     
-/* 679 */     int indSwap = this.savedindex;
-/* 680 */     while (indSwap < this.lits.length && this.voc
-/* 681 */       .isFalsified(this.lits[indSwap])) {
-/* 682 */       indSwap++;
-/*     */     }
-/*     */ 
-/*     */     
-/* 686 */     if (indSwap == this.lits.length) {
-/*     */       
-/* 688 */       this.voc.watch(p, this);
-/*     */ 
-/*     */       
-/* 691 */       for (int i = 0; i <= this.degree; i++) {
-/* 692 */         if (p != (this.lits[i] ^ 0x1)) {
-/* 693 */           l.isMandatory(this.lits[i]);
-/*     */         }
-/*     */       } 
-/* 696 */       return true;
-/*     */     } 
-/* 698 */     this.savedindex = indSwap + 1;
-/*     */     
-/* 700 */     int tmpInt = this.lits[indSwap];
-/* 701 */     this.lits[indSwap] = this.lits[indFalsified];
-/* 702 */     this.lits[indFalsified] = tmpInt;
-/*     */ 
-/*     */     
-/* 705 */     this.voc.watch(tmpInt ^ 0x1, this);
-/*     */     
-/* 707 */     return true; }
-/*     */   public String toString() { StringBuilder stb = new StringBuilder(); if (this.lits.length > 0) { stb.append(Lits.toStringX(this.lits[0])); stb.append("["); stb.append(this.voc.valueToString(this.lits[0])); stb.append("]"); stb.append(" "); for (int i = 1; i < this.lits.length; i++) { stb.append(Lits.toStringX(this.lits[i])); stb.append("["); stb.append(this.voc.valueToString(this.lits[i])); stb.append("]"); stb.append(" "); }  stb.append(">= "); stb.append(this.degree); }  return stb.toString(); }
-/*     */   public void undo(int p) { this.watchCumul++; }
-/*     */   public void setLearnt() { throw new UnsupportedOperationException(); }
-/*     */   public void register() { computeWatches(); }
-/* 712 */   public int size() { return this.lits.length; } public int get(int i) { return this.lits[i]; } public boolean canBeSatisfiedByCountingLiterals() { return true; }
-/*     */   public void assertConstraint(UnitPropagationListener s) { boolean ret = true; int arrayOfInt[], i; byte b; for (arrayOfInt = this.lits, i = arrayOfInt.length, b = 0; b < i; ) { Integer lit = Integer.valueOf(arrayOfInt[b]); if (this.voc.isUnassigned(lit.intValue())) ret &= s.enqueue(lit.intValue(), this);  b++; }  assert ret == true; }
-/*     */   protected void computeWatches() { int indSwap = this.lits.length; for (int i = 0; i <= this.degree && i < indSwap; i++) { while (this.voc.isFalsified(this.lits[i]) && --indSwap > i) { int tmpInt = this.lits[i]; this.lits[i] = this.lits[indSwap]; this.lits[indSwap] = tmpInt; }  if (!this.voc.isFalsified(this.lits[i])) { this.watchCumul++; this.voc.watch(this.lits[i] ^ 0x1, this); }  }  if (this.watchCumul <= this.degree) { int free = 1; while (this.watchCumul <= this.degree && free > 0) { free = 0; int maxlevel = -1, maxi = -1; for (int j = this.watchCumul; j < this.lits.length; j++) { if (this.voc.isFalsified(this.lits[j])) { free++; int level = this.voc.getLevel(this.lits[j]); if (level > maxlevel) { maxi = j; maxlevel = level; }  }  }  if (free > 0) { assert maxi >= 0; this.voc.watch(this.lits[maxi] ^ 0x1, this); int tmpInt = this.lits[maxi]; this.lits[maxi] = this.lits[this.watchCumul]; this.lits[this.watchCumul] = tmpInt; this.watchCumul++; free--; assert free >= 0; }  }  assert this.lits.length == 1 || this.watchCumul > 1; }  }
-/*     */   protected MinWatchCard computePropagation(UnitPropagationListener s) throws ContradictionException { if (this.watchCumul == this.degree) { for (int i = 0; i < this.lits.length; i++) { if (!s.enqueue(this.lits[i])) throw new ContradictionException();  }  return null; }  if (this.watchCumul < this.degree) throw new ContradictionException();  return this; }
-/* 716 */   public boolean equals(Object card) { if (card == null) return false;  if (getClass() != card.getClass()) return false;  try { MinWatchCard mcard = (MinWatchCard)card; if (mcard.degree != this.degree) return false;  if (this.lits.length != mcard.lits.length) return false;  for (int lit : this.lits) { boolean ok = false; for (int lit2 : mcard.lits) { if (lit == lit2) { ok = true; break; }  }  if (!ok) return false;  }  return true; } catch (ClassCastException e) { return false; }  } public int hashCode() { long sum = 0L; for (int p : this.lits) sum += p;  sum += this.degree; return (int)sum / (this.lits.length + 1); } public boolean canBePropagatedMultipleTimes() { return false; } public Constr toConstraint() { return this; } public int requiredNumberOfSatisfiedLiterals() { return this.degree; }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 720 */     throw new UnsupportedOperationException("Not implemented yet!");
-/*     */   }
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 724 */     int nUnsat = 0;
-/* 725 */     Set<Integer> litsSet = new HashSet<>(); int arrayOfInt[], j; byte b;
-/* 726 */     for (arrayOfInt = this.lits, j = arrayOfInt.length, b = 0; b < j; ) { Integer integer = Integer.valueOf(arrayOfInt[b]);
-/* 727 */       litsSet.add(integer); b++; }
-/* 728 */      for (int i = 0; i < trail.size(); i++) {
-/*     */       
-/* 730 */       nUnsat++;
-/* 731 */       if (litsSet.contains(Integer.valueOf(trail.get(i) ^ 0x1)) && nUnsat == this.maxUnsatisfied) {
-/* 732 */         return i;
-/*     */       }
-/*     */     } 
-/* 735 */     return -1;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\card\MinWatchCard.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/BinaryClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/BinaryClause.java
deleted file mode 100644
index 95ed8fb13de8245c89f5829134db5864f62e52cd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/BinaryClause.java
+++ /dev/null
@@ -1,297 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class BinaryClause
-/*     */   implements Serializable, Constr, Propagatable
-/*     */ {
-/*     */   protected double activity;
-/*     */   private final ILits voc;
-/*     */   protected int head;
-/*     */   protected int tail;
-/*     */   
-/*     */   public BinaryClause(IVecInt ps, ILits voc) {
-/*  76 */     assert ps.size() == 2;
-/*  77 */     this.head = ps.get(0);
-/*  78 */     this.tail = ps.get(1);
-/*  79 */     this.voc = voc;
-/*  80 */     this.activity = 0.0D;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/*  89 */     if (this.voc.isFalsified(this.head)) {
-/*  90 */       outReason.push(LiteralsUtils.neg(this.head));
-/*     */     }
-/*  92 */     if (this.voc.isFalsified(this.tail)) {
-/*  93 */       outReason.push(LiteralsUtils.neg(this.tail));
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/* 103 */     this.voc.watches(LiteralsUtils.neg(this.head)).remove(this);
-/* 104 */     this.voc.watches(LiteralsUtils.neg(this.tail)).remove(this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean simplify() {
-/* 113 */     if (this.voc.isSatisfied(this.head) || this.voc
-/* 114 */       .isSatisfied(this.tail)) {
-/* 115 */       return true;
-/*     */     }
-/* 117 */     return false;
-/*     */   }
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/* 121 */     this.voc.watch(p, this);
-/* 122 */     if (this.head == LiteralsUtils.neg(p)) {
-/* 123 */       return s.enqueue(this.tail, this);
-/*     */     }
-/* 125 */     assert this.tail == LiteralsUtils.neg(p);
-/* 126 */     return s.enqueue(this.head, this);
-/*     */   }
-/*     */   
-/*     */   public boolean propagatePI(MandatoryLiteralListener m, int p) {
-/* 130 */     this.voc.watch(p, this);
-/* 131 */     if (this.head == LiteralsUtils.neg(p)) {
-/* 132 */       m.isMandatory(this.tail);
-/*     */     } else {
-/* 134 */       assert this.tail == LiteralsUtils.neg(p);
-/* 135 */       m.isMandatory(this.head);
-/*     */     } 
-/* 137 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean locked() {
-/* 144 */     return (this.voc.getReason(this.head) == this || this.voc
-/* 145 */       .getReason(this.tail) == this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getActivity() {
-/* 152 */     return this.activity;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 157 */     StringBuilder stb = new StringBuilder();
-/* 158 */     stb.append(Lits.toString(this.head));
-/* 159 */     stb.append("[");
-/* 160 */     stb.append(this.voc.valueToString(this.head));
-/* 161 */     stb.append("@");
-/* 162 */     stb.append(this.voc.getLevel(this.head));
-/* 163 */     stb.append("]");
-/* 164 */     stb.append(" ");
-/* 165 */     stb.append(Lits.toString(this.tail));
-/* 166 */     stb.append("[");
-/* 167 */     stb.append(this.voc.valueToString(this.tail));
-/* 168 */     stb.append("@");
-/* 169 */     stb.append(this.voc.getLevel(this.tail));
-/* 170 */     stb.append("]");
-/* 171 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 183 */     if (i == 0) {
-/* 184 */       return this.head;
-/*     */     }
-/* 186 */     assert i == 1;
-/* 187 */     return this.tail;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/* 194 */     this.activity *= d;
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 198 */     return 2;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/* 203 */     boolean ret = s.enqueue(this.head, this);
-/* 204 */     assert ret;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 227 */     if (obj == null) {
-/* 228 */       return false;
-/*     */     }
-/* 230 */     if (getClass() != obj.getClass()) {
-/* 231 */       return false;
-/*     */     }
-/*     */     try {
-/* 234 */       BinaryClause wcl = (BinaryClause)obj;
-/* 235 */       if (wcl.head != this.head || wcl.tail != this.tail) {
-/* 236 */         return false;
-/*     */       }
-/* 238 */       return true;
-/* 239 */     } catch (ClassCastException e) {
-/* 240 */       return false;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 246 */     long sum = this.head + this.tail;
-/* 247 */     return (int)sum / 2;
-/*     */   }
-/*     */   
-/*     */   public void register() {
-/* 251 */     this.voc.watch(LiteralsUtils.neg(this.head), this);
-/* 252 */     this.voc.watch(LiteralsUtils.neg(this.tail), this);
-/*     */   }
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 256 */     return false;
-/*     */   }
-/*     */   
-/*     */   public Constr toConstraint() {
-/* 260 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBeSatisfiedByCountingLiterals() {
-/* 268 */     return true;
-/*     */   }
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 272 */     return 1;
-/*     */   }
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 276 */     if (this.voc.isSatisfied(this.head))
-/* 277 */       return true; 
-/* 278 */     if (this.voc.isSatisfied(this.tail))
-/* 279 */       return true; 
-/* 280 */     return false;
-/*     */   }
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 284 */     for (int i = trail.size() - 1; i >= 0; i--) {
-/* 285 */       if (LiteralsUtils.var(trail.get(i)) == LiteralsUtils.var(this.head)) {
-/* 286 */         return i;
-/*     */       }
-/*     */     } 
-/* 289 */     return -1;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\BinaryClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/Clauses.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/Clauses.java
deleted file mode 100644
index f343bf4a956dfab78d38ebe234f1d8e2deacb53d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/Clauses.java
+++ /dev/null
@@ -1,133 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class Clauses
-/*     */ {
-/*     */   public static IVecInt sanityCheck(IVecInt ps, ILits voc, UnitPropagationListener s) throws ContradictionException {
-/*     */     int i;
-/*  66 */     for (i = 0; i < ps.size(); ) {
-/*     */       
-/*  68 */       if (voc.isUnassigned(ps.get(i))) {
-/*     */         
-/*  70 */         i++;
-/*     */         
-/*     */         continue;
-/*     */       } 
-/*  74 */       if (voc.isSatisfied(ps.get(i)))
-/*     */       {
-/*  76 */         return null;
-/*     */       }
-/*     */       
-/*  79 */       ps.delete(i);
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  85 */     ps.sortUnique();
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  90 */     for (i = 0; i < ps.size() - 1; i++) {
-/*  91 */       if (ps.get(i) == (ps.get(i + 1) ^ 0x1))
-/*     */       {
-/*  93 */         return null;
-/*     */       }
-/*     */     } 
-/*     */     
-/*  97 */     propagationCheck(ps, s);
-/*     */     
-/*  99 */     return ps;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   static boolean propagationCheck(IVecInt ps, UnitPropagationListener s) throws ContradictionException {
-/* 116 */     if (ps.size() == 0)
-/* 117 */       throw new ContradictionException("Creating Empty clause ?"); 
-/* 118 */     if (ps.size() == 1) {
-/* 119 */       if (!s.enqueue(ps.get(0))) {
-/* 120 */         throw new ContradictionException("Contradictory Unit Clauses");
-/*     */       }
-/* 122 */       return true;
-/*     */     } 
-/*     */     
-/* 125 */     return false;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\Clauses.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/HTClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/HTClause.java
deleted file mode 100644
index cdc4a123973854c7cc49559ad79e248c043f7e60..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/HTClause.java
+++ /dev/null
@@ -1,363 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class HTClause
-/*     */   implements Serializable, Constr, Propagatable
-/*     */ {
-/*     */   protected double activity;
-/*     */   protected final int[] middleLits;
-/*     */   protected final ILits voc;
-/*     */   protected int head;
-/*     */   protected int tail;
-/*     */   
-/*     */   public HTClause(IVecInt ps, ILits voc) {
-/*  84 */     assert ps.size() > 1;
-/*  85 */     this.head = ps.get(0);
-/*  86 */     this.tail = ps.last();
-/*  87 */     int size = ps.size() - 2;
-/*  88 */     assert size > 0;
-/*  89 */     this.middleLits = new int[size];
-/*  90 */     System.arraycopy(ps.toArray(), 1, this.middleLits, 0, size);
-/*  91 */     ps.clear();
-/*  92 */     assert ps.size() == 0;
-/*  93 */     this.voc = voc;
-/*  94 */     this.activity = 0.0D;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/* 103 */     if (this.voc.isFalsified(this.head)) {
-/* 104 */       outReason.push(LiteralsUtils.neg(this.head));
-/*     */     }
-/* 106 */     int[] mylits = this.middleLits;
-/* 107 */     for (int mylit : mylits) {
-/* 108 */       if (this.voc.isFalsified(mylit)) {
-/* 109 */         outReason.push(LiteralsUtils.neg(mylit));
-/*     */       }
-/*     */     } 
-/* 112 */     if (this.voc.isFalsified(this.tail)) {
-/* 113 */       outReason.push(LiteralsUtils.neg(this.tail));
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/* 123 */     this.voc.watches(LiteralsUtils.neg(this.head)).remove(this);
-/* 124 */     this.voc.watches(LiteralsUtils.neg(this.tail)).remove(this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean simplify() {
-/* 133 */     if (this.voc.isSatisfied(this.head) || this.voc
-/* 134 */       .isSatisfied(this.tail)) {
-/* 135 */       return true;
-/*     */     }
-/* 137 */     for (int middleLit : this.middleLits) {
-/* 138 */       if (this.voc.isSatisfied(middleLit)) {
-/* 139 */         return true;
-/*     */       }
-/*     */     } 
-/* 142 */     return false;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/* 147 */     if (this.head == LiteralsUtils.neg(p)) {
-/* 148 */       int[] arrayOfInt = this.middleLits;
-/* 149 */       int temphead = 0;
-/*     */       
-/* 151 */       while (temphead < arrayOfInt.length && this.voc
-/* 152 */         .isFalsified(arrayOfInt[temphead])) {
-/* 153 */         temphead++;
-/*     */       }
-/* 155 */       assert temphead <= arrayOfInt.length;
-/* 156 */       if (temphead == arrayOfInt.length) {
-/* 157 */         this.voc.watch(p, this);
-/* 158 */         return s.enqueue(this.tail, this);
-/*     */       } 
-/* 160 */       this.head = arrayOfInt[temphead];
-/* 161 */       arrayOfInt[temphead] = LiteralsUtils.neg(p);
-/* 162 */       this.voc.watch(LiteralsUtils.neg(this.head), this);
-/* 163 */       return true;
-/*     */     } 
-/* 165 */     assert this.tail == LiteralsUtils.neg(p);
-/* 166 */     int[] mylits = this.middleLits;
-/* 167 */     int temptail = mylits.length - 1;
-/*     */     
-/* 169 */     while (temptail >= 0 && this.voc.isFalsified(mylits[temptail])) {
-/* 170 */       temptail--;
-/*     */     }
-/* 172 */     assert -1 <= temptail;
-/* 173 */     if (-1 == temptail) {
-/* 174 */       this.voc.watch(p, this);
-/* 175 */       return s.enqueue(this.head, this);
-/*     */     } 
-/* 177 */     this.tail = mylits[temptail];
-/* 178 */     mylits[temptail] = LiteralsUtils.neg(p);
-/* 179 */     this.voc.watch(LiteralsUtils.neg(this.tail), this);
-/* 180 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean locked() {
-/* 187 */     return (this.voc.getReason(this.head) == this || this.voc
-/* 188 */       .getReason(this.tail) == this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getActivity() {
-/* 195 */     return this.activity;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 200 */     StringBuilder stb = new StringBuilder();
-/* 201 */     stb.append(Lits.toString(this.head));
-/* 202 */     stb.append("[");
-/* 203 */     stb.append(this.voc.valueToString(this.head));
-/* 204 */     stb.append("]");
-/* 205 */     stb.append(" ");
-/* 206 */     for (int middleLit : this.middleLits) {
-/* 207 */       stb.append(Lits.toString(middleLit));
-/* 208 */       stb.append("[");
-/* 209 */       stb.append(this.voc.valueToString(middleLit));
-/* 210 */       stb.append("]");
-/* 211 */       stb.append(" ");
-/*     */     } 
-/* 213 */     stb.append(Lits.toString(this.tail));
-/* 214 */     stb.append("[");
-/* 215 */     stb.append(this.voc.valueToString(this.tail));
-/* 216 */     stb.append("]");
-/* 217 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 229 */     if (i == 0) {
-/* 230 */       return this.head;
-/*     */     }
-/* 232 */     if (i == this.middleLits.length + 1) {
-/* 233 */       return this.tail;
-/*     */     }
-/* 235 */     return this.middleLits[i - 1];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/* 242 */     this.activity *= d;
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 246 */     return this.middleLits.length + 2;
-/*     */   }
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/* 250 */     assert this.voc.isUnassigned(this.head);
-/* 251 */     boolean ret = s.enqueue(this.head, this);
-/* 252 */     assert ret;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 276 */     if (obj == null) {
-/* 277 */       return false;
-/*     */     }
-/* 279 */     if (getClass() != obj.getClass())
-/* 280 */       return false; 
-/*     */     try {
-/* 282 */       HTClause wcl = (HTClause)obj;
-/* 283 */       if (wcl.head != this.head || wcl.tail != this.tail) {
-/* 284 */         return false;
-/*     */       }
-/* 286 */       if (this.middleLits.length != wcl.middleLits.length) {
-/* 287 */         return false;
-/*     */       }
-/*     */       
-/* 290 */       for (int lit : this.middleLits) {
-/* 291 */         boolean ok = false;
-/* 292 */         for (int lit2 : wcl.middleLits) {
-/* 293 */           if (lit == lit2) {
-/* 294 */             ok = true;
-/*     */             break;
-/*     */           } 
-/*     */         } 
-/* 298 */         if (!ok) {
-/* 299 */           return false;
-/*     */         }
-/*     */       } 
-/* 302 */       return true;
-/* 303 */     } catch (ClassCastException e) {
-/* 304 */       return false;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 310 */     long sum = this.head + this.tail;
-/* 311 */     for (int p : this.middleLits) {
-/* 312 */       sum += p;
-/*     */     }
-/* 314 */     return (int)sum / this.middleLits.length;
-/*     */   }
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 318 */     return false;
-/*     */   }
-/*     */   
-/*     */   public Constr toConstraint() {
-/* 322 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBeSatisfiedByCountingLiterals() {
-/* 330 */     return true;
-/*     */   }
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 334 */     return 1;
-/*     */   }
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 338 */     if (this.voc.isSatisfied(this.head))
-/* 339 */       return true; 
-/* 340 */     if (this.voc.isSatisfied(this.tail))
-/* 341 */       return true; 
-/* 342 */     for (int p : this.middleLits) {
-/* 343 */       if (this.voc.isSatisfied(p))
-/* 344 */         return true; 
-/*     */     } 
-/* 346 */     return false;
-/*     */   }
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 350 */     for (int i = trail.size() - 1; i >= 0; i--) {
-/* 351 */       if (LiteralsUtils.var(trail.get(i)) == LiteralsUtils.var(this.head)) {
-/* 352 */         return i;
-/*     */       }
-/*     */     } 
-/* 355 */     return -1;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\HTClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntBinaryClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntBinaryClause.java
deleted file mode 100644
index 95a6a584f3d2d55ddef567e4553858ca2f394769..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntBinaryClause.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class LearntBinaryClause
-/*    */   extends BinaryClause
-/*    */ {
-/*    */   public LearntBinaryClause(IVecInt ps, ILits voc) {
-/* 50 */     super(ps, voc);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void setLearnt() {}
-/*    */ 
-/*    */   
-/*    */   public boolean learnt() {
-/* 58 */     return true;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void incActivity(double claInc) {
-/* 69 */     this.activity += claInc;
-/*    */   }
-/*    */   
-/*    */   public void setActivity(double d) {
-/* 73 */     this.activity = d;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\LearntBinaryClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntHTClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntHTClause.java
deleted file mode 100644
index 6e9916a723c6ca641413d3c85a8c34d7b553e395..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntHTClause.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class LearntHTClause
-/*     */   extends HTClause
-/*     */ {
-/*     */   public LearntHTClause(IVecInt ps, ILits voc) {
-/*  47 */     super(ps, voc);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void register() {
-/*  62 */     if (this.middleLits.length > 0) {
-/*  63 */       int maxi = 0;
-/*  64 */       int maxlevel = this.voc.getLevel(this.middleLits[0]);
-/*  65 */       for (int i = 1; i < this.middleLits.length; i++) {
-/*  66 */         int level = this.voc.getLevel(this.middleLits[i]);
-/*  67 */         if (level > maxlevel) {
-/*  68 */           maxi = i;
-/*  69 */           maxlevel = level;
-/*     */         } 
-/*     */       } 
-/*  72 */       if (maxlevel > this.voc.getLevel(this.tail)) {
-/*  73 */         int l = this.tail;
-/*  74 */         this.tail = this.middleLits[maxi];
-/*  75 */         this.middleLits[maxi] = l;
-/*     */       } 
-/*     */     } 
-/*     */     
-/*  79 */     this.voc.watch(LiteralsUtils.neg(this.head), this);
-/*  80 */     this.voc.watch(LiteralsUtils.neg(this.tail), this);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean learnt() {
-/*  85 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setLearnt() {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {
-/* 100 */     this.activity += claInc;
-/*     */   }
-/*     */   
-/*     */   public void setActivity(double d) {
-/* 104 */     this.activity = d;
-/*     */   }
-/*     */   
-/*     */   public boolean propagatePI(MandatoryLiteralListener l, int p) {
-/* 108 */     throw new UnsupportedOperationException("Not implemented yet!");
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\LearntHTClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntWLClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntWLClause.java
deleted file mode 100644
index d3b913a2be0c5a83ae4247febff3ba60d64b4d97..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/LearntWLClause.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class LearntWLClause
-/*     */   extends WLClause
-/*     */ {
-/*     */   public LearntWLClause(IVecInt ps, ILits voc) {
-/*  41 */     super(ps, voc);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void register() {
-/*  55 */     if (this.lits.length == 0)
-/*     */       return; 
-/*  57 */     assert this.lits.length > 1;
-/*     */     
-/*  59 */     int maxi = 1;
-/*  60 */     int maxlevel = this.voc.getLevel(this.lits[1]);
-/*  61 */     for (int i = 2; i < this.lits.length; i++) {
-/*  62 */       int level = this.voc.getLevel(this.lits[i]);
-/*  63 */       if (level > maxlevel) {
-/*  64 */         maxi = i;
-/*  65 */         maxlevel = level;
-/*     */       } 
-/*     */     } 
-/*  68 */     int l = this.lits[1];
-/*  69 */     this.lits[1] = this.lits[maxi];
-/*  70 */     this.lits[maxi] = l;
-/*     */     
-/*  72 */     this.voc.watch(this.lits[0] ^ 0x1, this);
-/*  73 */     this.voc.watch(this.lits[1] ^ 0x1, this);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean learnt() {
-/*  78 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setLearnt() {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {
-/*  96 */     this.activity += claInc;
-/*     */   }
-/*     */   
-/*     */   public boolean propagatePI(MandatoryLiteralListener s, int p) {
-/* 100 */     this.voc.watch(p, this);
-/* 101 */     return true;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\LearntWLClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/Lits.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/Lits.java
deleted file mode 100644
index 56702ab8e318d18f9980bd04c4c1adda1d2ef852..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/Lits.java
+++ /dev/null
@@ -1,317 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Undoable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class Lits
-/*     */   implements Serializable, ILits
-/*     */ {
-/*  53 */   private boolean[] pool = new boolean[1];
-/*     */   
-/*  55 */   private int realnVars = 0;
-/*     */   
-/*  57 */   private IVec<Propagatable>[] watches = (IVec<Propagatable>[])new IVec[0];
-/*     */ 
-/*     */   
-/*  60 */   private int[] level = new int[0];
-/*     */   
-/*  62 */   private int[] trailPosition = new int[0];
-/*     */   
-/*  64 */   private Constr[] reason = new Constr[0];
-/*     */   
-/*  66 */   private int maxvarid = 0;
-/*     */   
-/*  68 */   private IVec<Undoable>[] undos = (IVec<Undoable>[])new IVec[0];
-/*     */ 
-/*     */   
-/*  71 */   private boolean[] falsified = new boolean[0];
-/*     */   
-/*     */   public Lits() {
-/*  74 */     init(128);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void init(int nvar) {
-/*  79 */     if (nvar < this.pool.length) {
-/*     */       return;
-/*     */     }
-/*  82 */     assert nvar >= 0;
-/*     */     
-/*  84 */     int nvars = nvar + 1;
-/*  85 */     boolean[] npool = new boolean[nvars];
-/*  86 */     System.arraycopy(this.pool, 0, npool, 0, this.pool.length);
-/*  87 */     this.pool = npool;
-/*     */     
-/*  89 */     int[] nlevel = new int[nvars];
-/*  90 */     System.arraycopy(this.level, 0, nlevel, 0, this.level.length);
-/*  91 */     this.level = nlevel;
-/*     */     
-/*  93 */     int[] ntrailPosition = new int[nvars];
-/*  94 */     System.arraycopy(this.trailPosition, 0, ntrailPosition, 0, this.trailPosition.length);
-/*     */     
-/*  96 */     this.trailPosition = ntrailPosition;
-/*     */     
-/*  98 */     IVec[] arrayOfIVec1 = new IVec[2 * nvars];
-/*  99 */     System.arraycopy(this.watches, 0, arrayOfIVec1, 0, this.watches.length);
-/* 100 */     this.watches = (IVec<Propagatable>[])arrayOfIVec1;
-/*     */     
-/* 102 */     IVec[] arrayOfIVec2 = new IVec[nvars];
-/* 103 */     System.arraycopy(this.undos, 0, arrayOfIVec2, 0, this.undos.length);
-/* 104 */     this.undos = (IVec<Undoable>[])arrayOfIVec2;
-/*     */     
-/* 106 */     Constr[] nreason = new Constr[nvars];
-/* 107 */     System.arraycopy(this.reason, 0, nreason, 0, this.reason.length);
-/* 108 */     this.reason = nreason;
-/*     */     
-/* 110 */     boolean[] newFalsified = new boolean[2 * nvars];
-/* 111 */     System.arraycopy(this.falsified, 0, newFalsified, 0, this.falsified.length);
-/*     */     
-/* 113 */     this.falsified = newFalsified;
-/*     */   }
-/*     */   
-/*     */   public int getFromPool(int x) {
-/* 117 */     int var = Math.abs(x);
-/* 118 */     if (var >= this.pool.length) {
-/* 119 */       init(Math.max(var, this.pool.length << 1));
-/*     */     }
-/* 121 */     assert var < this.pool.length;
-/* 122 */     if (var > this.maxvarid) {
-/* 123 */       this.maxvarid = var;
-/*     */     }
-/* 125 */     int lit = LiteralsUtils.toInternal(x);
-/* 126 */     assert lit > 1;
-/* 127 */     if (!this.pool[var]) {
-/* 128 */       this.realnVars++;
-/* 129 */       this.pool[var] = true;
-/* 130 */       this.watches[var << 1] = (IVec<Propagatable>)new Vec();
-/* 131 */       this.watches[var << 1 | 0x1] = (IVec<Propagatable>)new Vec();
-/* 132 */       this.undos[var] = (IVec<Undoable>)new Vec();
-/* 133 */       this.level[var] = -1;
-/* 134 */       this.trailPosition[var] = -1;
-/* 135 */       this.falsified[var << 1] = false;
-/*     */       
-/* 137 */       this.falsified[var << 1 | 0x1] = false;
-/*     */     } 
-/*     */     
-/* 140 */     return lit;
-/*     */   }
-/*     */   
-/*     */   public boolean belongsToPool(int x) {
-/* 144 */     assert x > 0;
-/* 145 */     if (x >= this.pool.length) {
-/* 146 */       return false;
-/*     */     }
-/* 148 */     return this.pool[x];
-/*     */   }
-/*     */   
-/*     */   public void resetPool() {
-/* 152 */     for (int i = 0; i < this.pool.length; i++) {
-/* 153 */       if (this.pool[i]) {
-/* 154 */         reset(i << 1);
-/*     */       }
-/*     */     } 
-/* 157 */     this.maxvarid = 0;
-/* 158 */     this.realnVars = 0;
-/*     */   }
-/*     */   
-/*     */   public void ensurePool(int howmany) {
-/* 162 */     if (howmany >= this.pool.length) {
-/* 163 */       init(Math.max(howmany, this.pool.length << 1));
-/*     */     }
-/* 165 */     if (this.maxvarid < howmany) {
-/* 166 */       this.maxvarid = howmany;
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   public void unassign(int lit) {
-/* 171 */     assert this.falsified[lit] || this.falsified[lit ^ 0x1];
-/* 172 */     this.falsified[lit] = false;
-/* 173 */     this.falsified[lit ^ 0x1] = false;
-/*     */   }
-/*     */   
-/*     */   public void satisfies(int lit) {
-/* 177 */     assert !this.falsified[lit] && !this.falsified[lit ^ 0x1];
-/* 178 */     this.falsified[lit] = false;
-/* 179 */     this.falsified[lit ^ 0x1] = true;
-/*     */   }
-/*     */   
-/*     */   public void forgets(int var) {
-/* 183 */     this.falsified[var << 1] = true;
-/* 184 */     this.falsified[var << 1 ^ 0x1] = true;
-/*     */   }
-/*     */   
-/*     */   public boolean isSatisfied(int lit) {
-/* 188 */     return this.falsified[lit ^ 0x1];
-/*     */   }
-/*     */   
-/*     */   public boolean isFalsified(int lit) {
-/* 192 */     return this.falsified[lit];
-/*     */   }
-/*     */   
-/*     */   public boolean isUnassigned(int lit) {
-/* 196 */     return (!this.falsified[lit] && !this.falsified[lit ^ 0x1]);
-/*     */   }
-/*     */   
-/*     */   public String valueToString(int lit) {
-/* 200 */     if (isUnassigned(lit)) {
-/* 201 */       return "?";
-/*     */     }
-/* 203 */     if (isSatisfied(lit)) {
-/* 204 */       return "T";
-/*     */     }
-/* 206 */     return "F";
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int nVars() {
-/* 211 */     return this.maxvarid;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static String toString(int lit) {
-/* 219 */     return (((lit & 0x1) == 0) ? "" : "-") + (lit >> 1);
-/*     */   }
-/*     */   
-/*     */   public static String toStringX(int lit) {
-/* 223 */     return (((lit & 0x1) == 0) ? "+" : "-") + "x" + (lit >> 1);
-/*     */   }
-/*     */   
-/*     */   public void reset(int lit) {
-/* 227 */     this.watches[lit].clear();
-/* 228 */     this.watches[lit ^ 0x1].clear();
-/* 229 */     this.level[lit >> 1] = -1;
-/* 230 */     this.trailPosition[lit >> 1] = -1;
-/* 231 */     this.reason[lit >> 1] = null;
-/* 232 */     this.undos[lit >> 1].clear();
-/* 233 */     this.falsified[lit] = false;
-/* 234 */     this.falsified[lit ^ 0x1] = false;
-/* 235 */     this.pool[lit >> 1] = false;
-/*     */   }
-/*     */   
-/*     */   public int getLevel(int lit) {
-/* 239 */     return this.level[lit >> 1];
-/*     */   }
-/*     */   
-/*     */   public void setLevel(int lit, int l) {
-/* 243 */     this.level[lit >> 1] = l;
-/*     */   }
-/*     */   
-/*     */   public Constr getReason(int lit) {
-/* 247 */     return this.reason[lit >> 1];
-/*     */   }
-/*     */   
-/*     */   public void setReason(int lit, Constr r) {
-/* 251 */     this.reason[lit >> 1] = r;
-/*     */   }
-/*     */   
-/*     */   public IVec<Undoable> undos(int lit) {
-/* 255 */     return this.undos[lit >> 1];
-/*     */   }
-/*     */   
-/*     */   public void watch(int lit, Propagatable c) {
-/* 259 */     this.watches[lit].push(c);
-/*     */   }
-/*     */   
-/*     */   public IVec<Propagatable> watches(int lit) {
-/* 263 */     return this.watches[lit];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int realnVars() {
-/* 277 */     return this.realnVars;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int nextFreeVarId(boolean reserve) {
-/* 294 */     if (reserve) {
-/* 295 */       ensurePool(this.maxvarid + 1);
-/*     */       
-/* 297 */       return this.maxvarid;
-/*     */     } 
-/* 299 */     return this.maxvarid + 1;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void setTrailPosition(int lit, int position) {
-/* 304 */     this.trailPosition[lit >> 1] = position;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int getTrailPosition(int lit) {
-/* 309 */     return this.trailPosition[lit >> 1];
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\Lits.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalBinaryClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalBinaryClause.java
deleted file mode 100644
index 6024fd9962a7d1435d4fea82ed9f15f6374de14c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalBinaryClause.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class OriginalBinaryClause
-/*    */   extends BinaryClause
-/*    */ {
-/*    */   public OriginalBinaryClause(IVecInt ps, ILits voc) {
-/* 49 */     super(ps, voc);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void setLearnt() {}
-/*    */ 
-/*    */   
-/*    */   public boolean learnt() {
-/* 57 */     return false;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public static OriginalBinaryClause brandNewClause(UnitPropagationListener s, ILits voc, IVecInt literals) {
-/* 74 */     OriginalBinaryClause c = new OriginalBinaryClause(literals, voc);
-/* 75 */     c.register();
-/* 76 */     return c;
-/*    */   }
-/*    */   
-/*    */   public void incActivity(double claInc) {}
-/*    */   
-/*    */   public void setActivity(double claInc) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\OriginalBinaryClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalHTClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalHTClause.java
deleted file mode 100644
index 373e9d62f8a1257b86cbbf8bb6aa26629fa9f001..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalHTClause.java
+++ /dev/null
@@ -1,158 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class OriginalHTClause
-/*     */   extends HTClause
-/*     */ {
-/*     */   private int savedindexhead;
-/*     */   private int savedindextail;
-/*     */   
-/*     */   public OriginalHTClause(IVecInt ps, ILits voc) {
-/*  47 */     super(ps, voc);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void register() {
-/*  61 */     this.voc.watch(LiteralsUtils.neg(this.head), this);
-/*  62 */     this.voc.watch(LiteralsUtils.neg(this.tail), this);
-/*     */   }
-/*     */   
-/*     */   public boolean learnt() {
-/*  66 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setLearnt() {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static OriginalHTClause brandNewClause(UnitPropagationListener s, ILits voc, IVecInt literals) {
-/*  87 */     OriginalHTClause c = new OriginalHTClause(literals, voc);
-/*  88 */     c.register();
-/*  89 */     return c;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setActivity(double claInc) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagatePI(MandatoryLiteralListener l, int p) {
-/* 108 */     if (this.head == LiteralsUtils.neg(p)) {
-/* 109 */       int[] mylits = this.middleLits;
-/*     */       
-/* 111 */       while (this.savedindexhead < mylits.length && this.voc
-/* 112 */         .isFalsified(mylits[this.savedindexhead])) {
-/* 113 */         this.savedindexhead++;
-/*     */       }
-/* 115 */       assert this.savedindexhead <= mylits.length;
-/* 116 */       if (this.savedindexhead == mylits.length) {
-/* 117 */         l.isMandatory(this.tail);
-/*     */       } else {
-/* 119 */         this.head = mylits[this.savedindexhead];
-/* 120 */         mylits[this.savedindexhead] = LiteralsUtils.neg(p);
-/* 121 */         this.voc.watch(LiteralsUtils.neg(this.head), this);
-/*     */       } 
-/*     */     } else {
-/* 124 */       assert this.tail == LiteralsUtils.neg(p);
-/* 125 */       int[] mylits = this.middleLits;
-/*     */       
-/* 127 */       while (this.savedindextail >= 0 && this.voc
-/* 128 */         .isFalsified(mylits[this.savedindextail])) {
-/* 129 */         this.savedindextail--;
-/*     */       }
-/* 131 */       assert -1 <= this.savedindextail;
-/* 132 */       if (-1 == this.savedindextail) {
-/* 133 */         l.isMandatory(this.head);
-/*     */       } else {
-/* 135 */         this.tail = mylits[this.savedindextail];
-/* 136 */         mylits[this.savedindextail] = LiteralsUtils.neg(p);
-/* 137 */         this.voc.watch(LiteralsUtils.neg(this.tail), this);
-/*     */       } 
-/*     */     } 
-/* 140 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/* 148 */     this.savedindexhead = 0;
-/* 149 */     this.savedindextail = this.middleLits.length - 1;
-/* 150 */     return super.propagate(s, p);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\OriginalHTClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalWLClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalWLClause.java
deleted file mode 100644
index d8899bf63b42630f452b796addfc749dc604c8b9..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/OriginalWLClause.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class OriginalWLClause
-/*     */   extends WLClause
-/*     */ {
-/*     */   private int savedindex;
-/*     */   
-/*     */   public void register() {
-/*     */     assert this.lits.length > 1;
-/*     */     this.voc.watch(this.lits[0] ^ 0x1, this);
-/*     */     this.voc.watch(this.lits[1] ^ 0x1, this);
-/*     */   }
-/*     */   
-/*     */   public OriginalWLClause(IVecInt ps, ILits voc) {
-/*  42 */     super(ps, voc);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 102 */     this.savedindex = 2;
-/*     */   }
-/*     */   public boolean propagatePI(MandatoryLiteralListener s, int p) {
-/* 105 */     int[] mylits = this.lits;
-/*     */     
-/* 107 */     if (mylits[0] == (p ^ 0x1)) {
-/* 108 */       mylits[0] = mylits[1];
-/* 109 */       mylits[1] = p ^ 0x1;
-/*     */     } 
-/*     */     
-/* 112 */     int previous = p ^ 0x1;
-/*     */     
-/* 114 */     for (int i = this.savedindex; i < mylits.length; i++) {
-/* 115 */       if (this.voc.isSatisfied(mylits[i])) {
-/* 116 */         mylits[1] = mylits[i];
-/* 117 */         mylits[i] = previous;
-/* 118 */         this.voc.watch(mylits[1] ^ 0x1, this);
-/* 119 */         this.savedindex = i + 1;
-/* 120 */         return true;
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 124 */     this.voc.watch(p, this);
-/*     */     
-/* 126 */     s.isMandatory(mylits[0]);
-/* 127 */     return true;
-/*     */   } public boolean learnt() {
-/*     */     return false;
-/*     */   } public void setLearnt() {}
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/* 132 */     this.savedindex = 2;
-/* 133 */     return super.propagate(s, p);
-/*     */   }
-/*     */   
-/*     */   public static OriginalWLClause brandNewClause(UnitPropagationListener s, ILits voc, IVecInt literals) {
-/*     */     OriginalWLClause c = new OriginalWLClause(literals, voc);
-/*     */     c.register();
-/*     */     return c;
-/*     */   }
-/*     */   
-/*     */   public void incActivity(double claInc) {}
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\OriginalWLClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/UnitClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/UnitClause.java
deleted file mode 100644
index 474ff5f99527f83fd31c5d629ce470db1329ce7b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/UnitClause.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class UnitClause
-/*     */   implements Constr
-/*     */ {
-/*     */   protected final int literal;
-/*     */   protected double activity;
-/*     */   private boolean learnt;
-/*     */   
-/*     */   public UnitClause(int value) {
-/*  55 */     this(value, false);
-/*     */   }
-/*     */   
-/*     */   public UnitClause(int value, boolean learnt) {
-/*  59 */     this.literal = value;
-/*  60 */     this.learnt = learnt;
-/*     */   }
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/*  64 */     s.enqueue(this.literal, this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/*  72 */     if (p == -1) {
-/*  73 */       outReason.push(LiteralsUtils.neg(this.literal));
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   public double getActivity() {
-/*  78 */     return this.activity;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {}
-/*     */ 
-/*     */   
-/*     */   public void setActivity(double claInc) {
-/*  86 */     this.activity = claInc;
-/*     */   }
-/*     */   
-/*     */   public boolean locked() {
-/*  90 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void register() {}
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/*  97 */     int oldLevel = upl.getPropagationLevel();
-/*  98 */     upl.unset(this.literal);
-/*  99 */     if (upl.getPropagationLevel() < oldLevel - 1) {
-/* 100 */       throw new IllegalStateException("removed unit clause which caused propagations");
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/* 106 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void setLearnt() {
-/* 110 */     this.learnt = true;
-/*     */   }
-/*     */   
-/*     */   public boolean simplify() {
-/* 114 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 122 */     if (i > 0) {
-/* 123 */       throw new IllegalArgumentException();
-/*     */     }
-/* 125 */     return this.literal;
-/*     */   }
-/*     */   
-/*     */   public boolean learnt() {
-/* 129 */     return this.learnt;
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 133 */     return 1;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 142 */     return Lits.toString(this.literal);
-/*     */   }
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 146 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBeSatisfiedByCountingLiterals() {
-/* 159 */     return true;
-/*     */   }
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 163 */     return 1;
-/*     */   }
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 167 */     return true;
-/*     */   }
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 171 */     return 0;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\UnitClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/UnitClauses.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/UnitClauses.java
deleted file mode 100644
index 6dee476ff1b7f889021dc70baa6a049d6969cc88..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/UnitClauses.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class UnitClauses
-/*     */   implements Constr
-/*     */ {
-/*     */   protected final int[] literals;
-/*     */   
-/*     */   public UnitClauses(IVecInt values) {
-/*  48 */     this.literals = new int[values.size()];
-/*  49 */     values.copyTo(this.literals);
-/*     */   }
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/*  53 */     for (int p : this.literals) {
-/*  54 */       s.enqueue(p, this);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/*  63 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public double getActivity() {
-/*  68 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {}
-/*     */ 
-/*     */   
-/*     */   public void setActivity(double claInc) {}
-/*     */ 
-/*     */   
-/*     */   public boolean locked() {
-/*  80 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void register() {
-/*  84 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/*  88 */     int oldLevel = upl.getPropagationLevel();
-/*  89 */     for (int i = this.literals.length - 1; i >= 0; i--) {
-/*  90 */       upl.unset(this.literals[i]);
-/*     */     }
-/*  92 */     if (upl.getPropagationLevel() < oldLevel - this.literals.length) {
-/*  93 */       throw new IllegalStateException("removed unit clause which caused propagations");
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/*  99 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public void setLearnt() {
-/* 103 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public boolean simplify() {
-/* 107 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 115 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public boolean learnt() {
-/* 119 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 123 */     throw new UnsupportedOperationException();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 131 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBeSatisfiedByCountingLiterals() {
-/* 143 */     throw new UnsupportedOperationException("Not implemented yet!");
-/*     */   }
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 147 */     throw new UnsupportedOperationException("Not implemented yet!");
-/*     */   }
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 151 */     return true;
-/*     */   }
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 155 */     throw new UnsupportedOperationException("Not implemented yet!");
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\UnitClauses.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/WLClause.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/WLClause.java
deleted file mode 100644
index 67c5091f4617974f40d066fc723c4f3d66376329..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/constraints/cnf/WLClause.java
+++ /dev/null
@@ -1,332 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class WLClause
-/*     */   implements Serializable, Constr, Propagatable
-/*     */ {
-/*     */   protected double activity;
-/*     */   protected final int[] lits;
-/*     */   protected final ILits voc;
-/*     */   
-/*     */   public WLClause(IVecInt ps, ILits voc) {
-/*  73 */     this.lits = new int[ps.size()];
-/*  74 */     ps.moveTo(this.lits);
-/*  75 */     assert ps.size() == 0;
-/*  76 */     this.voc = voc;
-/*  77 */     this.activity = 0.0D;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/*  88 */     int[] mylits = this.lits;
-/*  89 */     for (int i = (p == -1) ? 0 : 1; i < mylits.length; i++) {
-/*  90 */       assert this.voc.isFalsified(mylits[i]);
-/*  91 */       outReason.push(mylits[i] ^ 0x1);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/*  99 */     this.voc.watches(this.lits[0] ^ 0x1).remove(this);
-/* 100 */     this.voc.watches(this.lits[1] ^ 0x1).remove(this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean simplify() {
-/* 110 */     for (int lit : this.lits) {
-/* 111 */       if (this.voc.isSatisfied(lit)) {
-/* 112 */         return true;
-/*     */       }
-/*     */     } 
-/* 115 */     return false;
-/*     */   }
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/* 119 */     int[] mylits = this.lits;
-/*     */     
-/* 121 */     if (mylits[0] == (p ^ 0x1)) {
-/* 122 */       mylits[0] = mylits[1];
-/* 123 */       mylits[1] = p ^ 0x1;
-/*     */     } 
-/*     */     
-/* 126 */     if (this.voc.isSatisfied(mylits[0])) {
-/* 127 */       this.voc.watch(p, this);
-/* 128 */       return true;
-/*     */     } 
-/* 130 */     int previous = p ^ 0x1;
-/*     */     
-/* 132 */     for (int i = 2; i < mylits.length; i++) {
-/* 133 */       if (this.voc.isFalsified(mylits[i])) {
-/* 134 */         int tmp = previous;
-/* 135 */         previous = mylits[i];
-/* 136 */         mylits[i] = tmp;
-/*     */       } else {
-/* 138 */         mylits[1] = mylits[i];
-/* 139 */         mylits[i] = previous;
-/* 140 */         this.voc.watch(mylits[1] ^ 0x1, this);
-/* 141 */         return true;
-/*     */       } 
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 147 */     System.arraycopy(mylits, 2, mylits, 1, mylits.length - 2);
-/* 148 */     mylits[mylits.length - 1] = previous;
-/* 149 */     this.voc.watch(p, this);
-/*     */     
-/* 151 */     return s.enqueue(mylits[0], this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean locked() {
-/* 158 */     return (this.voc.getReason(this.lits[0]) == this);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getActivity() {
-/* 165 */     return this.activity;
-/*     */   }
-/*     */   
-/*     */   public void setActivity(double d) {
-/* 169 */     this.activity = d;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 174 */     StringBuilder stb = new StringBuilder();
-/* 175 */     for (int lit : this.lits) {
-/* 176 */       stb.append(Lits.toString(lit));
-/* 177 */       stb.append("[");
-/* 178 */       stb.append(this.voc.valueToString(lit));
-/* 179 */       stb.append("@");
-/* 180 */       stb.append(this.voc.getLevel(lit));
-/* 181 */       stb.append("]");
-/* 182 */       stb.append(" ");
-/*     */     } 
-/* 184 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 213 */     return this.lits[i];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/* 220 */     this.activity *= d;
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 224 */     return this.lits.length;
-/*     */   }
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/* 228 */     boolean ret = s.enqueue(this.lits[0], this);
-/* 229 */     assert ret;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 251 */     if (obj == null) {
-/* 252 */       return false;
-/*     */     }
-/* 254 */     if (getClass() != obj.getClass()) {
-/* 255 */       return false;
-/*     */     }
-/*     */     try {
-/* 258 */       WLClause wcl = (WLClause)obj;
-/* 259 */       if (this.lits.length != wcl.lits.length) {
-/* 260 */         return false;
-/*     */       }
-/*     */       
-/* 263 */       for (int lit : this.lits) {
-/* 264 */         boolean ok = false;
-/* 265 */         for (int lit2 : wcl.lits) {
-/* 266 */           if (lit == lit2) {
-/* 267 */             ok = true;
-/*     */             break;
-/*     */           } 
-/*     */         } 
-/* 271 */         if (!ok) {
-/* 272 */           return false;
-/*     */         }
-/*     */       } 
-/* 275 */       return true;
-/* 276 */     } catch (ClassCastException e) {
-/* 277 */       return false;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 283 */     long sum = 0L;
-/* 284 */     for (int p : this.lits) {
-/* 285 */       sum += p;
-/*     */     }
-/* 287 */     return (int)sum / this.lits.length;
-/*     */   }
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 291 */     return false;
-/*     */   }
-/*     */   
-/*     */   public Constr toConstraint() {
-/* 295 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBeSatisfiedByCountingLiterals() {
-/* 303 */     return true;
-/*     */   }
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 307 */     return 1;
-/*     */   }
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 311 */     for (int p : this.lits) {
-/* 312 */       if (this.voc.isSatisfied(p))
-/* 313 */         return true; 
-/*     */     } 
-/* 315 */     return false;
-/*     */   }
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 319 */     for (int i = trail.size() - 1; i >= 0; i--) {
-/* 320 */       if (LiteralsUtils.var(trail.get(i)) == LiteralsUtils.var(this.lits[0])) {
-/* 321 */         return i;
-/*     */       }
-/*     */     } 
-/* 324 */     return -1;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\constraints\cnf\WLClause.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityComparator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityComparator.java
deleted file mode 100644
index 8aa19d164b0946be1a346779082cf45e750a6ae1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityComparator.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import java.io.Serializable;
-/*    */ import java.util.Comparator;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ActivityComparator
-/*    */   implements Serializable, Comparator<Constr>
-/*    */ {
-/*    */   public int compare(Constr c1, Constr c2) {
-/* 53 */     long delta = Math.round(c1.getActivity() - c2.getActivity());
-/* 54 */     if (delta == 0L) {
-/* 55 */       return c1.size() - c2.size();
-/*    */     }
-/* 57 */     return (int)delta;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ActivityComparator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityLCDS.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityLCDS.java
deleted file mode 100644
index 46ebcb5ebff2dc71a8d044d8ef0d7d9ba6579b03..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityLCDS.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ActivityLCDS
-/*    */   implements LearnedConstraintsDeletionStrategy
-/*    */ {
-/*    */   private final ConflictTimer timer;
-/*    */   protected final Solver<? extends DataStructureFactory> solver;
-/*    */   
-/*    */   public ActivityLCDS(Solver<? extends DataStructureFactory> solver, ConflictTimer timer) {
-/* 44 */     this.timer = timer;
-/* 45 */     this.solver = solver;
-/*    */   }
-/*    */   
-/*    */   public void reduce(IVec<Constr> learnedConstrs) {
-/* 49 */     learnedConstrs.sort(this.solver.getActivityComparator());
-/*    */     int i, j;
-/* 51 */     for (i = j = 0; i < learnedConstrs.size() / 2; i++) {
-/* 52 */       Constr c = (Constr)learnedConstrs.get(i);
-/* 53 */       if (c.locked() || c.size() == 2) {
-/* 54 */         learnedConstrs.set(j++, learnedConstrs.get(i));
-/*    */       } else {
-/* 56 */         onRemove(c);
-/* 57 */         c.remove(this.solver);
-/* 58 */         this.solver.slistener.delete((IConstr)c);
-/*    */       } 
-/*    */     } 
-/* 61 */     for (; i < learnedConstrs.size(); i++) {
-/* 62 */       learnedConstrs.set(j++, learnedConstrs.get(i));
-/*    */     }
-/* 64 */     if (this.solver.isVerbose()) {
-/* 65 */       this.solver.out.log(this.solver.getLogPrefix() + "cleaning " + (learnedConstrs
-/* 66 */           .size() - j) + " clauses out of " + learnedConstrs
-/* 67 */           .size());
-/*    */     }
-/*    */     
-/* 70 */     learnedConstrs.shrinkTo(j);
-/*    */   }
-/*    */   
-/*    */   public ConflictTimer getTimer() {
-/* 74 */     return this.timer;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 79 */     return "Activity based learned constraints deletion strategy with timer " + this.timer;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void init() {}
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void onClauseLearning(Constr constr) {}
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void onConflictAnalysis(Constr reason) {
-/* 93 */     if (reason.learnt())
-/* 94 */       this.solver.claBumpActivity(reason); 
-/*    */   }
-/*    */   
-/*    */   public void onPropagation(Constr from, int propagated) {}
-/*    */   
-/*    */   protected void onRemove(Constr c) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ActivityLCDS.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityListener.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityListener.java
deleted file mode 100644
index e49d97f9d3bff133de3dfff10372dec785182d99..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ActivityListener.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-interface ActivityListener extends VarActivityListener {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ActivityListener.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/AgeLCDS.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/AgeLCDS.java
deleted file mode 100644
index 552d78f6786c3f380f48a3689d4a9f89f6942a62..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/AgeLCDS.java
+++ /dev/null
@@ -1,100 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ final class AgeLCDS
-/*    */   implements LearnedConstraintsDeletionStrategy
-/*    */ {
-/*    */   private final ConflictTimer timer;
-/*    */   private final Solver<? extends DataStructureFactory> solver;
-/*    */   
-/*    */   AgeLCDS(Solver<? extends DataStructureFactory> solver, ConflictTimer timer) {
-/* 51 */     this.timer = timer;
-/* 52 */     this.solver = solver;
-/*    */   }
-/*    */   public void reduce(IVec<Constr> learnedConstrs) {
-/*    */     int i;
-/*    */     int j;
-/* 57 */     for (i = j = 0; i < this.solver.learnts.size() / 2; i++) {
-/* 58 */       Constr c = (Constr)this.solver.learnts.get(i);
-/* 59 */       if (c.locked() || c.size() == 2) {
-/* 60 */         this.solver.learnts.set(j++, this.solver.learnts.get(i));
-/*    */       } else {
-/* 62 */         c.remove(this.solver);
-/* 63 */         this.solver.slistener.delete((IConstr)c);
-/*    */       } 
-/*    */     } 
-/* 66 */     for (; i < this.solver.learnts.size(); i++) {
-/* 67 */       this.solver.learnts.set(j++, this.solver.learnts.get(i));
-/*    */     }
-/* 69 */     if (this.solver.isVerbose()) {
-/* 70 */       this.solver.out.log(this.solver.getLogPrefix() + "cleaning " + (this.solver.learnts
-/* 71 */           .size() - j) + " clauses out of " + this.solver.learnts
-/* 72 */           .size());
-/*    */     }
-/*    */     
-/* 75 */     this.solver.learnts.shrinkTo(j);
-/*    */   }
-/*    */   
-/*    */   public ConflictTimer getTimer() {
-/* 79 */     return this.timer;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 84 */     return "Age based learned constraints deletion strategy with timer " + this.timer;
-/*    */   }
-/*    */   
-/*    */   public void init() {}
-/*    */   
-/*    */   public void onClauseLearning(Constr constr) {}
-/*    */   
-/*    */   public void onConflictAnalysis(Constr reason) {}
-/*    */   
-/*    */   public void onPropagation(Constr from, int propagated) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\AgeLCDS.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/CircularBuffer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/CircularBuffer.java
deleted file mode 100644
index 41a5f476740b51afb310ded681de06f46b8ed0cb..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/CircularBuffer.java
+++ /dev/null
@@ -1,101 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import java.io.Serializable;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class CircularBuffer
-/*    */   implements Serializable
-/*    */ {
-/*    */   private final int[] values;
-/* 48 */   private int index = 0;
-/* 49 */   private long sum = 0L;
-/*    */   private boolean full = false;
-/*    */   
-/*    */   public CircularBuffer(int capacity) {
-/* 53 */     this.values = new int[capacity];
-/*    */   }
-/*    */   
-/*    */   public void push(int value) {
-/* 57 */     if (!this.full) {
-/* 58 */       this.values[this.index++] = value;
-/* 59 */       this.sum += value;
-/* 60 */       if (this.index == this.values.length) {
-/* 61 */         this.full = true;
-/* 62 */         this.index = -1;
-/*    */       } 
-/*    */       return;
-/*    */     } 
-/* 66 */     this.index++;
-/* 67 */     if (this.index == this.values.length) {
-/* 68 */       this.index = 0;
-/*    */     }
-/*    */     
-/* 71 */     this.sum -= this.values[this.index];
-/* 72 */     this.values[this.index] = value;
-/* 73 */     this.sum += value;
-/*    */   }
-/*    */   
-/*    */   public long average() {
-/* 77 */     if (this.full) {
-/* 78 */       return this.sum / this.values.length;
-/*    */     }
-/* 80 */     if (this.index == 0) {
-/* 81 */       return 0L;
-/*    */     }
-/* 83 */     return this.sum / this.index;
-/*    */   }
-/*    */   
-/*    */   public void clear() {
-/* 87 */     this.index = 0;
-/* 88 */     this.full = false;
-/* 89 */     this.sum = 0L;
-/*    */   }
-/*    */   
-/*    */   public boolean isFull() {
-/* 93 */     return this.full;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\CircularBuffer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimer.java
deleted file mode 100644
index dcec11fd408e1202063ffe0894450a21fcd5ece3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimer.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-public interface ConflictTimer {
-  void reset();
-  
-  void newConflict();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ConflictTimer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimerAdapter.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimerAdapter.java
deleted file mode 100644
index e832cbd02b7075514c7e8360e4b0c3786bbbc2d3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimerAdapter.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import java.io.Serializable;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public abstract class ConflictTimerAdapter
-/*    */   implements Serializable, ConflictTimer
-/*    */ {
-/*    */   private int counter;
-/*    */   private final int bound;
-/*    */   private final Solver<? extends DataStructureFactory> solver;
-/*    */   
-/*    */   public ConflictTimerAdapter(Solver<? extends DataStructureFactory> solver, int bound) {
-/* 56 */     this.bound = bound;
-/* 57 */     this.counter = 0;
-/* 58 */     this.solver = solver;
-/*    */   }
-/*    */   
-/*    */   public void reset() {
-/* 62 */     this.counter = 0;
-/*    */   }
-/*    */   
-/*    */   public void newConflict() {
-/* 66 */     this.counter++;
-/* 67 */     if (this.counter == this.bound) {
-/* 68 */       run();
-/* 69 */       this.counter = 0;
-/*    */     } 
-/*    */   }
-/*    */   
-/*    */   public abstract void run();
-/*    */   
-/*    */   public Solver<? extends DataStructureFactory> getSolver() {
-/* 76 */     return this.solver;
-/*    */   }
-/*    */   
-/*    */   public int bound() {
-/* 80 */     return this.bound;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ConflictTimerAdapter.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimerContainer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimerContainer.java
deleted file mode 100644
index 55507e63b3a95fc658df2715edb08381549fdf8a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ConflictTimerContainer.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import java.io.Serializable;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ConflictTimerContainer
-/*    */   implements Serializable, ConflictTimer
-/*    */ {
-/* 50 */   private final IVec<ConflictTimer> timers = (IVec<ConflictTimer>)new Vec();
-/*    */   
-/*    */   ConflictTimerContainer add(ConflictTimer timer) {
-/* 53 */     this.timers.push(timer);
-/* 54 */     return this;
-/*    */   }
-/*    */   
-/*    */   ConflictTimerContainer remove(ConflictTimer timer) {
-/* 58 */     this.timers.remove(timer);
-/* 59 */     return this;
-/*    */   }
-/*    */   
-/*    */   public void reset() {
-/* 63 */     for (int i = 0; i < this.timers.size(); i++) {
-/* 64 */       ((ConflictTimer)this.timers.get(i)).reset();
-/*    */     }
-/*    */   }
-/*    */   
-/*    */   public void newConflict() {
-/* 69 */     for (int i = 0; i < this.timers.size(); i++)
-/* 70 */       ((ConflictTimer)this.timers.get(i)).newConflict(); 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ConflictTimerContainer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Counter.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Counter.java
deleted file mode 100644
index 09fe620cb1c9e92c7662dc28cdf5212d42bd956f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Counter.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class Counter
-/*    */ {
-/*    */   private int value;
-/*    */   
-/*    */   public Counter() {
-/* 39 */     this(1);
-/*    */   }
-/*    */   
-/*    */   public Counter(int initialValue) {
-/* 43 */     this.value = initialValue;
-/*    */   }
-/*    */   
-/*    */   public void inc() {
-/* 47 */     this.value++;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void dec() {
-/* 54 */     this.value--;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 59 */     return String.valueOf(this.value);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\Counter.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/CounterBasedPrimeImplicantStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/CounterBasedPrimeImplicantStrategy.java
deleted file mode 100644
index 6744c8623daf95821316f167da02a5d149e4f74d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/CounterBasedPrimeImplicantStrategy.java
+++ /dev/null
@@ -1,155 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class CounterBasedPrimeImplicantStrategy
-/*     */   implements PrimeImplicantStrategy
-/*     */ {
-/*     */   private int[] prime;
-/*     */   
-/*     */   public int[] compute(Solver<? extends DataStructureFactory> solver) {
-/*  57 */     long begin = System.currentTimeMillis();
-/*  58 */     IVecInt[] watched = new IVecInt[solver.voc.nVars() * 2 + 2];
-/*  59 */     for (int d : solver.fullmodel) {
-/*  60 */       watched[LiteralsUtils.toInternal(d)] = (IVecInt)new VecInt();
-/*     */     }
-/*  62 */     int[] count = new int[solver.constrs.size()];
-/*     */ 
-/*     */     
-/*  65 */     for (int i = 0; i < solver.constrs.size(); i++) {
-/*  66 */       Constr constr = (Constr)solver.constrs.get(i);
-/*  67 */       if (!constr.canBeSatisfiedByCountingLiterals()) {
-/*  68 */         throw new IllegalStateException("Algo2 does not work with constraints other than clauses and cardinalities" + constr
-/*     */             
-/*  70 */             .getClass());
-/*     */       }
-/*  72 */       count[i] = 0;
-/*  73 */       for (int m = 0; m < constr.size(); m++) {
-/*  74 */         IVecInt watch = watched[constr.get(m)];
-/*  75 */         if (watch != null)
-/*     */         {
-/*  77 */           watch.push(i);
-/*     */         }
-/*     */       } 
-/*     */     } 
-/*  81 */     for (int d : solver.fullmodel) {
-/*  82 */       IteratorInt iteratorInt = watched[LiteralsUtils.toInternal(d)].iterator();
-/*  83 */       while (iteratorInt.hasNext()) {
-/*  84 */         count[iteratorInt.next()] = count[iteratorInt.next()] + 1;
-/*     */       }
-/*     */     } 
-/*  87 */     this.prime = new int[solver.voc.nVars() + 1];
-/*     */     
-/*  89 */     for (int j = 0; j < this.prime.length; j++) {
-/*  90 */       this.prime[j] = 0;
-/*     */     }
-/*  92 */     for (IteratorInt it = solver.implied.iterator(); it.hasNext(); ) {
-/*  93 */       int d = it.next();
-/*  94 */       this.prime[Math.abs(d)] = d;
-/*     */     } 
-/*  96 */     int removed = 0;
-/*  97 */     int posremoved = 0;
-/*  98 */     int propagated = 0;
-/*     */     
-/* 100 */     for (int k = 0; k < solver.decisions.size(); k++) {
-/* 101 */       int d = solver.decisions.get(k);
-/* 102 */       IteratorInt iteratorInt = watched[LiteralsUtils.toInternal(d)].iterator();
-/* 103 */       while (iteratorInt.hasNext()) {
-/* 104 */         int constrNumber = iteratorInt.next();
-/* 105 */         if (count[constrNumber] == ((Constr)solver.constrs.get(constrNumber))
-/* 106 */           .requiredNumberOfSatisfiedLiterals()) {
-/* 107 */           this.prime[Math.abs(d)] = d;
-/* 108 */           propagated++;
-/*     */           break label70;
-/*     */         } 
-/*     */       } 
-/* 112 */       removed++;
-/* 113 */       if (d > 0 && d > solver.nVars()) {
-/* 114 */         posremoved++;
-/*     */       }
-/* 116 */       iteratorInt = watched[LiteralsUtils.toInternal(d)].iterator();
-/* 117 */       label70: while (iteratorInt.hasNext()) {
-/* 118 */         count[iteratorInt.next()] = count[iteratorInt.next()] - 1;
-/*     */       }
-/*     */     } 
-/* 121 */     int[] implicant = new int[this.prime.length - removed - 1];
-/* 122 */     int index = 0;
-/* 123 */     for (int m : this.prime) {
-/* 124 */       if (m != 0) {
-/* 125 */         implicant[index++] = m;
-/*     */       }
-/*     */     } 
-/* 128 */     long end = System.currentTimeMillis();
-/* 129 */     if (solver.isVerbose()) {
-/* 130 */       System.out.printf("%s prime implicant computation statistics ALGO2%n", new Object[] { solver
-/*     */             
-/* 132 */             .getLogPrefix() });
-/* 133 */       System.out.printf("%s implied: %d, decision: %d, removed %d (+%d), propagated %d, time(ms):%d %n", new Object[] { solver
-/*     */             
-/* 135 */             .getLogPrefix(), Integer.valueOf(solver.implied.size()), 
-/* 136 */             Integer.valueOf(solver.decisions.size()), Integer.valueOf(removed), Integer.valueOf(posremoved), Integer.valueOf(propagated), 
-/* 137 */             Long.valueOf(end - begin) });
-/*     */     } 
-/* 139 */     return implicant;
-/*     */   }
-/*     */   
-/*     */   public int[] getPrimeImplicantAsArrayWithHoles() {
-/* 143 */     if (this.prime == null) {
-/* 144 */       throw new UnsupportedOperationException("Call the compute method first!");
-/*     */     }
-/*     */     
-/* 147 */     return this.prime;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\CounterBasedPrimeImplicantStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/DataStructureFactory.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/DataStructureFactory.java
deleted file mode 100644
index bd256e13a7d0787132f344d00c0fe57c1240713d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/DataStructureFactory.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-
-public interface DataStructureFactory {
-  Constr createClause(IVecInt paramIVecInt) throws ContradictionException;
-  
-  Constr createUnregisteredClause(IVecInt paramIVecInt);
-  
-  void learnConstraint(Constr paramConstr);
-  
-  Constr createCardinalityConstraint(IVecInt paramIVecInt, int paramInt) throws ContradictionException;
-  
-  void setUnitPropagationListener(UnitPropagationListener paramUnitPropagationListener);
-  
-  void setLearner(Learner paramLearner);
-  
-  void reset();
-  
-  ILits getVocabulary();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\DataStructureFactory.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Glucose2LCDS.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Glucose2LCDS.java
deleted file mode 100644
index a71a6f3ed2598bfad729b1dba454a38c7f50176f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Glucose2LCDS.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class Glucose2LCDS<D extends DataStructureFactory>
-/*    */   extends GlucoseLCDS<D>
-/*    */ {
-/*    */   protected Glucose2LCDS(Solver<D> solver, ConflictTimer timer) {
-/* 42 */     super(solver, timer);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 47 */     return "Glucose 2 learned constraints deletion strategy (LBD updated on propagation) with timer " + 
-/* 48 */       getTimer();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void onPropagation(Constr from, int propagated) {
-/* 53 */     if (from.getActivity() > 2.0D) {
-/* 54 */       int nblevel = computeLBD(from, propagated);
-/* 55 */       if (nblevel < from.getActivity()) {
-/* 56 */         (getSolver()).stats.incUpdateLBD();
-/* 57 */         from.setActivity(nblevel);
-/*    */       } 
-/*    */     } 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\Glucose2LCDS.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/GlucoseLCDS.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/GlucoseLCDS.java
deleted file mode 100644
index 71c09c65f54e22e452eeb17e4e219cb64af0686e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/GlucoseLCDS.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ class GlucoseLCDS<D extends DataStructureFactory>
-/*     */   implements LearnedConstraintsDeletionStrategy
-/*     */ {
-/*     */   protected final Solver<D> solver;
-/*  56 */   private int[] flags = new int[0];
-/*  57 */   private int flag = 0;
-/*     */   
-/*     */   private final ConflictTimer timer;
-/*     */ 
-/*     */   
-/*     */   protected GlucoseLCDS(Solver<D> solver, ConflictTimer timer) {
-/*  63 */     this.solver = solver;
-/*  64 */     this.timer = timer;
-/*     */   }
-/*     */   
-/*     */   public void reduce(IVec<Constr> learnedConstrs) {
-/*  68 */     learnedConstrs.sort(this.solver.getActivityComparator());
-/*     */     
-/*  70 */     int j = learnedConstrs.size() / 2, i = j; for (; i < learnedConstrs
-/*  71 */       .size(); i++) {
-/*  72 */       Constr c = (Constr)learnedConstrs.get(i);
-/*  73 */       if (c.locked() || c.getActivity() <= 2.0D) {
-/*  74 */         learnedConstrs.set(j++, learnedConstrs.get(i));
-/*     */       } else {
-/*  76 */         c.remove(this.solver);
-/*  77 */         this.solver.slistener.delete((IConstr)c);
-/*  78 */         onRemove(c);
-/*     */       } 
-/*     */     } 
-/*  81 */     if (this.solver.isVerbose()) {
-/*  82 */       this.solver.out.log(this.solver.getLogPrefix() + "cleaning " + (learnedConstrs
-/*  83 */           .size() - j) + " clauses out of " + learnedConstrs
-/*  84 */           .size() + " with flag " + this.flag + "/" + this.solver.stats
-/*  85 */           .getConflicts());
-/*     */     }
-/*     */     
-/*  88 */     learnedConstrs.shrinkTo(j);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected void onRemove(Constr c) {}
-/*     */ 
-/*     */   
-/*     */   public ConflictTimer getTimer() {
-/*  97 */     return this.timer;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 102 */     return "Glucose learned constraints deletion strategy with timer " + this.timer;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void init() {
-/* 107 */     int howmany = this.solver.voc.nVars();
-/*     */     
-/* 109 */     if (this.flags.length <= howmany) {
-/* 110 */       this.flags = new int[howmany + 1];
-/*     */     }
-/* 112 */     this.flag = 0;
-/* 113 */     this.timer.reset();
-/*     */   }
-/*     */   
-/*     */   public void onClauseLearning(Constr constr) {
-/* 117 */     int nblevel = computeLBD(constr, -1);
-/* 118 */     constr.setActivity(nblevel);
-/*     */   }
-/*     */   
-/*     */   protected int computeLBD(Constr constr, int propagated) {
-/* 122 */     int nblevel = 1;
-/* 123 */     this.flag++;
-/*     */     
-/* 125 */     for (int i = 1; i < constr.size(); i++) {
-/* 126 */       int currentLevel = this.solver.voc.getLevel(constr.get(i));
-/* 127 */       if (currentLevel >= 0 && this.flags[currentLevel] != this.flag) {
-/* 128 */         this.flags[currentLevel] = this.flag;
-/* 129 */         nblevel++;
-/*     */       } 
-/*     */     } 
-/* 132 */     return nblevel;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void onConflictAnalysis(Constr reason) {}
-/*     */ 
-/*     */   
-/*     */   public void onPropagation(Constr from, int propagated) {}
-/*     */ 
-/*     */   
-/*     */   protected Solver<D> getSolver() {
-/* 144 */     return this.solver;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\GlucoseLCDS.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Heap.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Heap.java
deleted file mode 100644
index f639a624194e8a66728838b0333bea89422ea061..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Heap.java
+++ /dev/null
@@ -1,160 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.orders.VariableComparator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class Heap
-/*     */   implements Serializable
-/*     */ {
-/*     */   private static int left(int i) {
-/*  52 */     return i << 1;
-/*     */   }
-/*     */   
-/*     */   private static int right(int i) {
-/*  56 */     return i << 1 ^ 0x1;
-/*     */   }
-/*     */   
-/*     */   private static int parent(int i) {
-/*  60 */     return i >> 1;
-/*     */   }
-/*     */   
-/*  63 */   private final IVecInt heap = (IVecInt)new VecInt();
-/*     */   
-/*  65 */   private final IVecInt indices = (IVecInt)new VecInt();
-/*     */   
-/*     */   private final VariableComparator comparator;
-/*     */   
-/*     */   void percolateUp(int i) {
-/*  70 */     int x = this.heap.get(i);
-/*  71 */     int p = parent(i);
-/*  72 */     while (i != 1 && this.comparator.preferredTo(x, this.heap.get(p))) {
-/*  73 */       this.heap.set(i, this.heap.get(p));
-/*  74 */       this.indices.set(this.heap.get(p), i);
-/*  75 */       i = p;
-/*  76 */       p = parent(p);
-/*     */     } 
-/*  78 */     this.heap.set(i, x);
-/*  79 */     this.indices.set(x, i);
-/*     */   }
-/*     */   
-/*     */   void percolateDown(int i) {
-/*  83 */     int x = this.heap.get(i);
-/*  84 */     while (left(i) < this.heap.size()) {
-/*     */ 
-/*     */       
-/*  87 */       int child = (right(i) < this.heap.size() && this.comparator.preferredTo(this.heap.get(right(i)), this.heap.get(left(i)))) ? right(i) : left(i);
-/*  88 */       if (!this.comparator.preferredTo(this.heap.get(child), x)) {
-/*     */         break;
-/*     */       }
-/*  91 */       this.heap.set(i, this.heap.get(child));
-/*  92 */       this.indices.set(this.heap.get(i), i);
-/*  93 */       i = child;
-/*     */     } 
-/*  95 */     this.heap.set(i, x);
-/*  96 */     this.indices.set(x, i);
-/*     */   }
-/*     */   
-/*     */   boolean ok(int n) {
-/* 100 */     return (n >= 0 && n < this.indices.size());
-/*     */   }
-/*     */   
-/*     */   public Heap(VariableComparator comparator) {
-/* 104 */     this.comparator = comparator;
-/* 105 */     this.heap.push(-1);
-/*     */   }
-/*     */   
-/*     */   public void setBounds(int size) {
-/* 109 */     assert size >= 0;
-/* 110 */     this.indices.growTo(size, 0);
-/*     */   }
-/*     */   
-/*     */   public boolean inHeap(int n) {
-/* 114 */     assert ok(n);
-/* 115 */     return (this.indices.get(n) != 0);
-/*     */   }
-/*     */   
-/*     */   public void increase(int n) {
-/* 119 */     assert ok(n);
-/* 120 */     assert inHeap(n);
-/* 121 */     percolateUp(this.indices.get(n));
-/*     */   }
-/*     */   
-/*     */   public boolean empty() {
-/* 125 */     return (this.heap.size() == 1);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 133 */     int r = this.heap.get(i);
-/* 134 */     this.heap.set(i, this.heap.last());
-/* 135 */     this.indices.set(this.heap.get(i), i);
-/* 136 */     this.indices.set(r, 0);
-/* 137 */     this.heap.pop();
-/* 138 */     if (this.heap.size() > 1) {
-/* 139 */       percolateDown(1);
-/*     */     }
-/* 141 */     return r;
-/*     */   }
-/*     */   
-/*     */   public void insert(int n) {
-/* 145 */     assert ok(n);
-/* 146 */     this.indices.set(n, this.heap.size());
-/* 147 */     this.heap.push(n);
-/* 148 */     percolateUp(this.indices.get(n));
-/*     */   }
-/*     */   
-/*     */   public int getmin() {
-/* 152 */     return get(1);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\Heap.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ICDCL.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ICDCL.java
deleted file mode 100644
index d3042e0fc24c7a1780d7bcca59aae802fb09ac05..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ICDCL.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-
-public interface ICDCL extends ActivityListener, Learner, ISolver, UnitPropagationListener {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ICDCL.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ILits.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ILits.java
deleted file mode 100644
index 35645c4ef1f554e02a59913950d46d1f42ebeed8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ILits.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-
-public interface ILits {
-  int getFromPool(int paramInt);
-  
-  boolean belongsToPool(int paramInt);
-  
-  void resetPool();
-  
-  void unassign(int paramInt);
-  
-  void satisfies(int paramInt);
-  
-  void forgets(int paramInt);
-  
-  boolean isSatisfied(int paramInt);
-  
-  boolean isFalsified(int paramInt);
-  
-  boolean isUnassigned(int paramInt);
-  
-  int nVars();
-  
-  int realnVars();
-  
-  int nextFreeVarId(boolean paramBoolean);
-  
-  int getLevel(int paramInt);
-  
-  void setLevel(int paramInt1, int paramInt2);
-  
-  Constr getReason(int paramInt);
-  
-  void setReason(int paramInt, Constr paramConstr);
-  
-  IVec<Undoable> undos(int paramInt);
-  
-  void watch(int paramInt, Propagatable paramPropagatable);
-  
-  IVec<Propagatable> watches(int paramInt);
-  
-  String valueToString(int paramInt);
-  
-  void setTrailPosition(int paramInt1, int paramInt2);
-  
-  int getTrailPosition(int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ILits.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/IOrder.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/IOrder.java
deleted file mode 100644
index daaee5f959325757aa92328bcf3f8deeb84f6035..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/IOrder.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import java.io.PrintWriter;
-
-public interface IOrder {
-  void setLits(ILits paramILits);
-  
-  int select();
-  
-  void undo(int paramInt);
-  
-  void updateVar(int paramInt);
-  
-  void init();
-  
-  void printStat(PrintWriter paramPrintWriter, String paramString);
-  
-  void setVarDecay(double paramDouble);
-  
-  void varDecayActivity();
-  
-  void assignLiteral(int paramInt);
-  
-  void updateVarAtDecisionLevel(int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\IOrder.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/IPhaseSelectionStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/IPhaseSelectionStrategy.java
deleted file mode 100644
index 1733ecfb1a60be52d9c941532b8aa3909b6bd0ed..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/IPhaseSelectionStrategy.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import java.io.Serializable;
-
-public interface IPhaseSelectionStrategy extends Serializable {
-  void updateVar(int paramInt);
-  
-  void init(int paramInt);
-  
-  void init(int paramInt1, int paramInt2);
-  
-  void assignLiteral(int paramInt);
-  
-  int select(int paramInt);
-  
-  void updateVarAtDecisionLevel(int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\IPhaseSelectionStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ISimplifier.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ISimplifier.java
deleted file mode 100644
index 75d14b1ebc84d46f080e045d8653341a5ff7e198..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/ISimplifier.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import java.io.Serializable;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-
-public interface ISimplifier extends Serializable {
-  void simplify(IVecInt paramIVecInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\ISimplifier.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LBDConflictTimer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LBDConflictTimer.java
deleted file mode 100644
index 73aa4ebc57781aac134461bf524be489114c0994..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LBDConflictTimer.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ final class LBDConflictTimer
-/*    */   extends ConflictTimerAdapter
-/*    */ {
-/* 40 */   private int nbconflict = 0;
-/*    */ 
-/*    */   
-/* 43 */   private int nextbound = 5000;
-/*    */   
-/*    */   LBDConflictTimer(Solver<? extends DataStructureFactory> solver, int bound) {
-/* 46 */     super(solver, bound);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void run() {
-/* 51 */     this.nbconflict += bound();
-/* 52 */     if (this.nbconflict >= this.nextbound) {
-/* 53 */       this.nextbound += 1000;
-/*    */ 
-/*    */ 
-/*    */       
-/* 57 */       this.nbconflict = 0;
-/* 58 */       getSolver().setNeedToReduceDB(true);
-/*    */     } 
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void reset() {
-/* 64 */     super.reset();
-/* 65 */     this.nextbound = 5000;
-/* 66 */     if (this.nbconflict >= this.nextbound) {
-/* 67 */       this.nbconflict = 0;
-/* 68 */       getSolver().setNeedToReduceDB(true);
-/*    */     } 
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 74 */     return "check every " + bound() + " if the learned constraints reach increasing bounds: " + 'ᎈ' + " step " + 'Ϩ';
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\LBDConflictTimer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LearnedConstraintsDeletionStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LearnedConstraintsDeletionStrategy.java
deleted file mode 100644
index f6c1956172dba2df845d22f17855e3e1bc65c991..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LearnedConstraintsDeletionStrategy.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import java.io.Serializable;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-
-public interface LearnedConstraintsDeletionStrategy extends Serializable {
-  void init();
-  
-  ConflictTimer getTimer();
-  
-  void reduce(IVec<Constr> paramIVec);
-  
-  void onClauseLearning(Constr paramConstr);
-  
-  void onConflictAnalysis(Constr paramConstr);
-  
-  void onPropagation(Constr paramConstr, int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\LearnedConstraintsDeletionStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Learner.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Learner.java
deleted file mode 100644
index 2643cae4f6636902a067fd414ec423709ee76f58..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Learner.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-
-public interface Learner {
-  void learn(Constr paramConstr);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\Learner.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LearningStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LearningStrategy.java
deleted file mode 100644
index 7d2478865193f7c5f106e95d210d7b19b318612c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/LearningStrategy.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import java.io.Serializable;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-
-public interface LearningStrategy<D extends DataStructureFactory> extends Serializable {
-  void init();
-  
-  void learns(Constr paramConstr);
-  
-  void setSolver(Solver<D> paramSolver);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\LearningStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/MemoryBasedConflictTimer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/MemoryBasedConflictTimer.java
deleted file mode 100644
index 92b1bb088611b3a8eef0f70ad065892a8e98289f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/MemoryBasedConflictTimer.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ final class MemoryBasedConflictTimer
-/*    */   extends ConflictTimerAdapter
-/*    */ {
-/* 35 */   private long memorybound = -1L;
-/*    */ 
-/*    */   
-/*    */   MemoryBasedConflictTimer(Solver<? extends DataStructureFactory> solver, int bound) {
-/* 39 */     super(solver, bound);
-/*    */   }
-/*    */   
-/*    */   private long getMemoryBound() {
-/* 43 */     if (this.memorybound == -1L) {
-/* 44 */       this.memorybound = Runtime.getRuntime().freeMemory() / 10L;
-/*    */     }
-/* 46 */     return this.memorybound;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void run() {
-/* 51 */     long freemem = Runtime.getRuntime().freeMemory();
-/* 52 */     if (freemem < getMemoryBound())
-/*    */     {
-/* 54 */       getSolver().setNeedToReduceDB(true);
-/*    */     }
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 60 */     return "check every " + bound() + " if the memory bound " + this.memorybound + " is reached";
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\MemoryBasedConflictTimer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Pair.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Pair.java
deleted file mode 100644
index f354d49351bab2a0f2b56bd2c93909798ed345c0..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Pair.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import java.io.Serializable;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class Pair
-/*    */   implements Serializable
-/*    */ {
-/*    */   private int backtrackLevel;
-/*    */   private Constr reason;
-/*    */   
-/*    */   public int getBacktrackLevel() {
-/* 50 */     return this.backtrackLevel;
-/*    */   }
-/*    */   
-/*    */   public void setBacktrackLevel(int backtrackLevel) {
-/* 54 */     this.backtrackLevel = backtrackLevel;
-/*    */   }
-/*    */   
-/*    */   public Constr getReason() {
-/* 58 */     return this.reason;
-/*    */   }
-/*    */   
-/*    */   public void setReason(Constr reason) {
-/* 62 */     this.reason = reason;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\Pair.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/PrimeImplicantStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/PrimeImplicantStrategy.java
deleted file mode 100644
index 6fe4a51b4cf88b58ba23c96b75f977cc5715c4d8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/PrimeImplicantStrategy.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-public interface PrimeImplicantStrategy {
-  int[] compute(Solver<? extends DataStructureFactory> paramSolver);
-  
-  int[] getPrimeImplicantAsArrayWithHoles();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\PrimeImplicantStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/QuadraticPrimeImplicantStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/QuadraticPrimeImplicantStrategy.java
deleted file mode 100644
index 277c46751c41871d72e98d8f38a277867adbb7b1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/QuadraticPrimeImplicantStrategy.java
+++ /dev/null
@@ -1,183 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class QuadraticPrimeImplicantStrategy
-/*     */   implements PrimeImplicantStrategy
-/*     */ {
-/*     */   private int[] prime;
-/*     */   
-/*     */   boolean setAndPropagate(Solver<? extends DataStructureFactory> solver, int p) {
-/*  62 */     if (solver.voc.isUnassigned(p)) {
-/*  63 */       assert !solver.trail.contains(p);
-/*  64 */       assert !solver.trail.contains(LiteralsUtils.neg(p));
-/*  65 */       return (solver.assume(p) && solver.propagate() == null);
-/*     */     } 
-/*  67 */     return solver.voc.isSatisfied(p);
-/*     */   }
-/*     */   
-/*     */   public int[] compute(Solver<? extends DataStructureFactory> solver) {
-/*  71 */     assert solver.qhead == solver.trail.size() + solver.learnedLiterals
-/*  72 */       .size();
-/*  73 */     long begin = System.currentTimeMillis();
-/*  74 */     if (solver.learnedLiterals.size() > 0) {
-/*  75 */       solver.qhead = solver.trail.size();
-/*     */     }
-/*  77 */     if (solver.isVerbose()) {
-/*  78 */       System.out.printf("%s implied: %d, decision: %d %n", new Object[] { solver
-/*  79 */             .getLogPrefix(), Integer.valueOf(solver.implied.size()), 
-/*  80 */             Integer.valueOf(solver.decisions.size()) });
-/*     */     }
-/*  82 */     this.prime = new int[solver.realNumberOfVariables() + 1];
-/*     */     
-/*  84 */     for (int i = 0; i < this.prime.length; i++) {
-/*  85 */       this.prime[i] = 0;
-/*     */     }
-/*     */     
-/*  88 */     for (IteratorInt it = solver.implied.iterator(); it.hasNext(); ) {
-/*  89 */       int d = it.next();
-/*  90 */       int p = LiteralsUtils.toInternal(d);
-/*  91 */       this.prime[Math.abs(d)] = d;
-/*  92 */       boolean noproblem = setAndPropagate(solver, p);
-/*  93 */       assert noproblem;
-/*     */     } 
-/*     */ 
-/*     */     
-/*  97 */     int removed = 0;
-/*  98 */     int posremoved = 0;
-/*  99 */     int propagated = 0;
-/* 100 */     int tested = 0;
-/* 101 */     int l2propagation = 0;
-/*     */     
-/* 103 */     for (int j = 0; j < solver.decisions.size(); j++) {
-/* 104 */       int d = solver.decisions.get(j);
-/* 105 */       assert !solver.voc.isFalsified(LiteralsUtils.toInternal(d));
-/* 106 */       if (solver.voc.isSatisfied(LiteralsUtils.toInternal(d))) {
-/*     */         
-/* 108 */         this.prime[Math.abs(d)] = d;
-/* 109 */         propagated++;
-/* 110 */       } else if (setAndPropagate(solver, LiteralsUtils.toInternal(-d))) {
-/* 111 */         boolean canBeRemoved = true;
-/* 112 */         tested++;
-/* 113 */         int rightlevel = solver.currentDecisionLevel();
-/* 114 */         for (int k = j + 1; k < solver.decisions.size(); k++) {
-/* 115 */           l2propagation++;
-/* 116 */           if (!setAndPropagate(solver, 
-/* 117 */               LiteralsUtils.toInternal(solver.decisions.get(k)))) {
-/* 118 */             canBeRemoved = false;
-/*     */             break;
-/*     */           } 
-/*     */         } 
-/* 122 */         solver.cancelUntil(rightlevel);
-/* 123 */         if (canBeRemoved) {
-/*     */           
-/* 125 */           solver.forget(Math.abs(d));
-/* 126 */           Constr constr = solver.propagate();
-/* 127 */           assert constr == null;
-/* 128 */           removed++;
-/* 129 */           if (d > 0 && d > solver.nVars()) {
-/* 130 */             posremoved++;
-/*     */           }
-/*     */         } else {
-/* 133 */           this.prime[Math.abs(d)] = d;
-/* 134 */           solver.cancel();
-/* 135 */           assert solver.voc.isUnassigned(LiteralsUtils.toInternal(d));
-/* 136 */           boolean noproblem = setAndPropagate(solver, LiteralsUtils.toInternal(d));
-/* 137 */           assert noproblem;
-/*     */         } 
-/*     */       } else {
-/*     */         
-/* 141 */         this.prime[Math.abs(d)] = d;
-/* 142 */         solver.cancel();
-/* 143 */         boolean noproblem = setAndPropagate(solver, LiteralsUtils.toInternal(d));
-/* 144 */         assert noproblem;
-/*     */       } 
-/*     */     } 
-/* 147 */     solver.cancelUntil(0);
-/* 148 */     int[] implicant = new int[this.prime.length - removed - 1];
-/* 149 */     int index = 0;
-/* 150 */     for (int k : this.prime) {
-/* 151 */       if (k != 0) {
-/* 152 */         implicant[index++] = k;
-/*     */       }
-/*     */     } 
-/* 155 */     long end = System.currentTimeMillis();
-/* 156 */     if (solver.isVerbose()) {
-/* 157 */       System.out.printf("%s prime implicant computation statistics ORIG%n", new Object[] { solver
-/*     */             
-/* 159 */             .getLogPrefix() });
-/* 160 */       System.out.printf("%s implied: %d, decision: %d, removed %d (+%d), tested %d, propagated %d), l2 propagation:%d, time(ms):%d %n", new Object[] { solver
-/*     */             
-/* 162 */             .getLogPrefix(), Integer.valueOf(solver.implied.size()), 
-/* 163 */             Integer.valueOf(solver.decisions.size()), Integer.valueOf(removed), Integer.valueOf(posremoved), Integer.valueOf(tested), 
-/* 164 */             Integer.valueOf(propagated), Integer.valueOf(l2propagation), Long.valueOf(end - begin) });
-/*     */     } 
-/* 166 */     return implicant;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int[] getPrimeImplicantAsArrayWithHoles() {
-/* 171 */     if (this.prime == null) {
-/* 172 */       throw new UnsupportedOperationException("Call the compute method first!");
-/*     */     }
-/*     */     
-/* 175 */     return this.prime;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\QuadraticPrimeImplicantStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/RestartStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/RestartStrategy.java
deleted file mode 100644
index f3bcdcef5ab446c126f2226749f19d9411bbf701..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/RestartStrategy.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import java.io.Serializable;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-
-public interface RestartStrategy extends Serializable, ConflictTimer {
-  void init(SearchParams paramSearchParams, SolverStats paramSolverStats);
-  
-  boolean shouldRestart();
-  
-  void onRestart();
-  
-  void onBackjumpToRootLevel();
-  
-  void newLearnedClause(Constr paramConstr, int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\RestartStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SearchParams.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SearchParams.java
deleted file mode 100644
index 7405b2f4fcd799b2d999afd3020ea73bacbe6cd7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SearchParams.java
+++ /dev/null
@@ -1,173 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import java.lang.reflect.Field;
-/*     */ import java.util.logging.Level;
-/*     */ import java.util.logging.Logger;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class SearchParams
-/*     */   implements Serializable
-/*     */ {
-/*  47 */   private static final Logger LOGGER = Logger.getLogger("net.fabricmc.loader.impl.lib.sat4j.core");
-/*     */   private double claDecay;
-/*     */   private double varDecay;
-/*     */   private double conflictBoundIncFactor;
-/*     */   private int initConflictBound;
-/*     */   
-/*     */   public SearchParams() {
-/*  54 */     this(0.95D, 0.999D, 1.5D, 100);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public SearchParams(double d, double e, double f, int i) {
-/*  81 */     this.varDecay = d;
-/*  82 */     this.claDecay = e;
-/*  83 */     this.conflictBoundIncFactor = f;
-/*  84 */     this.initConflictBound = i;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getClaDecay() {
-/*  91 */     return this.claDecay;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getVarDecay() {
-/*  98 */     return this.varDecay;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 116 */     StringBuilder stb = new StringBuilder();
-/* 117 */     for (Field field : SearchParams.class.getDeclaredFields()) {
-/* 118 */       if (!field.getName().startsWith("serial") && 
-/* 119 */         !field.getName().startsWith("class")) {
-/* 120 */         stb.append(field.getName());
-/* 121 */         stb.append("=");
-/*     */         try {
-/* 123 */           stb.append(field.get(this));
-/* 124 */         } catch (IllegalArgumentException e) {
-/* 125 */           LOGGER.log(Level.INFO, "Issue when reflectively accessing field", e);
-/*     */         }
-/* 127 */         catch (IllegalAccessException e) {
-/* 128 */           LOGGER.log(Level.INFO, "Access issue when reflectively accessing field", e);
-/*     */         } 
-/*     */ 
-/*     */         
-/* 132 */         stb.append(" ");
-/*     */       } 
-/*     */     } 
-/* 135 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getConflictBoundIncFactor() {
-/* 158 */     return this.conflictBoundIncFactor;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int getInitConflictBound() {
-/* 165 */     return this.initConflictBound;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\SearchParams.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SizeComparator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SizeComparator.java
deleted file mode 100644
index 62dad72512f6b2c2b0564337aa0d87121c5bb0b8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SizeComparator.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import java.io.Serializable;
-/*    */ import java.util.Comparator;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class SizeComparator
-/*    */   implements Serializable, Comparator<Constr>
-/*    */ {
-/*    */   public int compare(Constr c1, Constr c2) {
-/* 54 */     int delta = c1.size() - c2.size();
-/* 55 */     if (delta == 0) {
-/* 56 */       return (int)Math.round(c2.getActivity() - c1.getActivity());
-/*    */     }
-/* 58 */     return delta;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\SizeComparator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SizeLCDS.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SizeLCDS.java
deleted file mode 100644
index 5ba8b74867eea47bbf096a7627d97e6ed306dfca..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SizeLCDS.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*    */ 
-/*    */ import java.util.Comparator;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ final class SizeLCDS
-/*    */   implements LearnedConstraintsDeletionStrategy
-/*    */ {
-/*    */   private final ConflictTimer timer;
-/*    */   private final Solver<? extends DataStructureFactory> solver;
-/* 44 */   private static final Comparator<Constr> comparator = new SizeComparator();
-/*    */ 
-/*    */   
-/*    */   SizeLCDS(Solver<? extends DataStructureFactory> solver, ConflictTimer timer) {
-/* 48 */     this.timer = timer;
-/* 49 */     this.solver = solver;
-/*    */   }
-/*    */   
-/*    */   public void reduce(IVec<Constr> learnedConstrs) {
-/* 53 */     learnedConstrs.sort(comparator);
-/*    */     
-/* 55 */     int j = learnedConstrs.size() / 2, i = j; for (; i < learnedConstrs
-/* 56 */       .size(); i++) {
-/* 57 */       Constr c = (Constr)learnedConstrs.get(i);
-/* 58 */       if (c.locked() || c.size() == 2) {
-/* 59 */         learnedConstrs.set(j++, learnedConstrs.get(i));
-/*    */       } else {
-/* 61 */         c.remove(this.solver);
-/* 62 */         this.solver.slistener.delete((IConstr)c);
-/*    */       } 
-/*    */     } 
-/* 65 */     if (this.solver.isVerbose()) {
-/* 66 */       this.solver.out.log(this.solver.getLogPrefix() + "cleaning " + (learnedConstrs
-/* 67 */           .size() - j) + " clauses out of " + learnedConstrs
-/* 68 */           .size());
-/*    */     }
-/*    */     
-/* 71 */     learnedConstrs.shrinkTo(j);
-/*    */   }
-/*    */   
-/*    */   public ConflictTimer getTimer() {
-/* 75 */     return this.timer;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 80 */     return "Sized based learned constraints deletion strategy with timer " + this.timer;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void init() {}
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void onClauseLearning(Constr constr) {}
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void onConflictAnalysis(Constr reason) {
-/* 94 */     if (reason.learnt())
-/* 95 */       this.solver.claBumpActivity(reason); 
-/*    */   }
-/*    */   
-/*    */   public void onPropagation(Constr from, int propagated) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\SizeLCDS.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Solver.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Solver.java
deleted file mode 100644
index a830d960796721395cbd9bf3aecbc7a3b88d1e13..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Solver.java
+++ /dev/null
@@ -1,3555 +0,0 @@
-/*      */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*      */ 
-/*      */ import java.io.PrintWriter;
-/*      */ import java.util.Comparator;
-/*      */ import java.util.HashMap;
-/*      */ import java.util.Iterator;
-/*      */ import java.util.Map;
-/*      */ import java.util.Timer;
-/*      */ import java.util.TimerTask;
-/*      */ import java.util.TreeSet;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.AssignmentOrigin;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.ILogAble;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolverService;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.Lbool;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.RandomAccessModel;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.SearchListener;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitClauseConsumer;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitClauseProvider;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ public class Solver<D extends DataStructureFactory>
-/*      */   implements ICDCL<D>, ISolverService
-/*      */ {
-/*      */   protected ILogAble out;
-/*   98 */   protected final IVec<Constr> constrs = (IVec<Constr>)new Vec();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*  103 */   protected final IVec<Constr> learnts = (IVec<Constr>)new Vec();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*  108 */   private double claInc = 1.0D;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*  113 */   private double claDecay = 1.0D;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*  119 */   protected int qhead = 0;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*  124 */   protected final IVecInt trail = (IVecInt)new VecInt();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*  129 */   protected final IVecInt trailLim = (IVecInt)new VecInt();
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   protected int rootLevel;
-/*      */ 
-/*      */   
-/*  136 */   private int[] model = null;
-/*      */   
-/*      */   protected ILits voc;
-/*      */   
-/*      */   private IOrder order;
-/*      */   
-/*  142 */   private final ActivityComparator comparator = new ActivityComparator();
-/*      */   
-/*  144 */   SolverStats stats = new SolverStats();
-/*      */   
-/*      */   private LearningStrategy<D> learner;
-/*      */   
-/*      */   protected volatile boolean undertimeout;
-/*      */   
-/*  150 */   private long timeout = 2147483647L;
-/*      */   
-/*      */   private boolean timeBasedTimeout = true;
-/*      */   
-/*      */   protected D dsfactory;
-/*      */   
-/*      */   private SearchParams params;
-/*      */   
-/*  158 */   private final IVecInt __dimacs_out = (IVecInt)new VecInt();
-/*      */   
-/*  160 */   protected SearchListener slistener = (SearchListener)new VoidTracing();
-/*      */   
-/*      */   private RestartStrategy restarter;
-/*      */   
-/*  164 */   private final Map<String, Counter> constrTypes = new HashMap<>();
-/*      */   
-/*      */   private boolean isDBSimplificationAllowed = false;
-/*      */   
-/*  168 */   final IVecInt learnedLiterals = (IVecInt)new VecInt();
-/*      */   
-/*      */   boolean verbose = false;
-/*      */   
-/*      */   private boolean keepHot = false;
-/*      */   
-/*  174 */   private String prefix = "c ";
-/*  175 */   private int declaredMaxVarId = 0;
-/*      */   
-/*  177 */   private UnitClauseProvider unitClauseProvider = UnitClauseProvider.VOID;
-/*      */   
-/*  179 */   private UnitClauseConsumer unitClauseConsumer = UnitClauseConsumer.VOID;
-/*      */ 
-/*      */   
-/*  182 */   private final boolean classifyLiterals = (System.getProperty("color") != null);
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   private boolean[] mseen;
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   private final IVecInt mpreason;
-/*      */ 
-/*      */   
-/*      */   private final IVecInt moutLearnt;
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public IVecInt dimacs2internal(IVecInt in) {
-/*  198 */     this.__dimacs_out.clear();
-/*  199 */     this.__dimacs_out.ensure(in.size());
-/*      */     
-/*  201 */     for (int i = 0; i < in.size(); i++) {
-/*  202 */       int p = in.get(i);
-/*  203 */       if (p == 0) {
-/*  204 */         throw new IllegalArgumentException("0 is not a valid variable identifier");
-/*      */       }
-/*      */       
-/*  207 */       this.__dimacs_out.unsafePush(this.voc.getFromPool(p));
-/*      */     } 
-/*  209 */     return this.__dimacs_out;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public Solver(LearningStrategy<D> learner, D dsf, IOrder order, RestartStrategy restarter) {
-/*  227 */     this(learner, dsf, new SearchParams(), order, restarter);
-/*      */   }
-/*      */ 
-/*      */   
-/*      */   public Solver(LearningStrategy<D> learner, D dsf, SearchParams params, IOrder order, RestartStrategy restarter) {
-/*  232 */     this(learner, dsf, params, order, restarter, ILogAble.CONSOLE);
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public final void setDataStructureFactory(D dsf) {
-/*  252 */     this.dsfactory = dsf;
-/*  253 */     this.dsfactory.setUnitPropagationListener(this);
-/*  254 */     this.dsfactory.setLearner(this);
-/*  255 */     this.voc = dsf.getVocabulary();
-/*  256 */     this.order.setLits(this.voc);
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public boolean isVerbose() {
-/*  263 */     return this.verbose;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public void setLearningStrategy(LearningStrategy<D> strategy) {
-/*  312 */     if (this.learner != null) {
-/*  313 */       this.learner.setSolver(null);
-/*      */     }
-/*  315 */     this.learner = strategy;
-/*  316 */     strategy.setSolver(this);
-/*      */   }
-/*      */   
-/*      */   public void setTimeout(int t) {
-/*  320 */     this.timeout = t * 1000L;
-/*  321 */     this.timeBasedTimeout = true;
-/*  322 */     this.undertimeout = true;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public void setRestartStrategy(RestartStrategy restarter) {
-/*  359 */     this.restarter = restarter;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public void expireTimeout() {
-/*  372 */     this.undertimeout = false;
-/*  373 */     if (this.timeBasedTimeout) {
-/*  374 */       if (this.timer != null) {
-/*  375 */         this.timer.cancel();
-/*  376 */         this.timer = null;
-/*      */       }
-/*      */     
-/*  379 */     } else if (this.conflictCount != null) {
-/*  380 */       this.conflictCount = null;
-/*      */     } 
-/*      */   }
-/*      */ 
-/*      */   
-/*      */   protected int nAssigns() {
-/*  386 */     return this.trail.size();
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public void learn(Constr c) {
-/*  394 */     this.slistener.learn((IConstr)c);
-/*  395 */     this.learnts.push(c);
-/*  396 */     c.setLearnt();
-/*  397 */     c.register();
-/*  398 */     this.stats.incLearnedclauses();
-/*  399 */     switch (c.size()) {
-/*      */       case 2:
-/*  401 */         this.stats.incLearnedbinaryclauses();
-/*      */         break;
-/*      */       case 3:
-/*  404 */         this.stats.incLearnedternaryclauses();
-/*      */         break;
-/*      */     } 
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public final int decisionLevel() {
-/*  412 */     return this.trailLim.size();
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public IConstr addClause(IVecInt literals) throws ContradictionException {
-/*  434 */     IVecInt vlits = dimacs2internal(literals);
-/*  435 */     return addConstr(this.dsfactory.createClause(vlits));
-/*      */   }
-/*      */   
-/*      */   public boolean removeConstr(IConstr co) {
-/*  439 */     if (co == null) {
-/*  440 */       throw new IllegalArgumentException("Reference to the constraint to remove needed!");
-/*      */     }
-/*      */     
-/*  443 */     Constr c = (Constr)co;
-/*  444 */     c.remove(this);
-/*  445 */     this.constrs.removeFromLast(c);
-/*  446 */     clearLearntClauses();
-/*  447 */     String type = c.getClass().getName();
-/*  448 */     ((Counter)this.constrTypes.get(type)).dec();
-/*  449 */     return true;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public boolean removeSubsumedConstr(IConstr co) {
-/*  456 */     if (co == null) {
-/*  457 */       throw new IllegalArgumentException("Reference to the constraint to remove needed!");
-/*      */     }
-/*      */     
-/*  460 */     if (this.constrs.last() != co) {
-/*  461 */       throw new IllegalArgumentException("Can only remove latest added constraint!!!");
-/*      */     }
-/*      */     
-/*  464 */     Constr c = (Constr)co;
-/*  465 */     c.remove(this);
-/*  466 */     this.constrs.pop();
-/*  467 */     String type = c.getClass().getName();
-/*  468 */     ((Counter)this.constrTypes.get(type)).dec();
-/*  469 */     return true;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public IConstr addAtMost(IVecInt literals, int degree) throws ContradictionException {
-/*  482 */     int n = literals.size();
-/*  483 */     VecInt vecInt = new VecInt(n);
-/*  484 */     for (IteratorInt iterator = literals.iterator(); iterator.hasNext();) {
-/*  485 */       vecInt.push(-iterator.next());
-/*      */     }
-/*  487 */     return addAtLeast((IVecInt)vecInt, n - degree);
-/*      */   }
-/*      */ 
-/*      */   
-/*      */   public IConstr addAtLeast(IVecInt literals, int degree) throws ContradictionException {
-/*  492 */     IVecInt vlits = dimacs2internal(literals);
-/*  493 */     return addConstr(this.dsfactory
-/*  494 */         .createCardinalityConstraint(vlits, degree));
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public boolean simplifyDB() {
-/*  514 */     IVec[] arrayOfIVec = { this.constrs, this.learnts };
-/*  515 */     for (int type = 0; type < 2; type++) {
-/*  516 */       int j = 0;
-/*  517 */       for (int i = 0; i < arrayOfIVec[type].size(); i++) {
-/*  518 */         if (((Constr)arrayOfIVec[type].get(i)).simplify()) {
-/*      */           
-/*  520 */           ((Constr)arrayOfIVec[type].get(i)).remove(this);
-/*      */         } else {
-/*  522 */           arrayOfIVec[type].moveTo(j++, i);
-/*      */         } 
-/*      */       } 
-/*  525 */       arrayOfIVec[type].shrinkTo(j);
-/*      */     } 
-/*  527 */     return true;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public int[] model() {
-/*  536 */     if (this.model == null) {
-/*  537 */       throw new UnsupportedOperationException("Call the solve method first!!!");
-/*      */     }
-/*      */     
-/*  540 */     int[] nmodel = new int[this.model.length];
-/*  541 */     System.arraycopy(this.model, 0, nmodel, 0, this.model.length);
-/*  542 */     return nmodel;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public boolean enqueue(int p) {
-/*  551 */     return enqueue(p, null);
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public boolean enqueue(int p, Constr from) {
-/*  561 */     assert p > 1;
-/*  562 */     if (this.voc.isSatisfied(p))
-/*      */     {
-/*  564 */       return true;
-/*      */     }
-/*  566 */     if (this.voc.isFalsified(p))
-/*      */     {
-/*  568 */       return false;
-/*      */     }
-/*  570 */     this.slistener.enqueueing(LiteralsUtils.toDimacs(p), (IConstr)from);
-/*      */     
-/*  572 */     this.voc.satisfies(p);
-/*  573 */     this.voc.setLevel(p, decisionLevel());
-/*  574 */     this.voc.setTrailPosition(p, this.trail.size());
-/*  575 */     this.voc.setReason(p, from);
-/*  576 */     this.trail.push(p);
-/*  577 */     if (from != null && from.learnt()) {
-/*  578 */       this.learnedConstraintsDeletionStrategy.onPropagation(from, p);
-/*      */     }
-/*  580 */     return true;
-/*      */   }
-/*      */   public Solver(LearningStrategy<D> learner, D dsf, SearchParams params, IOrder order, RestartStrategy restarter, ILogAble logger) {
-/*  583 */     this.mseen = new boolean[0];
-/*      */     
-/*  585 */     this.mpreason = (IVecInt)new VecInt();
-/*      */     
-/*  587 */     this.moutLearnt = (IVecInt)new VecInt();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/*  768 */     this.SIMPLE_SIMPLIFICATION = new ISimplifier()
-/*      */       {
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */         
-/*      */         public void simplify(IVecInt conflictToReduce)
-/*      */         {
-/*  776 */           Solver.this.simpleSimplification(conflictToReduce);
-/*      */         }
-/*      */ 
-/*      */         
-/*      */         public String toString() {
-/*  781 */           return "Simple reason simplification";
-/*      */         }
-/*      */       };
-/*      */     
-/*  785 */     this.EXPENSIVE_SIMPLIFICATION = new ISimplifier()
-/*      */       {
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */         
-/*      */         public void simplify(IVecInt conflictToReduce)
-/*      */         {
-/*  794 */           Solver.this.expensiveSimplification(conflictToReduce);
-/*      */         }
-/*      */ 
-/*      */         
-/*      */         public String toString() {
-/*  799 */           return "Expensive reason simplification";
-/*      */         }
-/*      */       };
-/*      */     
-/*  803 */     this.EXPENSIVE_SIMPLIFICATION_WLONLY = new ISimplifier()
-/*      */       {
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */         
-/*      */         public void simplify(IVecInt conflictToReduce)
-/*      */         {
-/*  812 */           Solver.this.expensiveSimplificationWLOnly(conflictToReduce);
-/*      */         }
-/*      */ 
-/*      */         
-/*      */         public String toString() {
-/*  817 */           return "Expensive reason simplification specific for WL data structure";
-/*      */         }
-/*      */       };
-/*      */     
-/*  821 */     this.simplifier = NO_SIMPLIFICATION;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/*  906 */     this.analyzetoclear = (IVecInt)new VecInt();
-/*      */     
-/*  908 */     this.analyzestack = (IVecInt)new VecInt();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1088 */     this.watched = (IVec<Propagatable>)new Vec();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1221 */     this.analysisResult = new Pair();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1385 */     this.implied = (IVecInt)new VecInt();
-/* 1386 */     this.decisions = (IVecInt)new VecInt();
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1624 */     this.timebegin = 0.0D;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1708 */     this.memoryTimer = new MemoryBasedConflictTimer(this, 500);
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1714 */     this.activity_based_low_memory = new ActivityLCDS(this, this.memoryTimer);
-/*      */ 
-/*      */     
-/* 1717 */     this.lbdTimer = new LBDConflictTimer(this, 1000);
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1722 */     this.lbd_based = new Glucose2LCDS<>(this, this.lbdTimer);
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1728 */     this.age_based = new AgeLCDS(this, this.lbdTimer);
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1734 */     this.activity_based = new ActivityLCDS(this, this.lbdTimer);
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 1740 */     this.size_based = new SizeLCDS(this, this.lbdTimer);
-/*      */ 
-/*      */     
-/* 1743 */     this.learnedConstraintsDeletionStrategy = this.lbd_based;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */     
-/* 2507 */     this.dimacsLevel = new Comparator<Integer>() {
-/*      */         public int compare(Integer i1, Integer i2) {
-/* 2509 */           return Solver.this.voc.getLevel(Math.abs(i2.intValue())) - Solver.this.voc.getLevel(Math.abs(i1.intValue()));
-/*      */         }
-/*      */       };
-/*      */     this.order = order;
-/*      */     this.params = params;
-/*      */     this.restarter = restarter;
-/*      */     this.out = logger;
-/*      */     setDataStructureFactory(dsf);
-/*      */     setLearningStrategy(learner);
-/*      */   }
-/*      */   
-/*      */   public void analyze(Constr confl, Pair results) throws TimeoutException {
-/*      */     assert confl != null;
-/*      */     boolean[] seen = this.mseen;
-/*      */     IVecInt outLearnt = this.moutLearnt;
-/*      */     IVecInt preason = this.mpreason;
-/*      */     outLearnt.clear();
-/*      */     assert outLearnt.size() == 0;
-/*      */     for (int i = 0; i < seen.length; i++)
-/*      */       seen[i] = false; 
-/*      */     int counter = 0;
-/*      */     int p = -1;
-/*      */     outLearnt.push(-1);
-/*      */     int outBtlevel = 0;
-/*      */     IConstr prevConfl = null;
-/*      */     do {
-/*      */       preason.clear();
-/*      */       assert confl != null;
-/*      */       if (prevConfl != confl || confl.canBePropagatedMultipleTimes()) {
-/*      */         confl.calcReason(p, preason);
-/*      */         this.learnedConstraintsDeletionStrategy.onConflictAnalysis(confl);
-/*      */         for (int j = 0; j < preason.size(); j++) {
-/*      */           int q = preason.get(j);
-/*      */           this.order.updateVar(q);
-/*      */           if (!seen[q >> 1]) {
-/*      */             seen[q >> 1] = true;
-/*      */             if (this.voc.getLevel(q) == decisionLevel()) {
-/*      */               counter++;
-/*      */               this.order.updateVarAtDecisionLevel(q);
-/*      */             } else if (this.voc.getLevel(q) > 0) {
-/*      */               outLearnt.push(q ^ 0x1);
-/*      */               outBtlevel = Math.max(outBtlevel, this.voc.getLevel(q));
-/*      */             } 
-/*      */           } 
-/*      */         } 
-/*      */       } 
-/*      */       Constr constr = confl;
-/*      */       do {
-/*      */         p = this.trail.last();
-/*      */         confl = this.voc.getReason(p);
-/*      */         undoOne();
-/*      */       } while (!seen[p >> 1]);
-/*      */     } while (--counter > 0);
-/*      */     outLearnt.set(0, p ^ 0x1);
-/*      */     this.simplifier.simplify(outLearnt);
-/*      */     Constr c = this.dsfactory.createUnregisteredClause(outLearnt);
-/*      */     this.learnedConstraintsDeletionStrategy.onClauseLearning(c);
-/*      */     results.setReason(c);
-/*      */     assert outBtlevel > -1;
-/*      */     results.setBacktrackLevel(outBtlevel);
-/*      */   }
-/*      */   
-/*      */   public IVecInt analyzeFinalConflictInTermsOfAssumptions(Constr confl, IVecInt assumps, int conflictingLiteral) {
-/*      */     if (assumps.size() == 0)
-/*      */       return null; 
-/*      */     while (!this.trailLim.isEmpty() && this.trailLim.last() == this.trail.size())
-/*      */       this.trailLim.pop(); 
-/*      */     boolean[] seen = this.mseen;
-/*      */     IVecInt outLearnt = this.moutLearnt;
-/*      */     IVecInt preason = this.mpreason;
-/*      */     outLearnt.clear();
-/*      */     if (this.trailLim.size() == 0)
-/*      */       return outLearnt; 
-/*      */     assert outLearnt.size() == 0;
-/*      */     for (int i = 0; i < seen.length; i++)
-/*      */       seen[i] = false; 
-/*      */     if (confl == null)
-/*      */       seen[conflictingLiteral >> 1] = true; 
-/*      */     int p = -1;
-/*      */     while (confl == null && this.trail.size() > 0 && this.trailLim.size() > 0) {
-/*      */       p = this.trail.last();
-/*      */       confl = this.voc.getReason(p);
-/*      */       undoOne();
-/*      */       if (confl == null && p == (conflictingLiteral ^ 0x1))
-/*      */         outLearnt.push(LiteralsUtils.toDimacs(p)); 
-/*      */       if (this.trail.size() <= this.trailLim.last())
-/*      */         this.trailLim.pop(); 
-/*      */     } 
-/*      */     if (confl == null)
-/*      */       return outLearnt; 
-/*      */     while (true) {
-/*      */       preason.clear();
-/*      */       confl.calcReason(p, preason);
-/*      */       for (int j = 0; j < preason.size(); j++) {
-/*      */         int q = preason.get(j);
-/*      */         if (!seen[q >> 1]) {
-/*      */           seen[q >> 1] = true;
-/*      */           if (this.voc.getReason(q) == null && this.voc.getLevel(q) > 0) {
-/*      */             assert assumps.contains(LiteralsUtils.toDimacs(q));
-/*      */             outLearnt.push(LiteralsUtils.toDimacs(q));
-/*      */           } 
-/*      */         } 
-/*      */       } 
-/*      */       do {
-/*      */         p = this.trail.last();
-/*      */         confl = this.voc.getReason(p);
-/*      */         undoOne();
-/*      */         if (decisionLevel() <= 0 || this.trail.size() > this.trailLim.last())
-/*      */           continue; 
-/*      */         this.trailLim.pop();
-/*      */       } while (this.trail.size() > 0 && decisionLevel() > 0 && (!seen[p >> 1] || confl == null));
-/*      */       if (decisionLevel() <= 0)
-/*      */         return outLearnt; 
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   public static final ISimplifier NO_SIMPLIFICATION = new ISimplifier() {
-/*      */       public void simplify(IVecInt outLearnt) {}
-/*      */       
-/*      */       public String toString() {
-/*      */         return "No reason simplification";
-/*      */       }
-/*      */     };
-/*      */   
-/*      */   public final ISimplifier SIMPLE_SIMPLIFICATION;
-/*      */   public final ISimplifier EXPENSIVE_SIMPLIFICATION;
-/*      */   public final ISimplifier EXPENSIVE_SIMPLIFICATION_WLONLY;
-/*      */   private ISimplifier simplifier;
-/*      */   private final IVecInt analyzetoclear;
-/*      */   private final IVecInt analyzestack;
-/*      */   final IVec<Propagatable> watched;
-/*      */   private final Pair analysisResult;
-/*      */   private boolean[] userbooleanmodel;
-/*      */   private IVecInt unsatExplanationInTermsOfAssumptions;
-/*      */   protected final IVecInt implied;
-/*      */   protected final IVecInt decisions;
-/*      */   private AssignmentOrigin[] assignmentOrigins;
-/*      */   int[] fullmodel;
-/*      */   protected int[] prime;
-/*      */   private double timebegin;
-/*      */   private boolean needToReduceDB;
-/*      */   private ConflictTimerContainer conflictCount;
-/*      */   private transient Timer timer;
-/*      */   private final ConflictTimer memoryTimer;
-/*      */   public final LearnedConstraintsDeletionStrategy activity_based_low_memory;
-/*      */   private final ConflictTimer lbdTimer;
-/*      */   public final LearnedConstraintsDeletionStrategy lbd_based;
-/*      */   public final LearnedConstraintsDeletionStrategy age_based;
-/*      */   public final LearnedConstraintsDeletionStrategy activity_based;
-/*      */   public final LearnedConstraintsDeletionStrategy size_based;
-/*      */   private LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy;
-/*      */   private boolean lastConflictMeansUnsat;
-/*      */   protected Constr sharedConflict;
-/*      */   private final Comparator<Integer> dimacsLevel;
-/*      */   
-/*      */   public void setSimplifier(ISimplifier simp) {
-/*      */     this.simplifier = simp;
-/*      */   }
-/*      */   
-/*      */   private void simpleSimplification(IVecInt conflictToReduce) {
-/*      */     boolean[] seen = this.mseen;
-/*      */     int i, j;
-/*      */     for (i = j = 1; i < conflictToReduce.size(); i++) {
-/*      */       Constr constr = this.voc.getReason(conflictToReduce.get(i));
-/*      */       if (constr == null || constr.canBePropagatedMultipleTimes()) {
-/*      */         conflictToReduce.moveTo(j++, i);
-/*      */       } else {
-/*      */         for (int k = 0; k < constr.size(); k++) {
-/*      */           int p = constr.get(k);
-/*      */           if (!seen[p >> 1] && this.voc.isFalsified(p) && this.voc.getLevel(p) != 0) {
-/*      */             conflictToReduce.moveTo(j++, i);
-/*      */             break;
-/*      */           } 
-/*      */         } 
-/*      */       } 
-/*      */     } 
-/*      */     conflictToReduce.shrink(i - j);
-/*      */     this.stats.incReducedliterals(i - j);
-/*      */   }
-/*      */   
-/*      */   private void expensiveSimplification(IVecInt conflictToReduce) {
-/*      */     this.analyzetoclear.clear();
-/*      */     conflictToReduce.copyTo(this.analyzetoclear);
-/*      */     int i, j;
-/*      */     for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
-/*      */       if (this.voc.getReason(conflictToReduce.get(i)) == null || !analyzeRemovable(conflictToReduce.get(i)))
-/*      */         conflictToReduce.moveTo(j++, i); 
-/*      */     } 
-/*      */     conflictToReduce.shrink(i - j);
-/*      */     this.stats.incReducedliterals(i - j);
-/*      */   }
-/*      */   
-/*      */   private boolean analyzeRemovable(int p) {
-/*      */     assert this.voc.getReason(p) != null;
-/*      */     ILits lvoc = this.voc;
-/*      */     IVecInt lanalyzestack = this.analyzestack;
-/*      */     IVecInt lanalyzetoclear = this.analyzetoclear;
-/*      */     lanalyzestack.clear();
-/*      */     lanalyzestack.push(p);
-/*      */     boolean[] seen = this.mseen;
-/*      */     int top = lanalyzetoclear.size();
-/*      */     while (lanalyzestack.size() > 0) {
-/*      */       int q = lanalyzestack.last();
-/*      */       assert lvoc.getReason(q) != null;
-/*      */       Constr c = lvoc.getReason(q);
-/*      */       lanalyzestack.pop();
-/*      */       if (c.canBePropagatedMultipleTimes()) {
-/*      */         for (int j = top; j < lanalyzetoclear.size(); j++)
-/*      */           seen[lanalyzetoclear.get(j) >> 1] = false; 
-/*      */         lanalyzetoclear.shrink(lanalyzetoclear.size() - top);
-/*      */         return false;
-/*      */       } 
-/*      */       for (int i = 0; i < c.size(); i++) {
-/*      */         int l = c.get(i);
-/*      */         if (!seen[LiteralsUtils.var(l)] && lvoc.isFalsified(l) && lvoc.getLevel(l) != 0) {
-/*      */           if (lvoc.getReason(l) == null) {
-/*      */             for (int j = top; j < lanalyzetoclear.size(); j++)
-/*      */               seen[lanalyzetoclear.get(j) >> 1] = false; 
-/*      */             lanalyzetoclear.shrink(lanalyzetoclear.size() - top);
-/*      */             return false;
-/*      */           } 
-/*      */           seen[l >> 1] = true;
-/*      */           lanalyzestack.push(l);
-/*      */           lanalyzetoclear.push(l);
-/*      */         } 
-/*      */       } 
-/*      */     } 
-/*      */     return true;
-/*      */   }
-/*      */   
-/*      */   private void expensiveSimplificationWLOnly(IVecInt conflictToReduce) {
-/*      */     this.analyzetoclear.clear();
-/*      */     conflictToReduce.copyTo(this.analyzetoclear);
-/*      */     int i, j;
-/*      */     for (i = 1, j = 1; i < conflictToReduce.size(); i++) {
-/*      */       if (this.voc.getReason(conflictToReduce.get(i)) == null || !analyzeRemovableWLOnly(conflictToReduce.get(i)))
-/*      */         conflictToReduce.moveTo(j++, i); 
-/*      */     } 
-/*      */     conflictToReduce.shrink(i - j);
-/*      */     this.stats.incReducedliterals(i - j);
-/*      */   }
-/*      */   
-/*      */   private boolean analyzeRemovableWLOnly(int p) {
-/*      */     assert this.voc.getReason(p) != null;
-/*      */     this.analyzestack.clear();
-/*      */     this.analyzestack.push(p);
-/*      */     boolean[] seen = this.mseen;
-/*      */     int top = this.analyzetoclear.size();
-/*      */     while (this.analyzestack.size() > 0) {
-/*      */       int q = this.analyzestack.last();
-/*      */       assert this.voc.getReason(q) != null;
-/*      */       Constr c = this.voc.getReason(q);
-/*      */       this.analyzestack.pop();
-/*      */       for (int i = 1; i < c.size(); i++) {
-/*      */         int l = c.get(i);
-/*      */         if (!seen[LiteralsUtils.var(l)] && this.voc.getLevel(l) != 0) {
-/*      */           if (this.voc.getReason(l) == null) {
-/*      */             for (int j = top; j < this.analyzetoclear.size(); j++)
-/*      */               seen[this.analyzetoclear.get(j) >> 1] = false; 
-/*      */             this.analyzetoclear.shrink(this.analyzetoclear.size() - top);
-/*      */             return false;
-/*      */           } 
-/*      */           seen[l >> 1] = true;
-/*      */           this.analyzestack.push(l);
-/*      */           this.analyzetoclear.push(l);
-/*      */         } 
-/*      */       } 
-/*      */     } 
-/*      */     return true;
-/*      */   }
-/*      */   
-/*      */   protected void undoOne() {
-/*      */     int p = this.trail.last();
-/*      */     assert p > 1;
-/*      */     assert this.voc.getLevel(p) >= 0;
-/*      */     int x = p >> 1;
-/*      */     this.voc.unassign(p);
-/*      */     this.voc.setReason(p, null);
-/*      */     this.voc.setLevel(p, -1);
-/*      */     this.voc.setTrailPosition(p, -1);
-/*      */     this.order.undo(x);
-/*      */     this.trail.pop();
-/*      */     IVec<Undoable> undos = this.voc.undos(p);
-/*      */     assert undos != null;
-/*      */     for (int size = undos.size(); size > 0; size--) {
-/*      */       ((Undoable)undos.last()).undo(p);
-/*      */       undos.pop();
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   public void claBumpActivity(Constr confl) {
-/*      */     confl.incActivity(this.claInc);
-/*      */     if (confl.getActivity() > 1.0E20D)
-/*      */       claRescalActivity(); 
-/*      */   }
-/*      */   
-/*      */   public void varBumpActivity(int p) {
-/*      */     this.order.updateVar(p);
-/*      */   }
-/*      */   
-/*      */   private void claRescalActivity() {
-/*      */     for (int i = 0; i < this.learnts.size(); i++)
-/*      */       ((Constr)this.learnts.get(i)).rescaleBy(1.0E-20D); 
-/*      */     this.claInc *= 1.0E-20D;
-/*      */   }
-/*      */   
-/*      */   public final Constr propagate() {
-/*      */     IVecInt ltrail = this.trail;
-/*      */     SolverStats lstats = this.stats;
-/*      */     IOrder lorder = this.order;
-/*      */     SearchListener lslistener = this.slistener;
-/*      */     while (this.qhead < ltrail.size()) {
-/*      */       lstats.incPropagations();
-/*      */       int p = ltrail.get(this.qhead++);
-/*      */       lslistener.propagating(LiteralsUtils.toDimacs(p));
-/*      */       lorder.assignLiteral(p);
-/*      */       Constr confl = reduceClausesContainingTheNegationOf(p);
-/*      */       if (confl != null)
-/*      */         return confl; 
-/*      */     } 
-/*      */     return null;
-/*      */   }
-/*      */   
-/*      */   private Constr reduceClausesContainingTheNegationOf(int p) {
-/*      */     assert p > 1;
-/*      */     IVec<Propagatable> lwatched = this.watched;
-/*      */     lwatched.clear();
-/*      */     this.voc.watches(p).moveTo(lwatched);
-/*      */     int size = lwatched.size();
-/*      */     for (int i = 0; i < size; i++) {
-/*      */       this.stats.incInspects();
-/*      */       if (!((Propagatable)lwatched.get(i)).propagate(this, p)) {
-/*      */         int sizew = lwatched.size();
-/*      */         for (int j = i + 1; j < sizew; j++)
-/*      */           this.voc.watch(p, (Propagatable)lwatched.get(j)); 
-/*      */         this.qhead = this.trail.size();
-/*      */         return ((Propagatable)lwatched.get(i)).toConstraint();
-/*      */       } 
-/*      */     } 
-/*      */     return null;
-/*      */   }
-/*      */   
-/*      */   void record(Constr constr) {
-/*      */     constr.assertConstraint(this);
-/*      */     int p = LiteralsUtils.toDimacs(constr.get(0));
-/*      */     this.slistener.adding(p);
-/*      */     if (constr.size() == 1) {
-/*      */       this.stats.incLearnedliterals();
-/*      */       this.slistener.learnUnit(p);
-/*      */       this.unitClauseConsumer.learnUnit(p);
-/*      */     } else {
-/*      */       this.learner.learns(constr);
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   public boolean assume(int p) {
-/*      */     assert !this.trailLim.contains(this.trail.size());
-/*      */     this.trailLim.push(this.trail.size());
-/*      */     return enqueue(p);
-/*      */   }
-/*      */   
-/*      */   void cancel() {
-/*      */     int decisionvar = this.trail.unsafeGet(this.trailLim.last());
-/*      */     this.slistener.backtracking(LiteralsUtils.toDimacs(decisionvar));
-/*      */     for (int c = this.trail.size() - this.trailLim.last(); c > 0; c--)
-/*      */       undoOne(); 
-/*      */     this.trailLim.pop();
-/*      */     this.qhead = this.trail.size();
-/*      */   }
-/*      */   
-/*      */   private void cancelLearntLiterals(int learnedLiteralsLimit) {
-/*      */     this.learnedLiterals.clear();
-/*      */     while (this.trail.size() > learnedLiteralsLimit) {
-/*      */       this.learnedLiterals.push(this.trail.last());
-/*      */       undoOne();
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   protected void cancelUntil(int level) {
-/*      */     while (decisionLevel() > level)
-/*      */       cancel(); 
-/*      */   }
-/*      */   
-/*      */   protected void cancelUntilTrailLevel(int level) {
-/*      */     while (!this.trail.isEmpty() && this.trail.size() > level) {
-/*      */       undoOne();
-/*      */       if (!this.trailLim.isEmpty() && this.trailLim.last() == this.trail.size()) {
-/*      */         this.trailLim.pop();
-/*      */         this.decisions.pop();
-/*      */       } 
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   private Lbool search(IVecInt assumps) {
-/*      */     assert this.rootLevel == decisionLevel();
-/*      */     this.stats.incStarts();
-/*      */     this.order.setVarDecay(1.0D / this.params.getVarDecay());
-/*      */     this.claDecay = 1.0D / this.params.getClaDecay();
-/*      */     while (true) {
-/*      */       this.slistener.beginLoop();
-/*      */       Constr confl = propagate();
-/*      */       assert this.trail.size() == this.qhead;
-/*      */       if (confl == null) {
-/*      */         if (decisionLevel() == 0 && this.isDBSimplificationAllowed) {
-/*      */           this.stats.incRootSimplifications();
-/*      */           boolean ret = simplifyDB();
-/*      */           assert ret;
-/*      */         } 
-/*      */         assert nAssigns() <= this.voc.realnVars();
-/*      */         if (nAssigns() == this.voc.realnVars()) {
-/*      */           modelFound();
-/*      */           this.slistener.solutionFound((this.fullmodel != null) ? this.fullmodel : this.model, (RandomAccessModel)this);
-/*      */           if (this.sharedConflict == null) {
-/*      */             cancelUntil(this.rootLevel);
-/*      */             return Lbool.TRUE;
-/*      */           } 
-/*      */           if (decisionLevel() == this.rootLevel) {
-/*      */             confl = this.sharedConflict;
-/*      */             this.sharedConflict = null;
-/*      */           } else {
-/*      */             int level = this.sharedConflict.getAssertionLevel(this.trail, decisionLevel());
-/*      */             cancelUntilTrailLevel(level);
-/*      */             this.qhead = this.trail.size();
-/*      */             this.sharedConflict.assertConstraint(this);
-/*      */             this.sharedConflict = null;
-/*      */             if (!this.undertimeout)
-/*      */               return Lbool.UNDEFINED; 
-/*      */           } 
-/*      */         } else {
-/*      */           if (this.restarter.shouldRestart()) {
-/*      */             cancelUntil(this.rootLevel);
-/*      */             return Lbool.UNDEFINED;
-/*      */           } 
-/*      */           if (this.needToReduceDB) {
-/*      */             reduceDB();
-/*      */             this.needToReduceDB = false;
-/*      */           } 
-/*      */           if (this.sharedConflict == null) {
-/*      */             this.stats.incDecisions();
-/*      */             int p = this.order.select();
-/*      */             if (p == -1) {
-/*      */               boolean allsat = true;
-/*      */               for (int i = 0; i < this.constrs.size(); i++) {
-/*      */                 if (!((Constr)this.constrs.get(i)).isSatisfied()) {
-/*      */                   allsat = false;
-/*      */                   break;
-/*      */                 } 
-/*      */               } 
-/*      */               if (allsat) {
-/*      */                 modelFound();
-/*      */                 this.slistener.solutionFound((this.fullmodel != null) ? this.fullmodel : this.model, (RandomAccessModel)this);
-/*      */                 return Lbool.TRUE;
-/*      */               } 
-/*      */               confl = preventTheSameDecisionsToBeMade();
-/*      */               this.lastConflictMeansUnsat = false;
-/*      */             } else {
-/*      */               assert p > 1;
-/*      */               this.slistener.assuming(LiteralsUtils.toDimacs(p));
-/*      */               boolean ret = assume(p);
-/*      */               assert ret;
-/*      */             } 
-/*      */           } else {
-/*      */             confl = this.sharedConflict;
-/*      */             this.sharedConflict = null;
-/*      */           } 
-/*      */         } 
-/*      */       } 
-/*      */       if (confl != null) {
-/*      */         this.stats.incConflicts();
-/*      */         this.slistener.conflictFound((IConstr)confl, decisionLevel(), this.trail.size());
-/*      */         this.conflictCount.newConflict();
-/*      */         if (decisionLevel() == this.rootLevel) {
-/*      */           if (this.lastConflictMeansUnsat) {
-/*      */             this.unsatExplanationInTermsOfAssumptions = analyzeFinalConflictInTermsOfAssumptions(confl, assumps, -1);
-/*      */             return Lbool.FALSE;
-/*      */           } 
-/*      */           return Lbool.UNDEFINED;
-/*      */         } 
-/*      */         int conflictTrailLevel = this.trail.size();
-/*      */         try {
-/*      */           analyze(confl, this.analysisResult);
-/*      */         } catch (TimeoutException e) {
-/*      */           return Lbool.UNDEFINED;
-/*      */         } 
-/*      */         assert this.analysisResult.getBacktrackLevel() < decisionLevel();
-/*      */         int backjumpLevel = Math.max(this.analysisResult.getBacktrackLevel(), this.rootLevel);
-/*      */         this.slistener.backjump(backjumpLevel);
-/*      */         cancelUntil(backjumpLevel);
-/*      */         if (backjumpLevel == this.rootLevel)
-/*      */           this.restarter.onBackjumpToRootLevel(); 
-/*      */         assert decisionLevel() >= this.rootLevel && decisionLevel() >= this.analysisResult.getBacktrackLevel();
-/*      */         if (this.analysisResult.getReason() == null)
-/*      */           return Lbool.FALSE; 
-/*      */         record(this.analysisResult.getReason());
-/*      */         this.restarter.newLearnedClause(this.analysisResult.getReason(), conflictTrailLevel);
-/*      */         this.analysisResult.setReason(null);
-/*      */         decayActivities();
-/*      */       } 
-/*      */       if (!this.undertimeout)
-/*      */         return Lbool.UNDEFINED; 
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   private Constr preventTheSameDecisionsToBeMade() {
-/*      */     VecInt vecInt = new VecInt(nVars());
-/*      */     for (int i = this.trail.size() - 1; i >= 0; i--) {
-/*      */       int p = this.trail.get(i);
-/*      */       if (this.voc.getReason(p) == null)
-/*      */         vecInt.push(p ^ 0x1); 
-/*      */     } 
-/*      */     return this.dsfactory.createUnregisteredClause((IVecInt)vecInt);
-/*      */   }
-/*      */   
-/*      */   protected void analyzeAtRootLevel(Constr conflict) {}
-/*      */   
-/*      */   void modelFound() {
-/*      */     this.decisions.clear();
-/*      */     VecInt vecInt = new VecInt(nVars());
-/*      */     this.assignmentOrigins = new AssignmentOrigin[realNumberOfVariables()];
-/*      */     this.userbooleanmodel = new boolean[realNumberOfVariables()];
-/*      */     this.fullmodel = null;
-/*      */     AssignmentOrigin origin = AssignmentOrigin.UNASSIGNED;
-/*      */     if (this.classifyLiterals) {
-/*      */       StringBuffer stb = new StringBuffer(getLogPrefix());
-/*      */       for (int j = 0; j < this.trailLim.size(); j++) {
-/*      */         int q = this.trail.get(this.trailLim.get(j));
-/*      */         stb.append(LiteralsUtils.toDimacs(q));
-/*      */         this.voc.unassign(q);
-/*      */         this.voc.satisfies(q ^ 0x1);
-/*      */         Constr reason;
-/*      */         if ((reason = reduceClausesContainingTheNegationOf(q ^ 0x1)) != null) {
-/*      */           if (reason.learnt()) {
-/*      */             origin = AssignmentOrigin.DECIDED_PROPAGATED_LEARNED;
-/*      */           } else {
-/*      */             origin = AssignmentOrigin.DECIDED_PROPAGATED;
-/*      */           } 
-/*      */           TreeSet<Integer> levels = new TreeSet<>();
-/*      */           for (int k = 0; k < reason.size(); k++) {
-/*      */             int r = reason.get(k);
-/*      */             if (r != q)
-/*      */               levels.add(Integer.valueOf(this.voc.getLevel(r))); 
-/*      */           } 
-/*      */           stb.append(":");
-/*      */           String str = levels.toString().replaceAll(" ", "");
-/*      */           stb.append(str.substring(1, str.length() - 1));
-/*      */           if (this.voc.getLevel(q) == ((Integer)levels.last()).intValue())
-/*      */             origin = AssignmentOrigin.DECIDED_CYCLE; 
-/*      */         } else {
-/*      */           origin = AssignmentOrigin.DECIDED;
-/*      */         } 
-/*      */         this.voc.unassign(q);
-/*      */         this.voc.satisfies(q);
-/*      */         stb.append(" ");
-/*      */         this.assignmentOrigins[(q >> 1) - 1] = origin;
-/*      */       } 
-/*      */       System.out.println(stb);
-/*      */     } 
-/*      */     int i;
-/*      */     for (i = 1; i <= nVars(); i++) {
-/*      */       if (this.voc.belongsToPool(i)) {
-/*      */         int p = this.voc.getFromPool(i);
-/*      */         if (!this.voc.isUnassigned(p)) {
-/*      */           vecInt.push(this.voc.isSatisfied(p) ? i : -i);
-/*      */           this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-/*      */           Constr reason = this.voc.getReason(p);
-/*      */           if ((reason == null && this.voc.getLevel(p) > 0) || (reason != null && reason.learnt())) {
-/*      */             this.decisions.push(vecInt.last());
-/*      */             if (reason != null)
-/*      */               this.assignmentOrigins[i - 1] = AssignmentOrigin.PROPAGATED_LEARNED; 
-/*      */           } else {
-/*      */             this.implied.push(vecInt.last());
-/*      */             this.assignmentOrigins[i - 1] = AssignmentOrigin.PROPAGATED_ORIGINAL;
-/*      */           } 
-/*      */         } 
-/*      */       } 
-/*      */     } 
-/*      */     this.model = new int[vecInt.size()];
-/*      */     vecInt.copyTo(this.model);
-/*      */     if (realNumberOfVariables() > nVars()) {
-/*      */       for (i = nVars() + 1; i <= realNumberOfVariables(); i++) {
-/*      */         if (this.voc.belongsToPool(i)) {
-/*      */           int p = this.voc.getFromPool(i);
-/*      */           if (!this.voc.isUnassigned(p)) {
-/*      */             vecInt.push(this.voc.isSatisfied(p) ? i : -i);
-/*      */             this.userbooleanmodel[i - 1] = this.voc.isSatisfied(p);
-/*      */             if (this.voc.getReason(p) == null) {
-/*      */               this.decisions.push(vecInt.last());
-/*      */             } else {
-/*      */               this.implied.push(vecInt.last());
-/*      */               if (this.voc.getReason(p).learnt()) {
-/*      */                 this.assignmentOrigins[i - 1] = AssignmentOrigin.PROPAGATED_LEARNED;
-/*      */               } else {
-/*      */                 this.assignmentOrigins[i - 1] = AssignmentOrigin.PROPAGATED_ORIGINAL;
-/*      */               } 
-/*      */             } 
-/*      */           } 
-/*      */         } else {
-/*      */           this.assignmentOrigins[i - 1] = AssignmentOrigin.UNASSIGNED;
-/*      */         } 
-/*      */       } 
-/*      */       this.fullmodel = new int[vecInt.size()];
-/*      */       vecInt.moveTo(this.fullmodel);
-/*      */     } else {
-/*      */       this.fullmodel = this.model;
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   Constr forget(int var) {
-/*      */     Constr confl;
-/*      */     boolean satisfied = this.voc.isSatisfied(LiteralsUtils.toInternal(var));
-/*      */     this.voc.forgets(var);
-/*      */     if (satisfied) {
-/*      */       confl = reduceClausesContainingTheNegationOf(LiteralsUtils.toInternal(-var));
-/*      */     } else {
-/*      */       confl = reduceClausesContainingTheNegationOf(LiteralsUtils.toInternal(var));
-/*      */     } 
-/*      */     return confl;
-/*      */   }
-/*      */   
-/*      */   public int[] primeImplicant() {
-/*      */     PrimeImplicantStrategy strategy;
-/*      */     String primeApproach = System.getProperty("prime");
-/*      */     if ("OLD".equals(primeApproach)) {
-/*      */       strategy = new QuadraticPrimeImplicantStrategy();
-/*      */     } else if ("ALGO2".equals(primeApproach)) {
-/*      */       strategy = new CounterBasedPrimeImplicantStrategy();
-/*      */     } else {
-/*      */       strategy = new WatcherBasedPrimeImplicantStrategy();
-/*      */     } 
-/*      */     int[] implicant = strategy.compute(this);
-/*      */     this.prime = strategy.getPrimeImplicantAsArrayWithHoles();
-/*      */     return implicant;
-/*      */   }
-/*      */   
-/*      */   public boolean primeImplicant(int p) {
-/*      */     if (p == 0 || Math.abs(p) > realNumberOfVariables())
-/*      */       throw new IllegalArgumentException("Use a valid Dimacs var id as argument!"); 
-/*      */     if (this.prime == null)
-/*      */       throw new UnsupportedOperationException("Call the primeImplicant method first!!!"); 
-/*      */     return (this.prime[Math.abs(p)] == p);
-/*      */   }
-/*      */   
-/*      */   public boolean model(int var) {
-/*      */     if (var <= 0 || var > realNumberOfVariables())
-/*      */       throw new IllegalArgumentException("Use a valid Dimacs var id as argument!"); 
-/*      */     if (this.userbooleanmodel == null)
-/*      */       throw new UnsupportedOperationException("Call the solve method first!!!"); 
-/*      */     return this.userbooleanmodel[var - 1];
-/*      */   }
-/*      */   
-/*      */   public void clearLearntClauses() {
-/*      */     Iterator<Constr> iterator = this.learnts.iterator();
-/*      */     while (iterator.hasNext())
-/*      */       ((Constr)iterator.next()).remove(this); 
-/*      */     this.learnts.clear();
-/*      */     this.learnedLiterals.clear();
-/*      */   }
-/*      */   
-/*      */   protected final void reduceDB() {
-/*      */     this.stats.incReduceddb();
-/*      */     this.slistener.cleaning();
-/*      */     this.learnedConstraintsDeletionStrategy.reduce(this.learnts);
-/*      */   }
-/*      */   
-/*      */   protected ActivityComparator getActivityComparator() {
-/*      */     return this.comparator;
-/*      */   }
-/*      */   
-/*      */   protected void decayActivities() {
-/*      */     this.order.varDecayActivity();
-/*      */     claDecayActivity();
-/*      */   }
-/*      */   
-/*      */   private void claDecayActivity() {
-/*      */     this.claInc *= this.claDecay;
-/*      */   }
-/*      */   
-/*      */   public boolean isSatisfiable() throws TimeoutException {
-/*      */     return isSatisfiable(VecInt.EMPTY);
-/*      */   }
-/*      */   
-/*      */   public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
-/*      */     return isSatisfiable(assumps, false);
-/*      */   }
-/*      */   
-/*      */   public void setLearnedConstraintsDeletionStrategy(LearnedConstraintsDeletionStrategy lcds) {
-/*      */     if (this.conflictCount != null) {
-/*      */       this.conflictCount.add(lcds.getTimer());
-/*      */       assert this.learnedConstraintsDeletionStrategy != null;
-/*      */       this.conflictCount.remove(this.learnedConstraintsDeletionStrategy.getTimer());
-/*      */     } 
-/*      */     this.learnedConstraintsDeletionStrategy = lcds;
-/*      */   }
-/*      */   
-/*      */   public boolean isSatisfiable(IVecInt assumps, boolean global) throws TimeoutException {
-/*      */     Lbool status = Lbool.UNDEFINED;
-/*      */     boolean alreadylaunched = (this.conflictCount != null);
-/*      */     int howmany = this.voc.nVars();
-/*      */     if (this.mseen.length <= howmany)
-/*      */       this.mseen = new boolean[howmany + 1]; 
-/*      */     this.trail.ensure(howmany);
-/*      */     this.trailLim.ensure(howmany);
-/*      */     this.learnedLiterals.ensure(howmany);
-/*      */     this.decisions.clear();
-/*      */     this.implied.clear();
-/*      */     this.slistener.init(this);
-/*      */     this.slistener.start();
-/*      */     this.model = null;
-/*      */     this.fullmodel = null;
-/*      */     this.userbooleanmodel = null;
-/*      */     this.prime = null;
-/*      */     this.unsatExplanationInTermsOfAssumptions = null;
-/*      */     VecInt vecInt = new VecInt(assumps.size());
-/*      */     for (IteratorInt iterator = assumps.iterator(); iterator.hasNext(); ) {
-/*      */       int assump = iterator.next();
-/*      */       vecInt.push(this.voc.getFromPool(assump));
-/*      */     } 
-/*      */     if (!alreadylaunched || !this.keepHot)
-/*      */       this.order.init(); 
-/*      */     this.learnedConstraintsDeletionStrategy.init();
-/*      */     int learnedLiteralsLimit = this.trail.size();
-/*      */     this.qhead = 0;
-/*      */     for (int i = learnedLiteralsLimit - 1; i >= 0; i--) {
-/*      */       int p = this.trail.get(i);
-/*      */       IVec<Undoable> undos = this.voc.undos(p);
-/*      */       assert undos != null;
-/*      */       for (int size = undos.size(); size > 0; size--) {
-/*      */         ((Undoable)undos.last()).undo(p);
-/*      */         undos.pop();
-/*      */       } 
-/*      */     } 
-/*      */     IteratorInt iteratorInt1 = this.learnedLiterals.iterator();
-/*      */     while (iteratorInt1.hasNext())
-/*      */       enqueue(iteratorInt1.next()); 
-/*      */     Constr confl = propagate();
-/*      */     if (confl != null) {
-/*      */       analyzeAtRootLevel(confl);
-/*      */       this.slistener.conflictFound((IConstr)confl, 0, 0);
-/*      */       this.slistener.end(Lbool.FALSE);
-/*      */       cancelUntil(0);
-/*      */       cancelLearntLiterals(learnedLiteralsLimit);
-/*      */       return false;
-/*      */     } 
-/*      */     IteratorInt iteratorInt2 = vecInt.iterator();
-/*      */     while (iteratorInt2.hasNext()) {
-/*      */       int p = iteratorInt2.next();
-/*      */       if ((!this.voc.isSatisfied(p) && !assume(p)) || (confl = propagate()) != null) {
-/*      */         if (confl == null) {
-/*      */           this.slistener.conflictFound(p);
-/*      */           this.unsatExplanationInTermsOfAssumptions = analyzeFinalConflictInTermsOfAssumptions(null, assumps, p);
-/*      */           this.unsatExplanationInTermsOfAssumptions.push(LiteralsUtils.toDimacs(p));
-/*      */         } else {
-/*      */           this.slistener.conflictFound((IConstr)confl, decisionLevel(), this.trail.size());
-/*      */           this.unsatExplanationInTermsOfAssumptions = analyzeFinalConflictInTermsOfAssumptions(confl, assumps, -1);
-/*      */         } 
-/*      */         this.slistener.end(Lbool.FALSE);
-/*      */         cancelUntil(0);
-/*      */         cancelLearntLiterals(learnedLiteralsLimit);
-/*      */         return false;
-/*      */       } 
-/*      */     } 
-/*      */     this.rootLevel = decisionLevel();
-/*      */     this.learner.init();
-/*      */     if (!alreadylaunched) {
-/*      */       this.conflictCount = new ConflictTimerContainer();
-/*      */       this.conflictCount.add(this.restarter);
-/*      */       this.conflictCount.add(this.learnedConstraintsDeletionStrategy.getTimer());
-/*      */     } 
-/*      */     boolean firstTimeGlobal = false;
-/*      */     if (this.timeBasedTimeout) {
-/*      */       if (!global || this.timer == null) {
-/*      */         firstTimeGlobal = true;
-/*      */         this.undertimeout = true;
-/*      */         TimerTask stopMe = new TimerTask() {
-/*      */             public void run() {
-/*      */               Solver.this.undertimeout = false;
-/*      */               synchronized (Solver.this) {
-/*      */                 if (Solver.this.timer != null) {
-/*      */                   Solver.this.timer.cancel();
-/*      */                   Solver.this.timer = null;
-/*      */                 } 
-/*      */               } 
-/*      */             }
-/*      */           };
-/*      */         this.timer = new Timer(true);
-/*      */         this.timer.schedule(stopMe, this.timeout);
-/*      */       } 
-/*      */     } else if (!global || !alreadylaunched) {
-/*      */       firstTimeGlobal = true;
-/*      */       this.undertimeout = true;
-/*      */       ConflictTimer conflictTimeout = new ConflictTimerAdapter(this, (int)this.timeout) {
-/*      */           public void run() {
-/*      */             getSolver().expireTimeout();
-/*      */           }
-/*      */         };
-/*      */       this.conflictCount.add(conflictTimeout);
-/*      */     } 
-/*      */     if (!global || firstTimeGlobal) {
-/*      */       this.restarter.init(this.params, this.stats);
-/*      */       this.timebegin = System.currentTimeMillis();
-/*      */     } 
-/*      */     this.needToReduceDB = false;
-/*      */     this.lastConflictMeansUnsat = true;
-/*      */     while (status == Lbool.UNDEFINED && this.undertimeout && this.lastConflictMeansUnsat) {
-/*      */       int before = this.trail.size();
-/*      */       this.unitClauseProvider.provideUnitClauses(this);
-/*      */       this.stats.incImportedUnits(this.trail.size() - before);
-/*      */       status = search(assumps);
-/*      */       if (status == Lbool.UNDEFINED) {
-/*      */         this.restarter.onRestart();
-/*      */         this.slistener.restarting();
-/*      */       } 
-/*      */     } 
-/*      */     cancelUntil(0);
-/*      */     cancelLearntLiterals(learnedLiteralsLimit);
-/*      */     if (!global && this.timeBasedTimeout)
-/*      */       synchronized (this) {
-/*      */         if (this.timer != null) {
-/*      */           this.timer.cancel();
-/*      */           this.timer = null;
-/*      */         } 
-/*      */       }  
-/*      */     this.slistener.end(status);
-/*      */     if (!this.undertimeout) {
-/*      */       String message = " Timeout (" + this.timeout + (this.timeBasedTimeout ? "ms" : " conflicts") + ") exceeded";
-/*      */       throw new TimeoutException(message);
-/*      */     } 
-/*      */     if (status == Lbool.UNDEFINED && !this.lastConflictMeansUnsat)
-/*      */       throw new TimeoutException("Cannot decide the satisfiability"); 
-/*      */     return (this.model != null);
-/*      */   }
-/*      */   
-/*      */   public void printLearntClausesInfos(PrintWriter out, String prefix) {
-/*      */     if (this.learnts.isEmpty())
-/*      */       return; 
-/*      */     Map<String, Counter> learntTypes = new HashMap<>();
-/*      */     Iterator<Constr> it;
-/*      */     for (it = this.learnts.iterator(); it.hasNext(); ) {
-/*      */       String type = ((Constr)it.next()).getClass().getName();
-/*      */       Counter count = learntTypes.get(type);
-/*      */       if (count == null) {
-/*      */         learntTypes.put(type, new Counter());
-/*      */         continue;
-/*      */       } 
-/*      */       count.inc();
-/*      */     } 
-/*      */     for (it = learntTypes.entrySet().iterator(); it.hasNext(); ) {
-/*      */       Map.Entry<String, Counter> entry = (Map.Entry<String, Counter>)it.next();
-/*      */       out.println(prefix + "learnt constraints type " + (String)entry.getKey() + "\t: " + entry.getValue());
-/*      */     } 
-/*      */   }
-/*      */   
-/*      */   protected void initStats(SolverStats myStats) {
-/*      */     this.stats = myStats;
-/*      */   }
-/*      */   
-/*      */   public IOrder getOrder() {
-/*      */     return this.order;
-/*      */   }
-/*      */   
-/*      */   public void reset() {
-/*      */     if (this.timer != null) {
-/*      */       this.timer.cancel();
-/*      */       this.timer = null;
-/*      */     } 
-/*      */     this.trail.clear();
-/*      */     this.trailLim.clear();
-/*      */     this.qhead = 0;
-/*      */     Iterator<Constr> iterator = this.constrs.iterator();
-/*      */     while (iterator.hasNext())
-/*      */       ((Constr)iterator.next()).remove(this); 
-/*      */     this.constrs.clear();
-/*      */     clearLearntClauses();
-/*      */     this.voc.resetPool();
-/*      */     this.dsfactory.reset();
-/*      */     this.stats.reset();
-/*      */     this.constrTypes.clear();
-/*      */     this.undertimeout = true;
-/*      */     this.declaredMaxVarId = 0;
-/*      */   }
-/*      */   
-/*      */   public int nVars() {
-/*      */     if (this.declaredMaxVarId == 0)
-/*      */       return this.voc.nVars(); 
-/*      */     return this.declaredMaxVarId;
-/*      */   }
-/*      */   
-/*      */   public IConstr addConstr(Constr constr) {
-/*      */     if (constr == null) {
-/*      */       Counter count = this.constrTypes.get("ignored satisfied constraints");
-/*      */       if (count == null) {
-/*      */         this.constrTypes.put("ignored satisfied constraints", new Counter());
-/*      */       } else {
-/*      */         count.inc();
-/*      */       } 
-/*      */     } else {
-/*      */       this.constrs.push(constr);
-/*      */       String type = constr.getClass().getName();
-/*      */       Counter count = this.constrTypes.get(type);
-/*      */       if (count == null) {
-/*      */         this.constrTypes.put(type, new Counter());
-/*      */       } else {
-/*      */         count.inc();
-/*      */       } 
-/*      */     } 
-/*      */     return (IConstr)constr;
-/*      */   }
-/*      */   
-/*      */   public DataStructureFactory getDSFactory() {
-/*      */     return (DataStructureFactory)this.dsfactory;
-/*      */   }
-/*      */   
-/*      */   public void printStat(PrintWriter out, String prefix) {
-/*      */     this.stats.printStat(out, prefix);
-/*      */     double cputime = (System.currentTimeMillis() - this.timebegin) / 1000.0D;
-/*      */     out.println(prefix + "speed (assignments/second)\t: " + (this.stats.getPropagations() / cputime));
-/*      */     this.order.printStat(out, prefix);
-/*      */     printLearntClausesInfos(out, prefix);
-/*      */   }
-/*      */   
-/*      */   public String toString(String prefix) {
-/*      */     StringBuilder stb = new StringBuilder();
-/*      */     Object[] objs = { this.dsfactory, this.learner, this.params, this.order, this.simplifier, this.restarter, this.learnedConstraintsDeletionStrategy };
-/*      */     stb.append(prefix);
-/*      */     stb.append("--- Begin Solver configuration ---");
-/*      */     stb.append("\n");
-/*      */     for (Object o : objs) {
-/*      */       stb.append(prefix);
-/*      */       stb.append(o.toString());
-/*      */       stb.append("\n");
-/*      */     } 
-/*      */     stb.append(prefix);
-/*      */     stb.append("timeout=");
-/*      */     if (this.timeBasedTimeout) {
-/*      */       stb.append(this.timeout / 1000L);
-/*      */       stb.append("s\n");
-/*      */     } else {
-/*      */       stb.append(this.timeout);
-/*      */       stb.append(" conflicts\n");
-/*      */     } 
-/*      */     stb.append(prefix);
-/*      */     stb.append("DB Simplification allowed=");
-/*      */     stb.append(this.isDBSimplificationAllowed);
-/*      */     stb.append("\n");
-/*      */     stb.append(prefix);
-/*      */     if (isSolverKeptHot()) {
-/*      */       stb.append("Heuristics kept accross calls (keep the solver \"hot\")\n");
-/*      */       stb.append(prefix);
-/*      */     } 
-/*      */     stb.append("Listener: ");
-/*      */     stb.append(this.slistener);
-/*      */     stb.append("\n");
-/*      */     stb.append(prefix);
-/*      */     stb.append("--- End Solver configuration ---");
-/*      */     return stb.toString();
-/*      */   }
-/*      */   
-/*      */   public String toString() {
-/*      */     return toString("");
-/*      */   }
-/*      */   
-/*      */   public int nextFreeVarId(boolean reserve) {
-/*      */     return this.voc.nextFreeVarId(reserve);
-/*      */   }
-/*      */   
-/*      */   public IVecInt createBlockingClauseForCurrentModel() {
-/*      */     VecInt vecInt = new VecInt(this.decisions.size());
-/*      */     if (realNumberOfVariables() > nVars()) {
-/*      */       for (int p : this.model)
-/*      */         vecInt.push(-p); 
-/*      */     } else {
-/*      */       for (int i = 0; i < this.decisions.size(); i++)
-/*      */         vecInt.push(-this.decisions.get(i)); 
-/*      */     } 
-/*      */     return (IVecInt)vecInt;
-/*      */   }
-/*      */   
-/*      */   public void unset(int p) {
-/*      */     if (this.voc.isUnassigned(p) || this.trail.isEmpty())
-/*      */       return; 
-/*      */     int current = this.trail.last();
-/*      */     while (current != p) {
-/*      */       undoOne();
-/*      */       if (this.trail.isEmpty())
-/*      */         return; 
-/*      */       if (!this.trailLim.isEmpty() && this.trailLim.last() == this.trail.size())
-/*      */         this.trailLim.pop(); 
-/*      */       current = this.trail.last();
-/*      */     } 
-/*      */     undoOne();
-/*      */     if (!this.trailLim.isEmpty() && this.trailLim.last() == this.trail.size())
-/*      */       this.trailLim.pop(); 
-/*      */     this.qhead = this.trail.size();
-/*      */   }
-/*      */   
-/*      */   public int getPropagationLevel() {
-/*      */     return this.trail.size();
-/*      */   }
-/*      */   
-/*      */   public String getLogPrefix() {
-/*      */     return this.prefix;
-/*      */   }
-/*      */   
-/*      */   public IVecInt unsatExplanation() {
-/*      */     if (this.unsatExplanationInTermsOfAssumptions == null)
-/*      */       return null; 
-/*      */     VecInt vecInt = new VecInt(this.unsatExplanationInTermsOfAssumptions.size());
-/*      */     this.unsatExplanationInTermsOfAssumptions.copyTo((IVecInt)vecInt);
-/*      */     return (IVecInt)vecInt;
-/*      */   }
-/*      */   
-/*      */   public int[] modelWithInternalVariables() {
-/*      */     int[] nmodel;
-/*      */     if (this.model == null)
-/*      */       throw new UnsupportedOperationException("Call the solve method first!!!"); 
-/*      */     if (nVars() == realNumberOfVariables()) {
-/*      */       nmodel = new int[this.model.length];
-/*      */       System.arraycopy(this.model, 0, nmodel, 0, nmodel.length);
-/*      */     } else {
-/*      */       nmodel = new int[this.fullmodel.length];
-/*      */       System.arraycopy(this.fullmodel, 0, nmodel, 0, nmodel.length);
-/*      */     } 
-/*      */     return nmodel;
-/*      */   }
-/*      */   
-/*      */   public int realNumberOfVariables() {
-/*      */     return this.voc.nVars();
-/*      */   }
-/*      */   
-/*      */   public int currentDecisionLevel() {
-/*      */     return decisionLevel();
-/*      */   }
-/*      */   
-/*      */   public void setNeedToReduceDB(boolean needToReduceDB) {
-/*      */     this.needToReduceDB = needToReduceDB;
-/*      */   }
-/*      */   
-/*      */   public boolean isSolverKeptHot() {
-/*      */     return this.keepHot;
-/*      */   }
-/*      */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\Solver.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SolverStats.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SolverStats.java
deleted file mode 100644
index 52a21c77360dddadd0aab4eb9f11e201c1b83ab8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/SolverStats.java
+++ /dev/null
@@ -1,291 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*     */ 
-/*     */ import java.io.PrintWriter;
-/*     */ import java.io.Serializable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class SolverStats
-/*     */   implements Serializable
-/*     */ {
-/*     */   private int starts;
-/*     */   private long decisions;
-/*     */   private long propagations;
-/*     */   private long inspects;
-/*     */   private long conflicts;
-/*     */   private long learnedliterals;
-/*     */   private long learnedbinaryclauses;
-/*     */   private long learnedternaryclauses;
-/*     */   private long learnedclauses;
-/*     */   private long ignoredclauses;
-/*     */   private long rootSimplifications;
-/*     */   private long reducedliterals;
-/*     */   private long changedreason;
-/*     */   private int reduceddb;
-/*     */   private int shortcuts;
-/*     */   private long updateLBD;
-/*     */   private int importedUnits;
-/*     */   
-/*     */   public void reset() {
-/*  82 */     this.starts = 0;
-/*  83 */     this.decisions = 0L;
-/*  84 */     this.propagations = 0L;
-/*  85 */     this.inspects = 0L;
-/*  86 */     this.shortcuts = 0;
-/*  87 */     this.conflicts = 0L;
-/*  88 */     this.learnedliterals = 0L;
-/*  89 */     this.learnedclauses = 0L;
-/*  90 */     this.ignoredclauses = 0L;
-/*  91 */     this.learnedbinaryclauses = 0L;
-/*  92 */     this.learnedternaryclauses = 0L;
-/*  93 */     this.rootSimplifications = 0L;
-/*  94 */     this.reducedliterals = 0L;
-/*  95 */     this.changedreason = 0L;
-/*  96 */     this.reduceddb = 0;
-/*  97 */     this.updateLBD = 0L;
-/*  98 */     this.importedUnits = 0;
-/*     */   }
-/*     */   
-/*     */   public void printStat(PrintWriter out, String prefix) {
-/* 102 */     out.println(prefix + "starts\t\t: " + getStarts());
-/* 103 */     out.println(prefix + "conflicts\t\t: " + this.conflicts);
-/* 104 */     out.println(prefix + "decisions\t\t: " + this.decisions);
-/* 105 */     out.println(prefix + "propagations\t\t: " + this.propagations);
-/* 106 */     out.println(prefix + "inspects\t\t: " + this.inspects);
-/* 107 */     out.println(prefix + "shortcuts\t\t: " + this.shortcuts);
-/* 108 */     out.println(prefix + "learnt literals\t: " + this.learnedliterals);
-/* 109 */     out.println(prefix + "learnt binary clauses\t: " + this.learnedbinaryclauses);
-/*     */     
-/* 111 */     out.println(prefix + "learnt ternary clauses\t: " + this.learnedternaryclauses);
-/*     */     
-/* 113 */     out.println(prefix + "learnt constraints\t: " + this.learnedclauses);
-/* 114 */     out.println(prefix + "ignored constraints\t: " + this.ignoredclauses);
-/* 115 */     out.println(prefix + "root simplifications\t: " + this.rootSimplifications);
-/*     */     
-/* 117 */     out.println(prefix + "removed literals (reason simplification)\t: " + this.reducedliterals);
-/*     */     
-/* 119 */     out.println(prefix + "reason swapping (by a shorter reason)\t: " + this.changedreason);
-/*     */     
-/* 121 */     out.println(prefix + "Calls to reduceDB\t: " + this.reduceddb);
-/* 122 */     out.println(prefix + "Number of update (reduction) of LBD\t: " + this.updateLBD);
-/*     */     
-/* 124 */     out.println(prefix + "Imported unit clauses\t: " + this.importedUnits);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int getStarts() {
-/* 151 */     return this.starts;
-/*     */   }
-/*     */   
-/*     */   public void incStarts() {
-/* 155 */     this.starts++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incDecisions() {
-/* 163 */     this.decisions++;
-/*     */   }
-/*     */   
-/*     */   public long getPropagations() {
-/* 167 */     return this.propagations;
-/*     */   }
-/*     */   
-/*     */   public void incPropagations() {
-/* 171 */     this.propagations++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incInspects() {
-/* 179 */     this.inspects++;
-/*     */   }
-/*     */   
-/*     */   public long getConflicts() {
-/* 183 */     return this.conflicts;
-/*     */   }
-/*     */   
-/*     */   public void incConflicts() {
-/* 187 */     this.conflicts++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incLearnedliterals() {
-/* 195 */     this.learnedliterals++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incLearnedbinaryclauses() {
-/* 203 */     this.learnedbinaryclauses++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incLearnedternaryclauses() {
-/* 211 */     this.learnedternaryclauses++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incLearnedclauses() {
-/* 219 */     this.learnedclauses++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incRootSimplifications() {
-/* 235 */     this.rootSimplifications++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incReducedliterals(int increment) {
-/* 243 */     this.reducedliterals += increment;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incReduceddb() {
-/* 259 */     this.reduceddb++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incUpdateLBD() {
-/* 275 */     this.updateLBD++;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incImportedUnits(int increment) {
-/* 283 */     this.importedUnits += increment;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\SolverStats.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Undoable.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Undoable.java
deleted file mode 100644
index 08e1ad5efb71a1926e865e565c183325f2f2e118..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/Undoable.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-public interface Undoable {
-  void undo(int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\Undoable.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/VarActivityListener.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/VarActivityListener.java
deleted file mode 100644
index 86ee58343591cba7dc4b57d115d229191eae5a3a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/VarActivityListener.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import java.io.Serializable;
-
-public interface VarActivityListener extends Serializable {
-  void varBumpActivity(int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\VarActivityListener.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/VoidTracing.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/VoidTracing.java
deleted file mode 100644
index 10a33c2663a7ccc4eb44f50eb03590c868b99911..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/VoidTracing.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-
-import net.fabricmc.loader.impl.lib.sat4j.specs.ISolverService;
-import net.fabricmc.loader.impl.lib.sat4j.specs.SearchListenerAdapter;
-
-final class VoidTracing extends SearchListenerAdapter<ISolverService> {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\VoidTracing.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/WatcherBasedPrimeImplicantStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/WatcherBasedPrimeImplicantStrategy.java
deleted file mode 100644
index d7a285885faf0591e86ef37e616e416904190b9c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/core/WatcherBasedPrimeImplicantStrategy.java
+++ /dev/null
@@ -1,182 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.core;
-/*     */ 
-/*     */ import java.util.Comparator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class WatcherBasedPrimeImplicantStrategy
-/*     */   implements PrimeImplicantStrategy, MandatoryLiteralListener
-/*     */ {
-/*     */   private int[] prime;
-/*     */   private final Comparator<Integer> comparator;
-/*     */   
-/*     */   public WatcherBasedPrimeImplicantStrategy(Comparator<Integer> comparator) {
-/*  66 */     this.comparator = comparator;
-/*     */   }
-/*     */   
-/*     */   public WatcherBasedPrimeImplicantStrategy() {
-/*  70 */     this(null);
-/*     */   }
-/*     */   
-/*     */   public void isMandatory(int p) {
-/*  74 */     this.prime[LiteralsUtils.var(p)] = LiteralsUtils.toDimacs(p);
-/*     */   }
-/*     */   
-/*     */   public int[] compute(Solver<? extends DataStructureFactory> solver) {
-/*  78 */     assert solver.qhead == solver.trail.size() + solver.learnedLiterals
-/*  79 */       .size();
-/*  80 */     long begin = System.currentTimeMillis();
-/*  81 */     if (solver.learnedLiterals.size() > 0) {
-/*  82 */       solver.qhead = solver.trail.size();
-/*     */     }
-/*  84 */     this.prime = new int[solver.voc.nVars() + 1];
-/*     */     int i;
-/*  86 */     for (i = 0; i < this.prime.length; i++) {
-/*  87 */       this.prime[i] = 0;
-/*     */     }
-/*     */     
-/*  90 */     for (i = 0; i < solver.trail.size(); i++) {
-/*  91 */       isMandatory(solver.trail.get(i));
-/*     */     }
-/*  93 */     for (int d : solver.fullmodel) {
-/*  94 */       int p = LiteralsUtils.toInternal(d);
-/*  95 */       if (solver.voc.isUnassigned(p)) {
-/*  96 */         solver.assume(p);
-/*     */       }
-/*     */     } 
-/*  99 */     for (int d : solver.fullmodel) {
-/* 100 */       reduceClausesContainingTheNegationOfPI(solver, LiteralsUtils.toInternal(d));
-/*     */     }
-/*     */     
-/* 103 */     int removed = 0;
-/* 104 */     int posremoved = 0;
-/* 105 */     int propagated = 0;
-/* 106 */     for (int d : fullModel(solver)) {
-/* 107 */       if (this.prime[Math.abs(d)] != 0) {
-/*     */         
-/* 109 */         propagated++;
-/*     */       } else {
-/*     */         
-/* 112 */         solver.forget(Math.abs(d));
-/* 113 */         reduceClausesContainingTheNegationOfPI(solver, LiteralsUtils.toInternal(-d));
-/* 114 */         removed++;
-/* 115 */         if (d > 0 && d > solver.nVars()) {
-/* 116 */           posremoved++;
-/*     */         }
-/*     */       } 
-/*     */     } 
-/* 120 */     solver.cancelUntil(0);
-/* 121 */     int[] implicant = new int[propagated];
-/* 122 */     int index = 0;
-/* 123 */     for (int j : this.prime) {
-/* 124 */       if (j != 0) {
-/* 125 */         implicant[index++] = j;
-/*     */       }
-/*     */     } 
-/* 128 */     long end = System.currentTimeMillis();
-/* 129 */     if (solver.isVerbose()) {
-/* 130 */       System.out.printf("%s prime implicant computation statistics BRESIL (reverse = %b)%n", new Object[] { solver
-/*     */             
-/* 132 */             .getLogPrefix(), Boolean.valueOf((this.comparator != null)) });
-/* 133 */       System.out.printf("%s implied: %d, decision: %d, removed %d (+%d), propagated %d, time(ms):%d %n", new Object[] { solver
-/*     */             
-/* 135 */             .getLogPrefix(), Integer.valueOf(solver.implied.size()), 
-/* 136 */             Integer.valueOf(solver.decisions.size()), Integer.valueOf(removed), Integer.valueOf(posremoved), Integer.valueOf(propagated), 
-/* 137 */             Long.valueOf(end - begin) });
-/*     */     } 
-/* 139 */     return implicant;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   Constr reduceClausesContainingTheNegationOfPI(Solver<? extends DataStructureFactory> solver, int p) {
-/* 144 */     assert p > 1;
-/* 145 */     IVec<Propagatable> lwatched = solver.watched;
-/* 146 */     lwatched.clear();
-/* 147 */     solver.voc.watches(p).moveTo(lwatched);
-/* 148 */     int size = lwatched.size();
-/* 149 */     for (int i = 0; i < size; i++) {
-/* 150 */       solver.stats.incInspects();
-/* 151 */       ((Propagatable)lwatched.get(i)).propagatePI(this, p);
-/*     */     } 
-/* 153 */     return null;
-/*     */   }
-/*     */   
-/*     */   public int[] getPrimeImplicantAsArrayWithHoles() {
-/* 157 */     if (this.prime == null) {
-/* 158 */       throw new UnsupportedOperationException("Call the compute method first!");
-/*     */     }
-/*     */     
-/* 161 */     return this.prime;
-/*     */   }
-/*     */   
-/*     */   private int[] fullModel(Solver<? extends DataStructureFactory> solver) {
-/* 165 */     if (this.comparator == null) {
-/* 166 */       return solver.fullmodel;
-/*     */     }
-/* 168 */     int n = solver.fullmodel.length;
-/* 169 */     VecInt vecInt = new VecInt(n);
-/* 170 */     for (int i : solver.fullmodel) {
-/* 171 */       vecInt.push(i);
-/*     */     }
-/* 173 */     vecInt.sort(this.comparator);
-/* 174 */     return vecInt.toArray();
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\core\WatcherBasedPrimeImplicantStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/learning/AbstractLearning.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/learning/AbstractLearning.java
deleted file mode 100644
index 10fc65d65fac88cabd58ab5975dfab774f88f8e6..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/learning/AbstractLearning.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.learning;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.DataStructureFactory;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.LearningStrategy;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Solver;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.VarActivityListener;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ abstract class AbstractLearning<D extends DataStructureFactory>
-/*    */   implements LearningStrategy<D>
-/*    */ {
-/*    */   private VarActivityListener val;
-/*    */   
-/*    */   public void setVarActivityListener(VarActivityListener s) {
-/* 60 */     this.val = s;
-/*    */   }
-/*    */   
-/*    */   public void setSolver(Solver<D> s) {
-/* 64 */     this.val = (VarActivityListener)s;
-/*    */   }
-/*    */   
-/*    */   public final void claBumpActivity(Constr reason) {
-/* 68 */     for (int i = 0; i < reason.size(); i++) {
-/* 69 */       int q = reason.get(i);
-/* 70 */       assert q > 1;
-/* 71 */       this.val.varBumpActivity(q);
-/*    */     } 
-/*    */   }
-/*    */   
-/*    */   public void init() {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\learning\AbstractLearning.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/learning/MiniSATLearning.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/learning/MiniSATLearning.java
deleted file mode 100644
index 561a68d9b9e8f2b5b76a832458b7dee951f785aa..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/learning/MiniSATLearning.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.learning;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.DataStructureFactory;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Solver;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.VarActivityListener;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class MiniSATLearning<D extends DataStructureFactory>
-/*    */   extends AbstractLearning<D>
-/*    */ {
-/*    */   private DataStructureFactory dsf;
-/*    */   
-/*    */   public void setDataStructureFactory(DataStructureFactory dsf) {
-/* 55 */     this.dsf = dsf;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void setSolver(Solver<D> s) {
-/* 60 */     super.setSolver(s);
-/* 61 */     if (s != null) {
-/* 62 */       this.dsf = s.getDSFactory();
-/*    */     }
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void learns(Constr constr) {
-/* 68 */     claBumpActivity(constr);
-/* 69 */     this.dsf.learnConstraint(constr);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 79 */     return "Learn all clauses as in MiniSAT";
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\learning\MiniSATLearning.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/AbstractPhaserecordingSelectionStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/AbstractPhaserecordingSelectionStrategy.java
deleted file mode 100644
index 60cb38c6b2ee85a97638da67f2ec582c0b78a42c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/AbstractPhaserecordingSelectionStrategy.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.orders;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IPhaseSelectionStrategy;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ abstract class AbstractPhaserecordingSelectionStrategy
-/*    */   implements IPhaseSelectionStrategy
-/*    */ {
-/*    */   protected int[] phase;
-/*    */   
-/*    */   public void init(int nlength) {
-/* 47 */     if (this.phase == null || this.phase.length < nlength) {
-/* 48 */       this.phase = new int[nlength];
-/*    */     }
-/* 50 */     for (int i = 1; i < nlength; i++) {
-/* 51 */       this.phase[i] = LiteralsUtils.negLit(i);
-/*    */     }
-/*    */   }
-/*    */   
-/*    */   public void init(int var, int p) {
-/* 56 */     this.phase[var] = p;
-/*    */   }
-/*    */   
-/*    */   public int select(int var) {
-/* 60 */     return this.phase[var];
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\orders\AbstractPhaserecordingSelectionStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/ActivityBasedVariableComparator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/ActivityBasedVariableComparator.java
deleted file mode 100644
index e1fd7a58c9c56f256b886847b38c8fead98f030c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/ActivityBasedVariableComparator.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.orders;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ActivityBasedVariableComparator
-/*    */   implements VariableComparator
-/*    */ {
-/*    */   private final double[] activity;
-/*    */   
-/*    */   public ActivityBasedVariableComparator(double[] activity) {
-/* 37 */     this.activity = activity;
-/*    */   }
-/*    */   
-/*    */   public boolean preferredTo(int a, int b) {
-/* 41 */     return (this.activity[a] > this.activity[b]);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 46 */     return "Activity-based variable heuristic";
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\orders\ActivityBasedVariableComparator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/PhaseInLastLearnedClauseSelectionStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/PhaseInLastLearnedClauseSelectionStrategy.java
deleted file mode 100644
index 64049451bf1af0e2921aa1661e13bf5b7ae6e349..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/PhaseInLastLearnedClauseSelectionStrategy.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.orders;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class PhaseInLastLearnedClauseSelectionStrategy
-/*    */   extends AbstractPhaserecordingSelectionStrategy
-/*    */ {
-/*    */   public void updateVar(int p) {
-/* 52 */     this.phase[LiteralsUtils.var(p)] = p;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 57 */     return "phase appearing in latest learned clause";
-/*    */   }
-/*    */   
-/*    */   public void assignLiteral(int p) {}
-/*    */   
-/*    */   public void updateVarAtDecisionLevel(int q) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\orders\PhaseInLastLearnedClauseSelectionStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/RSATPhaseSelectionStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/RSATPhaseSelectionStrategy.java
deleted file mode 100644
index af7da97b5fab8c08950c454d36aee94a92e15494..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/RSATPhaseSelectionStrategy.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.orders;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class RSATPhaseSelectionStrategy
-/*    */   extends AbstractPhaserecordingSelectionStrategy
-/*    */ {
-/*    */   public void assignLiteral(int p) {
-/* 52 */     this.phase[LiteralsUtils.var(p)] = p;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 57 */     return "lightweight component caching from RSAT";
-/*    */   }
-/*    */   
-/*    */   public void updateVar(int p) {}
-/*    */   
-/*    */   public void updateVarAtDecisionLevel(int p) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\orders\RSATPhaseSelectionStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/VarOrderHeap.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/VarOrderHeap.java
deleted file mode 100644
index e5e68c17da450c56dd59f531c7b23e937748d3a7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/VarOrderHeap.java
+++ /dev/null
@@ -1,260 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.orders;
-/*     */ 
-/*     */ import java.io.PrintWriter;
-/*     */ import java.io.Serializable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Heap;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IOrder;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IPhaseSelectionStrategy;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class VarOrderHeap
-/*     */   implements Serializable, IOrder
-/*     */ {
-/*  63 */   protected double[] activity = new double[1];
-/*     */   
-/*  65 */   private double varDecay = 1.0D;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*  70 */   private double varInc = 1.0D;
-/*     */   
-/*     */   protected ILits lits;
-/*     */   
-/*  74 */   private long nullchoice = 0L;
-/*     */   
-/*     */   protected Heap heap;
-/*     */   
-/*     */   protected IPhaseSelectionStrategy phaseStrategy;
-/*     */   
-/*     */   public VarOrderHeap() {
-/*  81 */     this(new PhaseInLastLearnedClauseSelectionStrategy());
-/*     */   }
-/*     */   
-/*     */   public VarOrderHeap(IPhaseSelectionStrategy strategy) {
-/*  85 */     this.phaseStrategy = strategy;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setLits(ILits lits) {
-/* 102 */     this.lits = lits;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int select() {
-/* 112 */     while (!this.heap.empty()) {
-/* 113 */       int var = this.heap.getmin();
-/* 114 */       int next = this.phaseStrategy.select(var);
-/* 115 */       if (this.lits.isUnassigned(next)) {
-/* 116 */         if (this.activity[var] < 1.0E-4D) {
-/* 117 */           this.nullchoice++;
-/*     */         }
-/* 119 */         return next;
-/*     */       } 
-/*     */     } 
-/* 122 */     return -1;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setVarDecay(double d) {
-/* 132 */     this.varDecay = d;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void undo(int x) {
-/* 141 */     if (!this.heap.inHeap(x)) {
-/* 142 */       this.heap.insert(x);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void updateVar(int p) {
-/* 153 */     updateVar(p, 1.0D);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void updateVar(int p, double value) {
-/* 158 */     int var = LiteralsUtils.var(p);
-/* 159 */     updateActivity(var, value);
-/* 160 */     this.phaseStrategy.updateVar(p);
-/* 161 */     if (this.heap.inHeap(var)) {
-/* 162 */       this.heap.increase(var);
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   protected void updateActivity(int var, double inc) {
-/* 167 */     this.activity[var] = this.activity[var] + inc * this.varInc; if (this.activity[var] + inc * this.varInc > 1.0E100D) {
-/* 168 */       varRescaleActivity();
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void varDecayActivity() {
-/* 176 */     this.varInc *= this.varDecay;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private void varRescaleActivity() {
-/* 183 */     for (int i = 1; i < this.activity.length; i++) {
-/* 184 */       this.activity[i] = this.activity[i] * 1.0E-100D;
-/*     */     }
-/* 186 */     this.varInc *= 1.0E-100D;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected Heap createHeap(double[] activity) {
-/* 207 */     return new Heap(new ActivityBasedVariableComparator(activity));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void init() {
-/* 215 */     int nlength = this.lits.nVars() + 1;
-/* 216 */     if (this.activity == null || this.activity.length < nlength) {
-/* 217 */       this.activity = new double[nlength];
-/*     */     }
-/* 219 */     this.phaseStrategy.init(nlength);
-/* 220 */     this.activity[0] = -1.0D;
-/* 221 */     this.heap = createHeap(this.activity);
-/* 222 */     this.heap.setBounds(nlength);
-/* 223 */     for (int i = 1; i < nlength; i++) {
-/* 224 */       assert i > 0;
-/* 225 */       assert i <= this.lits.nVars() : "" + this.lits.nVars() + "/" + i;
-/* 226 */       this.activity[i] = 0.0D;
-/* 227 */       if (this.lits.belongsToPool(i)) {
-/* 228 */         this.heap.insert(i);
-/*     */       }
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 235 */     return "VSIDS like heuristics from MiniSAT using a heap " + this.phaseStrategy;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void printStat(PrintWriter out, String prefix) {
-/* 244 */     out.println(prefix + "non guided choices\t: " + this.nullchoice);
-/*     */   }
-/*     */   
-/*     */   public void assignLiteral(int p) {
-/* 248 */     this.phaseStrategy.assignLiteral(p);
-/*     */   }
-/*     */   
-/*     */   public void updateVarAtDecisionLevel(int q) {
-/* 252 */     this.phaseStrategy.updateVarAtDecisionLevel(q);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\orders\VarOrderHeap.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/VariableComparator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/VariableComparator.java
deleted file mode 100644
index 116d51d8f78d57a5da0a6670da37e87e2f4f94f4..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/orders/VariableComparator.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.minisat.orders;
-
-public interface VariableComparator {
-  boolean preferredTo(int paramInt1, int paramInt2);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\orders\VariableComparator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/restarts/ArminRestarts.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/restarts/ArminRestarts.java
deleted file mode 100644
index 435e0eb0bbe564224b8467b43c7907083f0e0580..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/restarts/ArminRestarts.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.minisat.restarts;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.RestartStrategy;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.SearchParams;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.SolverStats;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class ArminRestarts
-/*    */   implements RestartStrategy
-/*    */ {
-/*    */   private double inner;
-/*    */   private double outer;
-/*    */   private long conflicts;
-/*    */   private SearchParams params;
-/* 57 */   private long conflictcount = 0L;
-/*    */   
-/*    */   public void init(SearchParams theParams, SolverStats stats) {
-/* 60 */     this.params = theParams;
-/* 61 */     this.inner = theParams.getInitConflictBound();
-/* 62 */     this.outer = theParams.getInitConflictBound();
-/* 63 */     this.conflicts = Math.round(this.inner);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void onRestart() {
-/* 71 */     if (this.inner >= this.outer) {
-/* 72 */       this.outer *= this.params.getConflictBoundIncFactor();
-/* 73 */       this.inner = this.params.getInitConflictBound();
-/*    */     } else {
-/* 75 */       this.inner *= this.params.getConflictBoundIncFactor();
-/*    */     } 
-/* 77 */     this.conflicts = Math.round(this.inner);
-/* 78 */     this.conflictcount = 0L;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 83 */     return "Armin Biere (Picosat) restarts strategy";
-/*    */   }
-/*    */   
-/*    */   public boolean shouldRestart() {
-/* 87 */     return (this.conflictcount >= this.conflicts);
-/*    */   }
-/*    */   
-/*    */   public void onBackjumpToRootLevel() {
-/* 91 */     this.conflictcount = 0L;
-/*    */   }
-/*    */   
-/*    */   public void reset() {
-/* 95 */     this.conflictcount = 0L;
-/*    */   }
-/*    */   
-/*    */   public void newConflict() {
-/* 99 */     this.conflictcount++;
-/*    */   }
-/*    */   
-/*    */   public void newLearnedClause(Constr learned, int trailLevel) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\restarts\ArminRestarts.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/restarts/Glucose21Restarts.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/restarts/Glucose21Restarts.java
deleted file mode 100644
index b7a742db589d3e5292652991eb38ea40d6c360d2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/minisat/restarts/Glucose21Restarts.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.minisat.restarts;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.CircularBuffer;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.RestartStrategy;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.SearchParams;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.SolverStats;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class Glucose21Restarts
-/*     */   implements RestartStrategy
-/*     */ {
-/*  55 */   private final CircularBuffer bufferLBD = new CircularBuffer(50);
-/*     */   
-/*  57 */   private final CircularBuffer bufferTrail = new CircularBuffer(5000);
-/*     */   
-/*  59 */   private long sumOfAllLBD = 0L;
-/*     */   
-/*     */   private SolverStats stats;
-/*     */   
-/*     */   public void reset() {
-/*  64 */     this.sumOfAllLBD = 0L;
-/*  65 */     this.bufferLBD.clear();
-/*  66 */     this.bufferTrail.clear();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void newConflict() {}
-/*     */ 
-/*     */   
-/*     */   public void newLearnedClause(Constr learned, int trailLevel) {
-/*  75 */     int lbd = (int)learned.getActivity();
-/*  76 */     this.bufferLBD.push(lbd);
-/*  77 */     this.sumOfAllLBD += lbd;
-/*  78 */     this.bufferTrail.push(trailLevel);
-/*     */ 
-/*     */ 
-/*     */     
-/*  82 */     if (this.stats.getConflicts() > 10000L && this.bufferTrail.isFull() && trailLevel * 5L > 7L * this.bufferTrail
-/*  83 */       .average()) {
-/*  84 */       this.bufferLBD.clear();
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   public void init(SearchParams params, SolverStats stats) {
-/*  89 */     this.stats = stats;
-/*  90 */     reset();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean shouldRestart() {
-/* 101 */     return (this.bufferLBD.isFull() && this.bufferLBD.average() * this.stats.getConflicts() * 4L > this.sumOfAllLBD * 5L);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void onRestart() {
-/* 106 */     this.bufferLBD.clear();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void onBackjumpToRootLevel() {}
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 114 */     return "Glucose 2.1 dynamic restart strategy";
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\minisat\restarts\Glucose21Restarts.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/IPBSolver.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/IPBSolver.java
deleted file mode 100644
index 0e39e99f867159e739fc974de48e3693391a58b5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/IPBSolver.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb;
-
-import java.math.BigInteger;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-
-public interface IPBSolver extends ISolver {
-  IConstr addPseudoBoolean(IVecInt paramIVecInt, IVec<BigInteger> paramIVec, boolean paramBoolean, BigInteger paramBigInteger) throws ContradictionException;
-  
-  IConstr addAtMost(IVecInt paramIVecInt1, IVecInt paramIVecInt2, int paramInt) throws ContradictionException;
-  
-  IConstr addAtLeast(IVecInt paramIVecInt1, IVecInt paramIVecInt2, int paramInt) throws ContradictionException;
-  
-  void setObjectiveFunction(ObjectiveFunction paramObjectiveFunction);
-  
-  ObjectiveFunction getObjectiveFunction();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\IPBSolver.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/IPBSolverService.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/IPBSolverService.java
deleted file mode 100644
index f0d8095965e1d219226f4fabafe522a4e8e3d65e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/IPBSolverService.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb;
-
-import net.fabricmc.loader.impl.lib.sat4j.specs.ISolverService;
-
-public interface IPBSolverService extends ISolverService {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\IPBSolverService.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/ObjectiveFunction.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/ObjectiveFunction.java
deleted file mode 100644
index f7eb75c7ad329773fc585a806eeeee2bcc1599c2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/ObjectiveFunction.java
+++ /dev/null
@@ -1,231 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import java.math.BigInteger;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.Map;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.ReadOnlyVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.ReadOnlyVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.RandomAccessModel;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class ObjectiveFunction
-/*     */   implements Serializable
-/*     */ {
-/*     */   private IVec<BigInteger> coeffs;
-/*     */   private IVecInt vars;
-/*  67 */   private BigInteger correction = BigInteger.ZERO;
-/*     */   
-/*  69 */   private BigInteger correctionFactor = BigInteger.ONE;
-/*     */   
-/*     */   public ObjectiveFunction() {
-/*  72 */     this.vars = (IVecInt)new VecInt();
-/*  73 */     this.coeffs = (IVec<BigInteger>)new Vec();
-/*     */   }
-/*     */   
-/*     */   public ObjectiveFunction(IVecInt vars, IVec<BigInteger> coeffs) {
-/*  77 */     this.vars = (IVecInt)new ReadOnlyVecInt(vars);
-/*  78 */     this.coeffs = (IVec<BigInteger>)new ReadOnlyVec(coeffs);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger calculateDegree(RandomAccessModel lazyModel) {
-/*  90 */     BigInteger tempDegree = BigInteger.ZERO;
-/*  91 */     for (int i = 0; i < this.vars.size(); i++) {
-/*  92 */       BigInteger coeff = (BigInteger)this.coeffs.get(i);
-/*  93 */       if (varInModel(this.vars.get(i), lazyModel) || (coeff.signum() < 0 && 
-/*  94 */         !varInModel(-this.vars.get(i), lazyModel)))
-/*     */       {
-/*     */ 
-/*     */         
-/*  98 */         tempDegree = tempDegree.add(coeff);
-/*     */       }
-/*     */     } 
-/* 101 */     return tempDegree;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger calculateDegreeImplicant(ISolver solver) {
-/* 116 */     BigInteger tempDegree = BigInteger.ZERO;
-/* 117 */     for (int i = 0; i < this.vars.size(); i++) {
-/* 118 */       BigInteger coeff = (BigInteger)this.coeffs.get(i);
-/* 119 */       if (solver.primeImplicant(this.vars.get(i)) || (coeff.signum() < 0 && 
-/* 120 */         !solver.primeImplicant(-this.vars.get(i))))
-/*     */       {
-/*     */         
-/* 123 */         tempDegree = tempDegree.add(coeff);
-/*     */       }
-/*     */     } 
-/* 126 */     return tempDegree;
-/*     */   }
-/*     */   
-/*     */   private boolean varInModel(int var, RandomAccessModel lazyModel) {
-/* 130 */     if (var > 0) {
-/* 131 */       return lazyModel.model(var);
-/*     */     }
-/* 133 */     return !lazyModel.model(-var);
-/*     */   }
-/*     */   
-/*     */   public IVec<BigInteger> getCoeffs() {
-/* 137 */     return this.coeffs;
-/*     */   }
-/*     */   
-/*     */   public IVecInt getVars() {
-/* 141 */     return this.vars;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger getCorrectionOffset() {
-/* 159 */     return this.correction;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger getCorrectionFactor() {
-/* 167 */     return this.correctionFactor;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 172 */     StringBuilder stb = new StringBuilder();
-/* 173 */     IVecInt lits = getVars();
-/* 174 */     IVec<BigInteger> coefs = getCoeffs();
-/*     */ 
-/*     */     
-/* 177 */     for (int i = 0; i < lits.size(); i++) {
-/* 178 */       BigInteger coef = (BigInteger)coefs.get(i);
-/* 179 */       int lit = lits.get(i);
-/* 180 */       if (lit < 0) {
-/* 181 */         lit = -lit;
-/* 182 */         coef = coef.negate();
-/*     */       } 
-/* 184 */       stb.append((
-/* 185 */           (coef.signum() < 0) ? "" : "+") + coef + " x" + lit + " ");
-/*     */     } 
-/* 187 */     return stb.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 203 */     return this.coeffs.hashCode() / 3 + this.vars.hashCode() / 3 + this.correction
-/* 204 */       .hashCode() / 3;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/* 209 */     if (obj instanceof ObjectiveFunction) {
-/* 210 */       ObjectiveFunction of = (ObjectiveFunction)obj;
-/* 211 */       return (of.correction.equals(this.correction) && of.coeffs
-/* 212 */         .equals(this.coeffs) && of.vars
-/* 213 */         .equals(this.vars));
-/*     */     } 
-/* 215 */     return false;
-/*     */   }
-/*     */   
-/*     */   public Map<Integer, BigInteger> toMap() {
-/* 219 */     Map<Integer, BigInteger> map = new HashMap<>();
-/* 220 */     for (int i = 0; i < this.vars.size(); i++) {
-/* 221 */       map.put(Integer.valueOf(this.vars.get(i)), this.coeffs.get(i));
-/*     */     }
-/* 223 */     return map;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\ObjectiveFunction.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/ObjectiveFunctionComparator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/ObjectiveFunctionComparator.java
deleted file mode 100644
index 4db4a25d4c24396f92d293263f97e0c4c460446a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/ObjectiveFunctionComparator.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb;
-/*    */ 
-/*    */ import java.io.Serializable;
-/*    */ import java.math.BigInteger;
-/*    */ import java.util.Comparator;
-/*    */ import java.util.Map;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ObjectiveFunctionComparator
-/*    */   implements Serializable, Comparator<Integer>
-/*    */ {
-/*    */   private final Map<Integer, BigInteger> obj;
-/*    */   
-/*    */   public ObjectiveFunctionComparator(ObjectiveFunction objf) {
-/* 19 */     this.obj = objf.toMap();
-/*    */   }
-/*    */   
-/*    */   public int compare(Integer o1, Integer o2) {
-/* 23 */     BigInteger b1 = this.obj.get(o1);
-/* 24 */     BigInteger b2 = this.obj.get(o2);
-/* 25 */     if (b2 == null) {
-/* 26 */       if (b1 == null) {
-/* 27 */         return 0;
-/*    */       }
-/* 29 */       return -b1.intValue();
-/*    */     } 
-/* 31 */     return b2.compareTo(b1);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\ObjectiveFunctionComparator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/OptToPBSATAdapter.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/OptToPBSATAdapter.java
deleted file mode 100644
index 44077c4c352872569ff69ff667f26fedadf2f3d2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/OptToPBSATAdapter.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb;
-/*     */ 
-/*     */ import java.io.PrintWriter;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IOptimizationProblem;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.tools.SolutionFoundListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class OptToPBSATAdapter
-/*     */   extends PBSolverDecorator
-/*     */ {
-/*     */   IOptimizationProblem problem;
-/*  56 */   private final IVecInt assumps = (IVecInt)new VecInt();
-/*     */   
-/*     */   private long begin;
-/*     */   
-/*     */   private SolutionFoundListener sfl;
-/*     */   
-/*     */   public OptToPBSATAdapter(IOptimizationProblem problem) {
-/*  63 */     this(problem, SolutionFoundListener.VOID);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public OptToPBSATAdapter(IOptimizationProblem problem, SolutionFoundListener sfl) {
-/*  68 */     super((IPBSolver)problem);
-/*  69 */     this.problem = problem;
-/*  70 */     this.sfl = sfl;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable() throws TimeoutException {
-/*  75 */     return isSatisfiable(VecInt.EMPTY);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt myAssumps, boolean global) throws TimeoutException {
-/*  86 */     return isSatisfiable(myAssumps);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt myAssumps) throws TimeoutException {
-/*  91 */     this.assumps.clear();
-/*  92 */     myAssumps.copyTo(this.assumps);
-/*  93 */     this.begin = System.currentTimeMillis();
-/*  94 */     if (this.problem.hasNoObjectiveFunction()) {
-/*  95 */       return this.problem.isSatisfiable(myAssumps);
-/*     */     }
-/*  97 */     boolean satisfiable = false;
-/*     */     try {
-/*  99 */       while (this.problem.admitABetterSolution(myAssumps)) {
-/* 100 */         satisfiable = true;
-/* 101 */         this.sfl.onSolutionFound(this.problem.model());
-/* 102 */         this.problem.discardCurrentSolution();
-/* 103 */         if (isVerbose()) {
-/* 104 */           System.out.println(getLogPrefix() + "Current objective function value: " + this.problem
-/*     */               
-/* 106 */               .getObjectiveValue() + "(" + ((
-/* 107 */               System.currentTimeMillis() - this.begin) / 1000.0D) + "s)");
-/*     */         }
-/*     */       } 
-/*     */       
-/* 111 */       expireTimeout();
-/* 112 */       this.sfl.onUnsatTermination();
-/* 113 */       if (isVerbose()) {
-/* 114 */         System.out.println(getLogPrefix() + "Optimal objective function value: " + this.problem
-/*     */             
-/* 116 */             .getObjectiveValue() + "(" + ((
-/* 117 */             System.currentTimeMillis() - this.begin) / 1000.0D) + "s)");
-/*     */       }
-/*     */     }
-/* 120 */     catch (TimeoutException e) {
-/* 121 */       if (isVerbose()) {
-/* 122 */         System.out.println(getLogPrefix() + "Solver timed out after " + ((
-/* 123 */             System.currentTimeMillis() - this.begin) / 1000.0D) + "s)");
-/*     */       }
-/*     */       
-/* 126 */       if (!satisfiable) {
-/* 127 */         throw e;
-/*     */       }
-/* 129 */     } catch (ContradictionException ce) {
-/* 130 */       expireTimeout();
-/* 131 */       this.sfl.onUnsatTermination();
-/*     */     } 
-/* 133 */     return satisfiable;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] model() {
-/* 154 */     return model(new PrintWriter(System.out, true));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] model(PrintWriter out) {
-/* 166 */     return this.problem.model();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean model(int var) {
-/* 171 */     return this.problem.model(var);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\OptToPBSATAdapter.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/PBSolverDecorator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/PBSolverDecorator.java
deleted file mode 100644
index 6987021e1aa782a472e7577232c78acaec05acbd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/PBSolverDecorator.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb;
-/*    */ 
-/*    */ import java.math.BigInteger;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.tools.SolverDecorator;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class PBSolverDecorator
-/*    */   extends SolverDecorator<IPBSolver>
-/*    */   implements IPBSolver
-/*    */ {
-/*    */   public PBSolverDecorator(IPBSolver solver) {
-/* 55 */     super(solver);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public IConstr addPseudoBoolean(IVecInt lits, IVec<BigInteger> coeffs, boolean moreThan, BigInteger d) throws ContradictionException {
-/* 60 */     return ((IPBSolver)decorated()).addPseudoBoolean(lits, coeffs, moreThan, d);
-/*    */   }
-/*    */   
-/*    */   public void setObjectiveFunction(ObjectiveFunction obj) {
-/* 64 */     ((IPBSolver)decorated()).setObjectiveFunction(obj);
-/*    */   }
-/*    */   
-/*    */   public ObjectiveFunction getObjectiveFunction() {
-/* 68 */     return ((IPBSolver)decorated()).getObjectiveFunction();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public IConstr addAtMost(IVecInt literals, IVecInt coeffs, int degree) throws ContradictionException {
-/* 73 */     return ((IPBSolver)decorated()).addAtMost(literals, coeffs, degree);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public IConstr addAtLeast(IVecInt literals, IVecInt coeffs, int degree) throws ContradictionException {
-/* 83 */     return ((IPBSolver)decorated()).addAtLeast(literals, coeffs, degree);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\PBSolverDecorator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/PseudoOptDecorator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/PseudoOptDecorator.java
deleted file mode 100644
index a8c55abd30d7a0feb015aba8ac126bc163e56082..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/PseudoOptDecorator.java
+++ /dev/null
@@ -1,353 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IOptimizationProblem;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.RandomAccessModel;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class PseudoOptDecorator
-/*     */   extends PBSolverDecorator
-/*     */   implements IOptimizationProblem
-/*     */ {
-/*     */   protected BigInteger objectiveValue;
-/*     */   private int[] prevmodel;
-/*     */   private int[] prevmodelwithadditionalvars;
-/*     */   private boolean[] prevfullmodel;
-/*     */   private IVecInt prevModelBlockingClause;
-/*     */   private IConstr previousPBConstr;
-/*     */   private boolean isSolutionOptimal;
-/*     */   private final boolean nonOptimalMeansSatisfiable;
-/*     */   private final boolean useAnImplicantForEvaluation;
-/*  72 */   private int solverTimeout = Integer.MAX_VALUE;
-/*     */   
-/*  74 */   private int optimizationTimeout = -1;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public PseudoOptDecorator(IPBSolver solver) {
-/*  84 */     this(solver, true);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public PseudoOptDecorator(IPBSolver solver, boolean nonOptimalMeansSatisfiable) {
-/*  99 */     this(solver, nonOptimalMeansSatisfiable, false);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public PseudoOptDecorator(IPBSolver solver, boolean nonOptimalMeansSatisfiable, boolean useAnImplicantForEvaluation) {
-/* 119 */     super(solver);
-/* 120 */     this.nonOptimalMeansSatisfiable = nonOptimalMeansSatisfiable;
-/* 121 */     this.useAnImplicantForEvaluation = useAnImplicantForEvaluation;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable() throws TimeoutException {
-/* 126 */     return isSatisfiable(VecInt.EMPTY);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps, boolean global) throws TimeoutException {
-/* 137 */     boolean result = super.isSatisfiable(assumps, global);
-/* 138 */     if (result) {
-/* 139 */       this.prevmodel = super.model();
-/* 140 */       this.prevModelBlockingClause = createBlockingClauseForCurrentModel();
-/* 141 */       this.prevmodelwithadditionalvars = super.modelWithInternalVariables();
-/* 142 */       this.prevfullmodel = new boolean[nVars()];
-/* 143 */       for (int i = 0; i < nVars(); i++) {
-/* 144 */         this.prevfullmodel[i] = ((IPBSolver)decorated()).model(i + 1);
-/*     */       }
-/* 146 */       if (this.optimizationTimeout > 0) {
-/* 147 */         expireTimeout();
-/* 148 */         super.setTimeout(this.optimizationTimeout);
-/*     */       } 
-/*     */     } else {
-/*     */       
-/* 152 */       if (this.previousPBConstr != null) {
-/* 153 */         ((IPBSolver)decorated()).removeConstr(this.previousPBConstr);
-/* 154 */         this.previousPBConstr = null;
-/*     */       } 
-/* 156 */       super.setTimeout(this.solverTimeout);
-/*     */     } 
-/* 158 */     return result;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
-/* 163 */     return isSatisfiable(assumps, false);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void setObjectiveFunction(ObjectiveFunction objf) {
-/* 168 */     ((IPBSolver)decorated()).setObjectiveFunction(objf);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean admitABetterSolution(IVecInt assumps) throws TimeoutException {
-/*     */     try {
-/* 178 */       this.isSolutionOptimal = false;
-/* 179 */       boolean result = super.isSatisfiable(assumps, true);
-/* 180 */       if (result) {
-/* 181 */         if (this.useAnImplicantForEvaluation) {
-/* 182 */           this.prevmodel = modelWithAdaptedNonPrimeLiterals();
-/*     */         } else {
-/*     */           
-/* 185 */           this.prevmodel = super.model();
-/*     */         } 
-/* 187 */         this.prevModelBlockingClause = createBlockingClauseForCurrentModel();
-/* 188 */         this.prevmodelwithadditionalvars = super.modelWithInternalVariables();
-/* 189 */         this.prevfullmodel = new boolean[nVars()];
-/* 190 */         for (int i = 0; i < nVars(); i++) {
-/* 191 */           this.prevfullmodel[i] = ((IPBSolver)decorated()).model(i + 1);
-/*     */         }
-/* 193 */         if (((IPBSolver)decorated()).getObjectiveFunction() != null) {
-/* 194 */           calculateObjective();
-/*     */         }
-/* 196 */         if (this.optimizationTimeout > 0) {
-/* 197 */           expireTimeout();
-/* 198 */           super.setTimeout(this.optimizationTimeout);
-/*     */         } 
-/*     */       } else {
-/* 201 */         this.isSolutionOptimal = true;
-/* 202 */         if (this.previousPBConstr != null) {
-/* 203 */           ((IPBSolver)decorated()).removeConstr(this.previousPBConstr);
-/* 204 */           this.previousPBConstr = null;
-/*     */         } 
-/*     */       } 
-/* 207 */       return result;
-/* 208 */     } catch (TimeoutException te) {
-/* 209 */       if (this.previousPBConstr != null) {
-/* 210 */         ((IPBSolver)decorated()).removeConstr(this.previousPBConstr);
-/* 211 */         this.previousPBConstr = null;
-/*     */       } 
-/* 213 */       throw te;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private int[] modelWithAdaptedNonPrimeLiterals() {
-/* 219 */     int[] completeModel = new int[nVars()];
-/*     */     
-/* 221 */     for (int i = 0; i < nVars(); i++) {
-/* 222 */       int var = i + 1;
-/* 223 */       completeModel[i] = super.model(var) ? var : -var;
-/*     */     } 
-/* 225 */     primeImplicant();
-/* 226 */     ObjectiveFunction obj = getObjectiveFunction();
-/* 227 */     for (int j = 0; j < obj.getVars().size(); j++) {
-/* 228 */       int d = obj.getVars().get(j);
-/* 229 */       BigInteger coeff = (BigInteger)obj.getCoeffs().get(j);
-/* 230 */       if (d <= nVars() && !primeImplicant(d) && !primeImplicant(-d)) {
-/*     */ 
-/*     */         
-/* 233 */         assert Math.abs(completeModel[Math.abs(d) - 1]) == d;
-/* 234 */         if (coeff.signum() * d < 0) {
-/* 235 */           completeModel[Math.abs(d) - 1] = Math.abs(d);
-/*     */         } else {
-/* 237 */           completeModel[Math.abs(d) - 1] = -Math.abs(d);
-/*     */         } 
-/*     */       } 
-/*     */     } 
-/* 241 */     return completeModel;
-/*     */   }
-/*     */   
-/*     */   public boolean hasNoObjectiveFunction() {
-/* 245 */     return (((IPBSolver)decorated()).getObjectiveFunction() == null);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Number calculateObjective() {
-/* 253 */     if (((IPBSolver)decorated()).getObjectiveFunction() == null) {
-/* 254 */       throw new UnsupportedOperationException("The problem does not contain an objective function");
-/*     */     }
-/*     */     
-/* 257 */     if (this.useAnImplicantForEvaluation) {
-/* 258 */       this
-/* 259 */         .objectiveValue = ((IPBSolver)decorated()).getObjectiveFunction().calculateDegreeImplicant(decorated());
-/*     */     } else {
-/* 261 */       this
-/* 262 */         .objectiveValue = ((IPBSolver)decorated()).getObjectiveFunction().calculateDegree((RandomAccessModel)decorated());
-/*     */     } 
-/* 264 */     return getObjectiveValue();
-/*     */   }
-/*     */   
-/*     */   public void discardCurrentSolution() throws ContradictionException {
-/* 268 */     if (this.previousPBConstr != null) {
-/* 269 */       removeSubsumedConstr(this.previousPBConstr);
-/*     */     }
-/* 271 */     if (((IPBSolver)decorated()).getObjectiveFunction() != null && this.objectiveValue != null)
-/*     */     {
-/* 273 */       this.previousPBConstr = addPseudoBoolean(((IPBSolver)
-/* 274 */           decorated()).getObjectiveFunction().getVars(), ((IPBSolver)
-/* 275 */           decorated()).getObjectiveFunction().getCoeffs(), false, this.objectiveValue
-/* 276 */           .subtract(BigInteger.ONE));
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void reset() {
-/* 282 */     this.previousPBConstr = null;
-/* 283 */     super.reset();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] model() {
-/* 289 */     if (this.prevmodel.length <= nVars()) {
-/* 290 */       return this.prevmodel;
-/*     */     }
-/* 292 */     throw new RuntimeException("New variables have been added since the last model found");
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean model(int var) {
-/* 298 */     return this.prevfullmodel[var - 1];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Number getObjectiveValue() {
-/* 312 */     BigInteger offset = ((IPBSolver)decorated()).getObjectiveFunction().getCorrectionOffset();
-/*     */     
-/* 314 */     BigInteger factor = ((IPBSolver)decorated()).getObjectiveFunction().getCorrectionFactor();
-/* 315 */     return this.objectiveValue.multiply(factor).add(offset);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] modelWithInternalVariables() {
-/* 335 */     return this.prevmodelwithadditionalvars;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setTimeout(int t) {
-/* 344 */     this.solverTimeout = t;
-/* 345 */     super.setTimeout(t);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\PseudoOptDecorator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/SolverFactory.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/SolverFactory.java
deleted file mode 100644
index e5562b4caa72926df5abb9dc2c9cf994f3aaa875..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/SolverFactory.java
+++ /dev/null
@@ -1,1115 +0,0 @@
-/*      */ package net.fabricmc.loader.impl.lib.sat4j.pb;
-/*      */ 
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.core.ASolverFactory;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IOrder;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IPhaseSelectionStrategy;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.LearningStrategy;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.RestartStrategy;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Solver;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.VarActivityListener;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.learning.MiniSATLearning;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.restarts.ArminRestarts;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.minisat.restarts.Glucose21Restarts;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.pb.constraints.CompetResolutionPBLongMixedWLClauseCardConstrDataStructure;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.pb.core.PBDataStructureFactory;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.pb.core.PBSolver;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.pb.core.PBSolverResolution;
-/*      */ import net.fabricmc.loader.impl.lib.sat4j.pb.orders.VarOrderHeapObjective;
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ public final class SolverFactory
-/*      */   extends ASolverFactory<IPBSolver>
-/*      */ {
-/*      */   public static PBSolverResolution newCompetPBResLongWLMixedConstraintsObjectiveExpSimp() {
-/*  357 */     return newCompetPBResMixedConstraintsObjectiveExpSimp((PBDataStructureFactory)new CompetResolutionPBLongMixedWLClauseCardConstrDataStructure());
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public static PBSolverResolution newCompetPBResMixedConstraintsObjectiveExpSimp(PBDataStructureFactory dsf) {
-/*  368 */     MiniSATLearning<PBDataStructureFactory> learning = new MiniSATLearning();
-/*  369 */     PBSolverResolution solver = new PBSolverResolution((LearningStrategy)learning, dsf, (IOrder)new VarOrderHeapObjective((IPhaseSelectionStrategy)new RSATPhaseSelectionStrategy()), (RestartStrategy)new ArminRestarts());
-/*      */ 
-/*      */     
-/*  372 */     learning.setDataStructureFactory(solver.getDSFactory());
-/*  373 */     learning.setVarActivityListener((VarActivityListener)solver);
-/*  374 */     solver.setSimplifier(solver.EXPENSIVE_SIMPLIFICATION);
-/*  375 */     return solver;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public static PBSolverResolution newResolutionGlucose() {
-/*  965 */     PBSolverResolution solver = newCompetPBResLongWLMixedConstraintsObjectiveExpSimp();
-/*  966 */     solver.setSimplifier(Solver.NO_SIMPLIFICATION);
-/*  967 */     solver.setRestartStrategy((RestartStrategy)new Glucose21Restarts());
-/*  968 */     solver.setLearnedConstraintsDeletionStrategy(solver.lbd_based);
-/*  969 */     return solver;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public static PBSolverResolution newResolutionGlucose21() {
-/*  982 */     PBSolverResolution solver = newResolutionGlucose();
-/*  983 */     solver.setRestartStrategy((RestartStrategy)new Glucose21Restarts());
-/*  984 */     return solver;
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public static PBSolver newDefault() {
-/* 1067 */     return (PBSolver)newResolutionGlucose21();
-/*      */   }
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */ 
-/*      */   
-/*      */   public static IPBSolver newDefaultOptimizer() {
-/* 1107 */     return new OptToPBSATAdapter(new PseudoOptDecorator((IPBSolver)newDefault()));
-/*      */   }
-/*      */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\SolverFactory.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/AbstractPBClauseCardConstrDataStructure.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/AbstractPBClauseCardConstrDataStructure.java
deleted file mode 100644
index a3937aa4dc8c408ad6991cd9c0ec686b6e88b619..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/AbstractPBClauseCardConstrDataStructure.java
+++ /dev/null
@@ -1,277 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Clauses;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class AbstractPBClauseCardConstrDataStructure
-/*     */   extends AbstractPBDataStructureFactory
-/*     */ {
-/*  54 */   static final BigInteger MAX_INT_VALUE = BigInteger.valueOf(2147483647L);
-/*     */   
-/*     */   private final IPBConstructor ipbc;
-/*     */   
-/*     */   private final ICardConstructor icardc;
-/*     */   private final IClauseConstructor iclausec;
-/*     */   
-/*     */   AbstractPBClauseCardConstrDataStructure(IClauseConstructor iclausec, ICardConstructor icardc, IPBConstructor ipbc) {
-/*  62 */     this.iclausec = iclausec;
-/*  63 */     this.icardc = icardc;
-/*  64 */     this.ipbc = ipbc;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Constr createClause(IVecInt literals) throws ContradictionException {
-/*  69 */     IVecInt v = Clauses.sanityCheck(literals, getVocabulary(), this.solver);
-/*  70 */     return constructClause(v);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Constr createUnregisteredClause(IVecInt literals) {
-/*  75 */     return constructLearntClause(literals);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Constr createCardinalityConstraint(IVecInt literals, int degree) throws ContradictionException {
-/*  81 */     return constructCard(literals, degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected Constr constraintFactory(int[] literals, BigInteger[] coefs, BigInteger degree) throws ContradictionException {
-/* 100 */     if (literals.length == 0 && degree.signum() <= 0) {
-/* 101 */       return Constr.TAUTOLOGY;
-/*     */     }
-/* 103 */     if (degree.equals(BigInteger.ONE)) {
-/* 104 */       IVecInt v = Clauses.sanityCheck((IVecInt)new VecInt(literals), 
-/* 105 */           getVocabulary(), this.solver);
-/* 106 */       if (v == Constr.TAUTOLOGY) {
-/* 107 */         return null;
-/*     */       }
-/* 109 */       return constructClause(v);
-/*     */     } 
-/* 111 */     if (coefficientsEqualTo(BigInteger.ONE, coefs)) {
-/* 112 */       assert degree.compareTo(MAX_INT_VALUE) < 0;
-/* 113 */       return constructCard((IVecInt)new VecInt(literals), degree.intValue());
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 135 */     return constructPB(literals, coefs, degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   static boolean coefficientsEqualTo(BigInteger value, BigInteger[] coefs) {
-/* 216 */     for (int i = 0; i < coefs.length; i++) {
-/* 217 */       if (!coefs[i].equals(value)) {
-/* 218 */         return false;
-/*     */       }
-/*     */     } 
-/* 221 */     return true;
-/*     */   }
-/*     */   
-/*     */   protected Constr constructClause(IVecInt v) {
-/* 225 */     return this.iclausec.constructClause(this.solver, getVocabulary(), v);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   protected Constr constructCard(IVecInt theLits, int degree) throws ContradictionException {
-/* 230 */     return this.icardc.constructCard(this.solver, getVocabulary(), theLits, degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected Constr constructPB(int[] theLits, BigInteger[] coefs, BigInteger degree) throws ContradictionException {
-/* 236 */     return this.ipbc.constructPB(this.solver, getVocabulary(), theLits, coefs, degree, 
-/* 237 */         sumOfCoefficients(coefs));
-/*     */   }
-/*     */   
-/*     */   protected Constr constructLearntClause(IVecInt literals) {
-/* 241 */     return this.iclausec.constructLearntClause(getVocabulary(), literals);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static final BigInteger sumOfCoefficients(BigInteger[] coefs) {
-/* 265 */     BigInteger sumCoefs = BigInteger.ZERO;
-/* 266 */     for (BigInteger c : coefs) {
-/* 267 */       sumCoefs = sumCoefs.add(c);
-/*     */     }
-/* 269 */     return sumCoefs;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\AbstractPBClauseCardConstrDataStructure.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/AbstractPBDataStructureFactory.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/AbstractPBDataStructureFactory.java
deleted file mode 100644
index 0db8c70fe887859ab5767d5731cd0d758d7cb914..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/AbstractPBDataStructureFactory.java
+++ /dev/null
@@ -1,268 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.AbstractDataStructureFactory;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Clauses;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.LearntBinaryClause;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.LearntHTClause;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Lits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.OriginalHTClause;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.UnitClause;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb.AtLeastPB;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb.IDataStructurePB;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb.Pseudos;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.core.PBDataStructureFactory;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class AbstractPBDataStructureFactory
-/*     */   extends AbstractDataStructureFactory
-/*     */   implements PBDataStructureFactory
-/*     */ {
-/*  71 */   public static final INormalizer FOR_COMPETITION = new INormalizer()
-/*     */     {
-/*     */       
-/*     */       public PBContainer nice(IVecInt literals, IVec<BigInteger> coefs, boolean moreThan, BigInteger degree, ILits voc) throws ContradictionException
-/*     */       {
-/*  76 */         if (literals.size() != coefs.size()) {
-/*  77 */           throw new IllegalArgumentException("Number of coeff and literals are different!!!");
-/*     */         }
-/*     */         
-/*  80 */         VecInt vecInt = new VecInt(literals.size());
-/*  81 */         literals.copyTo((IVecInt)vecInt);
-/*  82 */         Vec vec = new Vec(literals.size());
-/*  83 */         coefs.copyTo((IVec)vec);
-/*  84 */         for (int i = 0; i < vecInt.size(); ) {
-/*  85 */           if (((BigInteger)vec.get(i)).equals(BigInteger.ZERO)) {
-/*  86 */             vecInt.delete(i);
-/*  87 */             vec.delete(i); continue;
-/*     */           } 
-/*  89 */           if (voc.isSatisfied(vecInt.get(i))) {
-/*  90 */             degree = degree.subtract((BigInteger)vec.get(i));
-/*  91 */             vecInt.delete(i);
-/*  92 */             vec.delete(i); continue;
-/*     */           } 
-/*  94 */           if (voc.isFalsified(vecInt.get(i))) {
-/*  95 */             vecInt.delete(i);
-/*  96 */             vec.delete(i); continue;
-/*     */           } 
-/*  98 */           i++;
-/*     */         } 
-/*     */ 
-/*     */         
-/* 102 */         int[] theLits = new int[vecInt.size()];
-/* 103 */         vecInt.copyTo(theLits);
-/* 104 */         BigInteger[] normCoefs = new BigInteger[vec.size()];
-/* 105 */         vec.copyTo((Object[])normCoefs);
-/* 106 */         BigInteger degRes = Pseudos.niceParametersForCompetition(theLits, normCoefs, moreThan, degree);
-/*     */         
-/* 108 */         return new PBContainer(theLits, normCoefs, degRes);
-/*     */       }
-/*     */     };
-/*     */ 
-/*     */ 
-/*     */   
-/* 114 */   public static final INormalizer NO_COMPETITION = new INormalizer()
-/*     */     {
-/*     */       
-/*     */       public PBContainer nice(IVecInt literals, IVec<BigInteger> coefs, boolean moreThan, BigInteger degree, ILits voc) throws ContradictionException
-/*     */       {
-/* 119 */         VecInt vecInt = new VecInt(literals.size());
-/* 120 */         literals.copyTo((IVecInt)vecInt);
-/* 121 */         Vec vec = new Vec(literals.size());
-/* 122 */         coefs.copyTo((IVec)vec);
-/* 123 */         for (int i = 0; i < vecInt.size(); ) {
-/* 124 */           if (voc.isSatisfied(vecInt.get(i))) {
-/* 125 */             degree = degree.subtract((BigInteger)vec.get(i));
-/* 126 */             vecInt.delete(i);
-/* 127 */             vec.delete(i); continue;
-/*     */           } 
-/* 129 */           if (voc.isFalsified(vecInt.get(i))) {
-/* 130 */             vecInt.delete(i);
-/* 131 */             vec.delete(i); continue;
-/*     */           } 
-/* 133 */           i++;
-/*     */         } 
-/*     */         
-/* 136 */         IDataStructurePB res = Pseudos.niceParameters((IVecInt)vecInt, (IVec)vec, moreThan, degree, voc);
-/*     */         
-/* 138 */         int size = res.size();
-/* 139 */         int[] theLits = new int[size];
-/* 140 */         BigInteger[] theCoefs = new BigInteger[size];
-/* 141 */         res.buildConstraintFromMapPb(theLits, theCoefs);
-/* 142 */         BigInteger theDegree = res.getDegree();
-/* 143 */         return new PBContainer(theLits, theCoefs, theDegree);
-/*     */       }
-/*     */     };
-/*     */   
-/* 147 */   private INormalizer norm = FOR_COMPETITION;
-/*     */   
-/*     */   protected INormalizer getNormalizer() {
-/* 150 */     return this.norm;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Constr createClause(IVecInt literals) throws ContradictionException {
-/* 175 */     IVecInt v = Clauses.sanityCheck(literals, getVocabulary(), this.solver);
-/* 176 */     if (v == null)
-/*     */     {
-/* 178 */       return null;
-/*     */     }
-/* 180 */     if (v.size() == 1) {
-/* 181 */       return (Constr)new UnitClause(v.last());
-/*     */     }
-/* 183 */     if (v.size() == 2) {
-/* 184 */       return (Constr)OriginalBinaryClause.brandNewClause(this.solver, 
-/* 185 */           getVocabulary(), v);
-/*     */     }
-/* 187 */     return (Constr)OriginalHTClause.brandNewClause(this.solver, getVocabulary(), v);
-/*     */   }
-/*     */   
-/*     */   public Constr createUnregisteredClause(IVecInt literals) {
-/* 191 */     if (literals.size() == 1) {
-/* 192 */       return (Constr)new UnitClause(literals.last(), true);
-/*     */     }
-/* 194 */     if (literals.size() == 2) {
-/* 195 */       return (Constr)new LearntBinaryClause(literals, getVocabulary());
-/*     */     }
-/* 197 */     return (Constr)new LearntHTClause(literals, getVocabulary());
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Constr createCardinalityConstraint(IVecInt literals, int degree) throws ContradictionException {
-/* 203 */     return (Constr)AtLeastPB.atLeastNew(this.solver, getVocabulary(), literals, degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Constr createPseudoBooleanConstraint(IVecInt literals, IVec<BigInteger> coefs, boolean moreThan, BigInteger degree) throws ContradictionException {
-/* 210 */     PBContainer res = getNormalizer().nice(literals, coefs, moreThan, degree, 
-/* 211 */         getVocabulary());
-/* 212 */     return constraintFactory(res.lits, res.coefs, res.degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected abstract Constr constraintFactory(int[] paramArrayOfint, BigInteger[] paramArrayOfBigInteger, BigInteger paramBigInteger) throws ContradictionException;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected ILits createLits() {
-/* 256 */     return (ILits)new Lits();
-/*     */   }
-/*     */   
-/*     */   static interface INormalizer {
-/*     */     PBContainer nice(IVecInt param1IVecInt, IVec<BigInteger> param1IVec, boolean param1Boolean, BigInteger param1BigInteger, ILits param1ILits) throws ContradictionException;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\AbstractPBDataStructureFactory.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/CompetResolutionPBLongMixedWLClauseCardConstrDataStructure.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/CompetResolutionPBLongMixedWLClauseCardConstrDataStructure.java
deleted file mode 100644
index 39548cf737edf5c61fefc7a983e75c8f469a0e07..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/CompetResolutionPBLongMixedWLClauseCardConstrDataStructure.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class CompetResolutionPBLongMixedWLClauseCardConstrDataStructure
-/*    */   extends AbstractPBClauseCardConstrDataStructure
-/*    */ {
-/*    */   public CompetResolutionPBLongMixedWLClauseCardConstrDataStructure() {
-/* 41 */     super(new UnitBinaryWLClauseConstructor(), new MinCardConstructor(), new MaxLongWatchPBConstructor());
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\CompetResolutionPBLongMixedWLClauseCardConstrDataStructure.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/ICardConstructor.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/ICardConstructor.java
deleted file mode 100644
index b33137f74041db727976ad8ad9cd8773c4452d00..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/ICardConstructor.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-
-import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-
-public interface ICardConstructor {
-  Constr constructCard(UnitPropagationListener paramUnitPropagationListener, ILits paramILits, IVecInt paramIVecInt, int paramInt) throws ContradictionException;
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\ICardConstructor.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/IClauseConstructor.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/IClauseConstructor.java
deleted file mode 100644
index 5727337e6217480eb9baa8c1fd21b424775992f3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/IClauseConstructor.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-
-import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-
-public interface IClauseConstructor {
-  Constr constructClause(UnitPropagationListener paramUnitPropagationListener, ILits paramILits, IVecInt paramIVecInt);
-  
-  Constr constructLearntClause(ILits paramILits, IVecInt paramIVecInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\IClauseConstructor.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/IPBConstructor.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/IPBConstructor.java
deleted file mode 100644
index 7b24b89809ca4eba205ef9dfe2bbf8411e8d961c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/IPBConstructor.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-
-import java.math.BigInteger;
-import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-
-public interface IPBConstructor {
-  Constr constructPB(UnitPropagationListener paramUnitPropagationListener, ILits paramILits, int[] paramArrayOfint, BigInteger[] paramArrayOfBigInteger, BigInteger paramBigInteger1, BigInteger paramBigInteger2) throws ContradictionException;
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\IPBConstructor.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/MaxLongWatchPBConstructor.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/MaxLongWatchPBConstructor.java
deleted file mode 100644
index cdc01c059ca00d2c9c7e6321a0f13ac565ade508..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/MaxLongWatchPBConstructor.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-/*    */ 
-/*    */ import java.math.BigInteger;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb.MaxWatchPb;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb.MaxWatchPbLong;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class MaxLongWatchPBConstructor
-/*    */   implements IPBConstructor
-/*    */ {
-/*    */   public Constr constructPB(UnitPropagationListener solver, ILits voc, int[] theLits, BigInteger[] coefs, BigInteger degree, BigInteger sumCoefs) throws ContradictionException {
-/*    */     MaxWatchPb maxWatchPb;
-/* 55 */     if (sumCoefs.bitLength() < 64) {
-/* 56 */       MaxWatchPbLong maxWatchPbLong = MaxWatchPbLong.normalizedMaxWatchPbNew(solver, voc, theLits, coefs, degree, sumCoefs);
-/*    */     } else {
-/*    */       
-/* 59 */       maxWatchPb = MaxWatchPb.normalizedMaxWatchPbNew(solver, voc, theLits, coefs, degree, sumCoefs);
-/*    */     } 
-/*    */     
-/* 62 */     if (maxWatchPb == null) {
-/* 63 */       return Constr.TAUTOLOGY;
-/*    */     }
-/* 65 */     return (Constr)maxWatchPb;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\MaxLongWatchPBConstructor.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/MinCardConstructor.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/MinCardConstructor.java
deleted file mode 100644
index 5ae60d4fa28997318ff760a200669fb68a57eed3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/MinCardConstructor.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.card.MinWatchCard;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class MinCardConstructor
-/*    */   implements ICardConstructor
-/*    */ {
-/*    */   public Constr constructCard(UnitPropagationListener solver, ILits voc, IVecInt theLits, int degree) throws ContradictionException {
-/* 50 */     Constr constr = MinWatchCard.minWatchCardNew(solver, voc, theLits, true, degree);
-/*    */     
-/* 52 */     if (constr == null) {
-/* 53 */       return Constr.TAUTOLOGY;
-/*    */     }
-/* 55 */     return constr;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\MinCardConstructor.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/PBContainer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/PBContainer.java
deleted file mode 100644
index e06674eecee28b10a9ffc7578e2476a3d85552e5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/PBContainer.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-/*    */ 
-/*    */ import java.math.BigInteger;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ final class PBContainer
-/*    */ {
-/*    */   final int[] lits;
-/*    */   final BigInteger[] coefs;
-/*    */   final BigInteger degree;
-/*    */   
-/*    */   PBContainer(int[] lits, BigInteger[] coefs, BigInteger degree) {
-/* 40 */     this.lits = lits;
-/* 41 */     this.coefs = coefs;
-/* 42 */     this.degree = degree;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\PBContainer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/UnitBinaryWLClauseConstructor.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/UnitBinaryWLClauseConstructor.java
deleted file mode 100644
index ec50743f3500cc4993e6c0bfe8c8a03e973a0939..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/UnitBinaryWLClauseConstructor.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.LearntBinaryClause;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.LearntWLClause;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.OriginalWLClause;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.UnitClause;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class UnitBinaryWLClauseConstructor
-/*    */   implements IClauseConstructor
-/*    */ {
-/*    */   public Constr constructClause(UnitPropagationListener solver, ILits voc, IVecInt v) {
-/* 46 */     if (v == null)
-/*    */     {
-/* 48 */       return Constr.TAUTOLOGY;
-/*    */     }
-/* 50 */     if (v.size() == 1) {
-/* 51 */       return (Constr)new UnitClause(v.last());
-/*    */     }
-/* 53 */     if (v.size() == 2) {
-/* 54 */       return (Constr)OriginalBinaryClause.brandNewClause(solver, voc, v);
-/*    */     }
-/* 56 */     return (Constr)OriginalWLClause.brandNewClause(solver, voc, v);
-/*    */   }
-/*    */   
-/*    */   public Constr constructLearntClause(ILits voc, IVecInt literals) {
-/* 60 */     if (literals.size() == 1) {
-/* 61 */       return (Constr)new UnitClause(literals.last(), true);
-/*    */     }
-/* 63 */     if (literals.size() == 2) {
-/* 64 */       return (Constr)new LearntBinaryClause(literals, voc);
-/*    */     }
-/* 66 */     return (Constr)new LearntWLClause(literals, voc);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\UnitBinaryWLClauseConstructor.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/AtLeastPB.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/AtLeastPB.java
deleted file mode 100644
index 3359fcb8f4ebf713fad3d97580971e1730058ec3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/AtLeastPB.java
+++ /dev/null
@@ -1,142 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.card.AtLeast;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class AtLeastPB
-/*     */   extends AtLeast
-/*     */   implements PBConstr
-/*     */ {
-/*     */   private final BigInteger degree;
-/*     */   private boolean learnt;
-/*     */   
-/*     */   public static PBConstr atLeastNew(UnitPropagationListener s, ILits voc, IVecInt ps, int n) throws ContradictionException {
-/*     */     int degree = niceParameters(s, voc, ps, n);
-/*     */     if (degree == 0)
-/*     */       return new UnitClausesPB(ps); 
-/*     */     if (degree == 1) {
-/*     */       if (ps.size() == 2)
-/*     */         return OriginalBinaryClausePB.brandNewClause(s, voc, ps); 
-/*     */       return OriginalHTClausePB.brandNewClause(s, voc, ps);
-/*     */     } 
-/*     */     return atLeastNew(voc, ps, degree);
-/*     */   }
-/*     */   
-/*     */   private AtLeastPB(ILits voc, IVecInt ps, int degree) {
-/*  51 */     super(voc, ps, degree);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 105 */     this.learnt = false;
-/*     */     this.degree = BigInteger.valueOf(degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean learnt() {
-/* 115 */     return this.learnt; } public static AtLeastPB atLeastNew(ILits voc, IVecInt ps, int n) {
-/*     */     AtLeastPB atleast = new AtLeastPB(voc, ps, n);
-/*     */     atleast.register();
-/*     */     return atleast;
-/*     */   } public void setLearnt() {
-/* 120 */     this.learnt = true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/* 125 */     for (int i = 0; i < size(); i++) {
-/* 126 */       if (getVocabulary().isUnassigned(get(i))) {
-/* 127 */         boolean ret = s.enqueue(get(i), this);
-/* 128 */         assert ret;
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public ILits getVocabulary() {
-/*     */     return this.voc;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\AtLeastPB.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/AutoDivisionStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/AutoDivisionStrategy.java
deleted file mode 100644
index b00b069b7ca6aed180207517275211769285967b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/AutoDivisionStrategy.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public enum AutoDivisionStrategy
-/*    */ {
-/* 46 */   DISABLED
-/*    */   {
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   },
-/* 56 */   ENABLED
-/*    */   {
-/*    */   
-/*    */   };
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 86 */     return "Auto-division on coefficients is " + name().toLowerCase();
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\AutoDivisionStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/IDataStructurePB.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/IDataStructurePB.java
deleted file mode 100644
index 08e3dfb853de272d0901f8a1c7c66710c999916a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/IDataStructurePB.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*    */ 
-/*    */ import java.math.BigInteger;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public interface IDataStructurePB
-/*    */ {
-/* 41 */   public static final IDataStructurePB TAUTOLOGY = new IDataStructurePB()
-/*    */     {
-/*    */       public int size()
-/*    */       {
-/* 45 */         return 0;
-/*    */       }
-/*    */ 
-/*    */       
-/*    */       public BigInteger saturation() {
-/* 50 */         return BigInteger.ZERO;
-/*    */       }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */       
-/*    */       public BigInteger getDegree() {
-/* 70 */         return BigInteger.ZERO;
-/*    */       }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */       
-/*    */       public BigInteger cuttingPlane(int[] lits, BigInteger[] reducedCoefs, BigInteger deg) {
-/* 92 */         throw new UnsupportedOperationException();
-/*    */       }
-/*    */       
-/*    */       public void buildConstraintFromMapPb(int[] resLits, BigInteger[] resCoefs) {}
-/*    */     };
-/*    */   
-/*    */   BigInteger saturation();
-/*    */   
-/*    */   BigInteger cuttingPlane(int[] paramArrayOfint, BigInteger[] paramArrayOfBigInteger, BigInteger paramBigInteger);
-/*    */   
-/*    */   void buildConstraintFromMapPb(int[] paramArrayOfint, BigInteger[] paramArrayOfBigInteger);
-/*    */   
-/*    */   BigInteger getDegree();
-/*    */   
-/*    */   int size();
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\IDataStructurePB.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/IWatchPb.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/IWatchPb.java
deleted file mode 100644
index d8c8f5891dcacc189789dad958655f3d628c4a4d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/IWatchPb.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-
-public interface IWatchPb extends PBConstr {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\IWatchPb.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/InternalMapPBStructure.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/InternalMapPBStructure.java
deleted file mode 100644
index 83892d875cd8e5d0a31c9bda3cd028424ae68f38..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/InternalMapPBStructure.java
+++ /dev/null
@@ -1,182 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class InternalMapPBStructure
-/*     */ {
-/*     */   private final IVecInt lits;
-/*     */   private final IVec<BigInteger> coefs;
-/*     */   private IVecInt allLits;
-/*     */   
-/*     */   InternalMapPBStructure(int size) {
-/*  59 */     assert size > 0;
-/*  60 */     this.allLits = (IVecInt)new VecInt(size, -1);
-/*  61 */     this.coefs = (IVec<BigInteger>)new Vec();
-/*  62 */     this.lits = (IVecInt)new VecInt();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   BigInteger get(int lit) {
-/* 101 */     assert this.allLits.get(lit) != -1;
-/* 102 */     return (BigInteger)this.coefs.get(this.allLits.get(lit));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   int getLit(int indLit) {
-/* 110 */     assert indLit < this.lits.size();
-/* 111 */     return this.lits.get(indLit);
-/*     */   }
-/*     */   
-/*     */   BigInteger getCoef(int indLit) {
-/* 115 */     assert indLit < this.coefs.size();
-/* 116 */     return (BigInteger)this.coefs.get(indLit);
-/*     */   }
-/*     */   
-/*     */   boolean containsKey(int lit) {
-/* 120 */     return (this.allLits.get(lit) != -1);
-/*     */   }
-/*     */   
-/*     */   int size() {
-/* 124 */     return this.lits.size();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void put(int lit, BigInteger newValue) {
-/* 135 */     int indLit = this.allLits.get(lit);
-/* 136 */     if (indLit != -1) {
-/* 137 */       this.coefs.set(indLit, newValue);
-/*     */     } else {
-/* 139 */       this.lits.push(lit);
-/* 140 */       this.coefs.push(newValue);
-/* 141 */       this.allLits.set(lit, this.lits.size() - 1);
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   void changeCoef(int indLit, BigInteger newValue) {
-/* 146 */     assert indLit <= this.coefs.size();
-/* 147 */     this.coefs.set(indLit, newValue);
-/*     */   }
-/*     */   
-/*     */   void remove(int lit) {
-/* 151 */     int indLit = this.allLits.get(lit);
-/* 152 */     if (indLit != -1) {
-/* 153 */       int tmp = this.lits.last();
-/* 154 */       this.coefs.delete(indLit);
-/* 155 */       this.lits.delete(indLit);
-/* 156 */       this.allLits.set(tmp, indLit);
-/* 157 */       this.allLits.set(lit, -1);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void copyCoefs(BigInteger[] dest) {
-/* 166 */     this.coefs.copyTo((Object[])dest);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void copyLits(int[] dest) {
-/* 174 */     this.lits.copyTo(dest);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\InternalMapPBStructure.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MapPb.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MapPb.java
deleted file mode 100644
index 613b9233a5bb80a8331cfa08b69262e189ac789d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MapPb.java
+++ /dev/null
@@ -1,360 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Lits;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class MapPb
-/*     */   implements IDataStructurePB
-/*     */ {
-/*     */   protected InternalMapPBStructure weightedLits;
-/*     */   protected BigInteger degree;
-/*  54 */   protected int assertiveLiteral = -1;
-/*     */   
-/*  56 */   private int cpCardsReduction = 0;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected final AutoDivisionStrategy autoDivisionStrategy;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   MapPb(int size) {
-/*  70 */     this.weightedLits = new InternalMapPBStructure(size);
-/*  71 */     this.degree = BigInteger.ZERO;
-/*  72 */     this.autoDivisionStrategy = AutoDivisionStrategy.ENABLED;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger saturation() {
-/* 176 */     assert this.degree.signum() > 0;
-/* 177 */     BigInteger minimum = this.degree; int ind;
-/* 178 */     for (ind = 0; ind < size(); ind++) {
-/* 179 */       assert this.weightedLits.getCoef(ind).signum() >= 0;
-/* 180 */       if (this.degree.compareTo(this.weightedLits.getCoef(ind)) < 0) {
-/* 181 */         changeCoef(ind, this.degree);
-/*     */       }
-/* 183 */       assert this.weightedLits.getCoef(ind).signum() >= 0;
-/* 184 */       if (this.weightedLits.getCoef(ind).signum() > 0) {
-/* 185 */         minimum = minimum.min(this.weightedLits.getCoef(ind));
-/*     */       }
-/*     */     } 
-/* 188 */     if (minimum.equals(this.degree) && minimum
-/* 189 */       .compareTo(BigInteger.ONE) > 0) {
-/* 190 */       this.degree = BigInteger.ONE;
-/* 191 */       for (ind = 0; ind < size(); ind++) {
-/* 192 */         changeCoef(ind, BigInteger.ONE);
-/*     */       }
-/*     */     } 
-/*     */     
-/* 196 */     return this.degree;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger cuttingPlane(int[] lits, BigInteger[] reducedCoefs, BigInteger deg) {
-/* 229 */     return cuttingPlane(lits, reducedCoefs, deg, BigInteger.ONE);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public BigInteger cuttingPlane(int[] lits, BigInteger[] reducedCoefs, BigInteger degreeCons, BigInteger coefMult) {
-/* 234 */     this.degree = this.degree.add(degreeCons);
-/* 235 */     assert this.degree.signum() > 0;
-/*     */     
-/* 237 */     for (int i = 0; i < lits.length; i++) {
-/* 238 */       cuttingPlaneStep(lits[i], reducedCoefs[i].multiply(coefMult));
-/*     */     }
-/*     */     
-/* 241 */     return this.degree;
-/*     */   }
-/*     */   
-/*     */   private void cuttingPlaneStep(int lit, BigInteger coef) {
-/* 245 */     assert coef.signum() >= 0;
-/* 246 */     int nlit = lit ^ 0x1;
-/* 247 */     if (coef.signum() > 0) {
-/* 248 */       if (this.weightedLits.containsKey(nlit)) {
-/* 249 */         assert !this.weightedLits.containsKey(lit);
-/* 250 */         assert this.weightedLits.get(nlit) != null;
-/* 251 */         if (this.weightedLits.get(nlit).compareTo(coef) < 0) {
-/* 252 */           BigInteger tmp = this.weightedLits.get(nlit);
-/* 253 */           setCoef(lit, coef.subtract(tmp));
-/* 254 */           assert this.weightedLits.get(lit).signum() > 0;
-/* 255 */           this.degree = this.degree.subtract(tmp);
-/* 256 */           removeCoef(nlit);
-/*     */         }
-/* 258 */         else if (this.weightedLits.get(nlit).equals(coef)) {
-/* 259 */           this.degree = this.degree.subtract(coef);
-/* 260 */           removeCoef(nlit);
-/*     */         } else {
-/* 262 */           decreaseCoef(nlit, coef);
-/* 263 */           assert this.weightedLits.get(nlit).signum() > 0;
-/* 264 */           this.degree = this.degree.subtract(coef);
-/*     */         } 
-/*     */       } else {
-/*     */         
-/* 268 */         assert !this.weightedLits.containsKey(lit) || this.weightedLits
-/* 269 */           .get(lit).signum() > 0;
-/* 270 */         if (this.weightedLits.containsKey(lit)) {
-/* 271 */           increaseCoef(lit, coef);
-/*     */         } else {
-/* 273 */           setCoef(lit, coef);
-/*     */         } 
-/* 275 */         assert this.weightedLits.get(lit).signum() > 0;
-/*     */       } 
-/*     */     }
-/* 278 */     assert !this.weightedLits.containsKey(nlit) || 
-/* 279 */       !this.weightedLits.containsKey(lit);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void buildConstraintFromMapPb(int[] resLits, BigInteger[] resCoefs) {
-/* 296 */     assert resLits.length == resCoefs.length;
-/* 297 */     assert resLits.length == size();
-/* 298 */     this.weightedLits.copyCoefs(resCoefs);
-/* 299 */     this.weightedLits.copyLits(resLits);
-/*     */   }
-/*     */   
-/*     */   public BigInteger getDegree() {
-/* 303 */     return this.degree;
-/*     */   }
-/*     */   
-/*     */   public int size() {
-/* 307 */     return this.weightedLits.size();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 317 */     StringBuilder stb = new StringBuilder();
-/* 318 */     for (int ind = 0; ind < size(); ind++) {
-/* 319 */       stb.append(this.weightedLits.getCoef(ind));
-/* 320 */       stb.append(".");
-/* 321 */       stb.append(Lits.toString(this.weightedLits.getLit(ind)));
-/* 322 */       stb.append(" ");
-/*     */     } 
-/* 324 */     return stb.toString() + " >= " + this.degree;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void increaseCoef(int lit, BigInteger incCoef) {
-/* 335 */     this.weightedLits.put(lit, this.weightedLits.get(lit).add(incCoef));
-/*     */   }
-/*     */   
-/*     */   void decreaseCoef(int lit, BigInteger decCoef) {
-/* 339 */     this.weightedLits.put(lit, this.weightedLits
-/* 340 */         .get(lit).subtract(decCoef));
-/*     */   }
-/*     */   
-/*     */   void setCoef(int lit, BigInteger newValue) {
-/* 344 */     this.weightedLits.put(lit, newValue);
-/*     */   }
-/*     */   
-/*     */   void changeCoef(int indLit, BigInteger newValue) {
-/* 348 */     this.weightedLits.changeCoef(indLit, newValue);
-/*     */   }
-/*     */   
-/*     */   void removeCoef(int lit) {
-/* 352 */     this.weightedLits.remove(lit);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\MapPb.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MaxWatchPb.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MaxWatchPb.java
deleted file mode 100644
index c616fef5e0e49814133cb5101e51ae8ac6622ceb..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MaxWatchPb.java
+++ /dev/null
@@ -1,413 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.Map;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class MaxWatchPb
-/*     */   extends WatchPb
-/*     */ {
-/*  60 */   private BigInteger watchCumul = BigInteger.ZERO;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private final Map<Integer, BigInteger> litToCoeffs;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private MaxWatchPb(ILits voc, int[] lits, BigInteger[] coefs, BigInteger degree, BigInteger sumCoefs) {
-/* 110 */     super(lits, coefs, degree, sumCoefs);
-/* 111 */     this.voc = voc;
-/*     */     
-/* 113 */     this.activity = 0.0D;
-/* 114 */     this.watchCumul = BigInteger.ZERO;
-/* 115 */     if (coefs.length > 100) {
-/* 116 */       this.litToCoeffs = new HashMap<>(this.coefs.length);
-/*     */       
-/* 118 */       for (int i = 0; i < this.coefs.length; i++) {
-/* 119 */         this.litToCoeffs.put(Integer.valueOf(this.lits[i]), this.coefs[i]);
-/*     */       }
-/*     */     } else {
-/* 122 */       this.litToCoeffs = null;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected void computeWatches() throws ContradictionException {
-/* 133 */     assert this.watchCumul.equals(BigInteger.ZERO);
-/* 134 */     for (int i = 0; i < this.lits.length; i++) {
-/* 135 */       if (this.voc.isFalsified(this.lits[i])) {
-/* 136 */         if (this.learnt) {
-/* 137 */           this.voc.undos(this.lits[i] ^ 0x1).push(this);
-/* 138 */           this.voc.watch(this.lits[i] ^ 0x1, this);
-/*     */         } 
-/*     */       } else {
-/*     */         
-/* 142 */         this.voc.watch(this.lits[i] ^ 0x1, this);
-/* 143 */         this.watchCumul = this.watchCumul.add(this.coefs[i]);
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 147 */     assert this.watchCumul.compareTo(computeLeftSide()) >= 0;
-/* 148 */     if (!this.learnt && this.watchCumul.compareTo(this.degree) < 0) {
-/* 149 */       throw new ContradictionException("non satisfiable constraint");
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected void computePropagation(UnitPropagationListener s) throws ContradictionException {
-/* 164 */     int ind = 0;
-/* 165 */     while (ind < this.coefs.length && this.watchCumul
-/* 166 */       .subtract(this.coefs[ind]).compareTo(this.degree) < 0) {
-/* 167 */       if (this.voc.isUnassigned(this.lits[ind]) && 
-/* 168 */         !s.enqueue(this.lits[ind], this))
-/*     */       {
-/* 170 */         throw new ContradictionException("non satisfiable constraint");
-/*     */       }
-/* 172 */       ind++;
-/*     */     } 
-/* 174 */     assert this.watchCumul.compareTo(computeLeftSide()) >= 0;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/*     */     BigInteger coefP;
-/* 187 */     this.voc.watch(p, this);
-/*     */     
-/* 189 */     assert this.watchCumul.compareTo(computeLeftSide()) >= 0 : "" + this.watchCumul + "/" + 
-/* 190 */       computeLeftSide() + ":" + this.learnt;
-/*     */ 
-/*     */ 
-/*     */     
-/* 194 */     if (this.litToCoeffs == null) {
-/*     */       
-/* 196 */       int indiceP = 0;
-/* 197 */       while ((this.lits[indiceP] ^ 0x1) != p) {
-/* 198 */         indiceP++;
-/*     */       }
-/*     */ 
-/*     */       
-/* 202 */       coefP = this.coefs[indiceP];
-/*     */     } else {
-/* 204 */       coefP = this.litToCoeffs.get(Integer.valueOf(p ^ 0x1));
-/*     */     } 
-/*     */     
-/* 207 */     BigInteger newcumul = this.watchCumul.subtract(coefP);
-/*     */     
-/* 209 */     if (newcumul.compareTo(this.degree) < 0) {
-/*     */       
-/* 211 */       assert !isSatisfiable();
-/* 212 */       return false;
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 217 */     this.voc.undos(p).push(this);
-/*     */     
-/* 219 */     this.watchCumul = newcumul;
-/*     */ 
-/*     */     
-/* 222 */     int ind = 0;
-/*     */     
-/* 224 */     int trailPosition = this.voc.getTrailPosition(p);
-/*     */ 
-/*     */ 
-/*     */     
-/* 228 */     BigInteger limit = this.watchCumul.subtract(this.degree);
-/*     */     
-/* 230 */     while (ind < this.coefs.length && limit
-/* 231 */       .compareTo(this.coefs[ind]) < 0) {
-/*     */       
-/* 233 */       int lit = this.lits[ind];
-/* 234 */       if (this.voc.isFalsified(lit) && this.voc
-/* 235 */         .getTrailPosition(lit) > trailPosition) {
-/*     */ 
-/*     */ 
-/*     */         
-/* 239 */         assert !isSatisfiable();
-/* 240 */         return false;
-/*     */       } 
-/* 242 */       if (this.voc.isUnassigned(lit)) {
-/*     */         
-/* 244 */         boolean enqueued = s.enqueue(lit, this);
-/* 245 */         assert enqueued;
-/*     */       } 
-/* 247 */       ind++;
-/*     */     } 
-/*     */     
-/* 250 */     assert this.learnt || this.watchCumul.compareTo(computeLeftSide()) >= 0;
-/* 251 */     assert this.watchCumul.compareTo(computeLeftSide()) >= 0;
-/*     */ 
-/*     */     
-/* 254 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/* 261 */     for (int i = 0; i < this.lits.length; i++) {
-/* 262 */       if (!this.voc.isFalsified(this.lits[i])) {
-/* 263 */         this.voc.watches(this.lits[i] ^ 0x1).remove(this);
-/*     */       }
-/*     */     } 
-/*     */     
-/* 267 */     int ind = 0;
-/* 268 */     while (ind < this.coefs.length && this.watchCumul
-/* 269 */       .subtract(this.coefs[ind]).compareTo(this.degree) < 0) {
-/* 270 */       if (!this.voc.isUnassigned(this.lits[ind]) && this.voc
-/* 271 */         .getReason(this.lits[ind]) == this) {
-/* 272 */         upl.unset(this.lits[ind]);
-/*     */       }
-/* 274 */       ind++;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void undo(int p) {
-/*     */     BigInteger coefP;
-/* 286 */     if (this.litToCoeffs == null) {
-/*     */       
-/* 288 */       int indiceP = 0;
-/* 289 */       while (indiceP < this.lits.length && (this.lits[indiceP] ^ 0x1) != p)
-/*     */       {
-/* 291 */         indiceP++;
-/*     */       }
-/*     */       
-/* 294 */       coefP = (indiceP == this.lits.length) ? BigInteger.ZERO : this.coefs[indiceP];
-/*     */     }
-/*     */     else {
-/*     */       
-/* 298 */       coefP = this.litToCoeffs.get(Integer.valueOf(p ^ 0x1));
-/*     */     } 
-/*     */     
-/* 301 */     this.watchCumul = this.watchCumul.add(coefP);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static MaxWatchPb normalizedMaxWatchPbNew(UnitPropagationListener s, ILits voc, int[] lits, BigInteger[] coefs, BigInteger degree, BigInteger sumCoefs) throws ContradictionException {
-/* 326 */     MaxWatchPb outclause = new MaxWatchPb(voc, lits, coefs, degree, sumCoefs);
-/*     */ 
-/*     */     
-/* 329 */     if (outclause.degree.signum() <= 0) {
-/* 330 */       return null;
-/*     */     }
-/*     */     
-/* 333 */     outclause.computeWatches();
-/*     */     
-/* 335 */     outclause.computePropagation(s);
-/*     */     
-/* 337 */     return outclause;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagatePI(MandatoryLiteralListener l, int p) {
-/*     */     BigInteger coefP;
-/* 360 */     this.voc.watch(p, this);
-/*     */ 
-/*     */ 
-/*     */     
-/* 364 */     if (this.litToCoeffs == null) {
-/*     */       
-/* 366 */       int indiceP = 0;
-/* 367 */       while ((this.lits[indiceP] ^ 0x1) != p) {
-/* 368 */         indiceP++;
-/*     */       }
-/*     */ 
-/*     */       
-/* 372 */       coefP = this.coefs[indiceP];
-/*     */     } else {
-/* 374 */       coefP = this.litToCoeffs.get(Integer.valueOf(p ^ 0x1));
-/*     */     } 
-/*     */     
-/* 377 */     BigInteger newcumul = this.watchCumul.subtract(coefP);
-/*     */ 
-/*     */ 
-/*     */     
-/* 381 */     this.voc.undos(p).push(this);
-/*     */     
-/* 383 */     this.watchCumul = newcumul;
-/*     */ 
-/*     */     
-/* 386 */     int ind = 0;
-/*     */ 
-/*     */ 
-/*     */     
-/* 390 */     BigInteger limit = this.watchCumul.subtract(this.degree);
-/*     */     
-/* 392 */     while (ind < this.coefs.length && limit
-/* 393 */       .compareTo(this.coefs[ind]) < 0) {
-/*     */       
-/* 395 */       if (this.voc.isSatisfied(this.lits[ind])) {
-/* 396 */         l.isMandatory(this.lits[ind]);
-/*     */       }
-/* 398 */       ind++;
-/*     */     } 
-/* 400 */     return true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 405 */     throw new UnsupportedOperationException("To be done");
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\MaxWatchPb.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MaxWatchPbLong.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MaxWatchPbLong.java
deleted file mode 100644
index 1dc67c8ce9836e876af1b871d2fd03c1a88d8610..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/MaxWatchPbLong.java
+++ /dev/null
@@ -1,428 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.HashSet;
-/*     */ import java.util.Map;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.MandatoryLiteralListener;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class MaxWatchPbLong
-/*     */   extends WatchPbLong
-/*     */ {
-/*  61 */   private long watchCumul = 0L;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private final Map<Integer, Long> litToCoeffs;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private MaxWatchPbLong(ILits voc, int[] lits, BigInteger[] coefs, BigInteger degree, BigInteger sumCoefs) {
-/* 110 */     super(lits, coefs, degree, sumCoefs);
-/* 111 */     this.voc = voc;
-/*     */     
-/* 113 */     this.activity = 0.0D;
-/* 114 */     this.watchCumul = 0L;
-/* 115 */     if (coefs.length > 100) {
-/* 116 */       this.litToCoeffs = new HashMap<>(this.coefs.length);
-/* 117 */       for (int i = 0; i < this.coefs.length; i++) {
-/* 118 */         this.litToCoeffs.put(Integer.valueOf(this.lits[i]), Long.valueOf(this.coefs[i]));
-/*     */       }
-/*     */     } else {
-/* 121 */       this.litToCoeffs = null;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected void computeWatches() throws ContradictionException {
-/* 132 */     assert this.watchCumul == 0L; int i;
-/* 133 */     for (i = 0; i < this.lits.length; i++) {
-/* 134 */       if (this.voc.isFalsified(this.lits[i])) {
-/* 135 */         if (this.learnt) {
-/* 136 */           this.voc.undos(this.lits[i] ^ 0x1).push(this);
-/* 137 */           this.voc.watch(this.lits[i] ^ 0x1, this);
-/*     */         } 
-/*     */       } else {
-/*     */         
-/* 141 */         this.voc.watch(this.lits[i] ^ 0x1, this);
-/* 142 */         this.watchCumul += this.coefs[i];
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 146 */     assert this.watchCumul >= computeLeftSide();
-/* 147 */     if (!this.learnt && this.watchCumul < this.degree) {
-/* 148 */       for (i = 0; i < this.lits.length; i++) {
-/* 149 */         if (!this.voc.isFalsified(this.lits[i])) {
-/* 150 */           this.voc.watches(this.lits[i] ^ 0x1).remove(this);
-/*     */         }
-/*     */       } 
-/* 153 */       throw new ContradictionException("non satisfiable constraint");
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected void computePropagation(UnitPropagationListener s) throws ContradictionException {
-/* 168 */     int ind = 0;
-/* 169 */     while (ind < this.coefs.length && this.watchCumul - this.coefs[ind] < this.degree) {
-/*     */       
-/* 171 */       if (this.voc.isUnassigned(this.lits[ind]) && 
-/* 172 */         !s.enqueue(this.lits[ind], this))
-/*     */       {
-/* 174 */         throw new ContradictionException("non satisfiable constraint");
-/*     */       }
-/* 176 */       ind++;
-/*     */     } 
-/* 178 */     assert this.watchCumul >= computeLeftSide();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/*     */     long coefP;
-/* 192 */     this.voc.watch(p, this);
-/*     */     
-/* 194 */     assert this.watchCumul >= computeLeftSide() : "" + this.watchCumul + "/" + 
-/* 195 */       computeLeftSide() + ":" + this.learnt;
-/*     */ 
-/*     */ 
-/*     */     
-/* 199 */     if (this.litToCoeffs == null) {
-/*     */       
-/* 201 */       int indiceP = 0;
-/* 202 */       while ((this.lits[indiceP] ^ 0x1) != p) {
-/* 203 */         indiceP++;
-/*     */       }
-/*     */ 
-/*     */       
-/* 207 */       coefP = this.coefs[indiceP];
-/*     */     } else {
-/* 209 */       coefP = ((Long)this.litToCoeffs.get(Integer.valueOf(p ^ 0x1))).longValue();
-/*     */     } 
-/* 211 */     long newcumul = this.watchCumul - coefP;
-/*     */     
-/* 213 */     if (newcumul < this.degree) {
-/*     */       
-/* 215 */       assert !isSatisfiable();
-/* 216 */       return false;
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 221 */     this.voc.undos(p).push(this);
-/*     */     
-/* 223 */     this.watchCumul = newcumul;
-/*     */ 
-/*     */     
-/* 226 */     int ind = 0;
-/*     */     
-/* 228 */     int trailPosition = this.voc.getTrailPosition(p);
-/*     */ 
-/*     */ 
-/*     */     
-/* 232 */     long limit = this.watchCumul - this.degree;
-/*     */     
-/* 234 */     while (ind < this.coefs.length && limit < this.coefs[ind]) {
-/*     */       
-/* 236 */       int lit = this.lits[ind];
-/* 237 */       if (this.voc.isFalsified(lit) && this.voc
-/* 238 */         .getTrailPosition(lit) > trailPosition) {
-/*     */ 
-/*     */ 
-/*     */         
-/* 242 */         assert !isSatisfiable();
-/* 243 */         return false;
-/*     */       } 
-/* 245 */       if (this.voc.isUnassigned(lit)) {
-/*     */         
-/* 247 */         boolean enqueued = s.enqueue(lit, this);
-/* 248 */         assert enqueued;
-/*     */       } 
-/* 250 */       ind++;
-/*     */     } 
-/*     */     
-/* 253 */     assert this.learnt || this.watchCumul >= computeLeftSide();
-/* 254 */     assert this.watchCumul >= computeLeftSide();
-/*     */ 
-/*     */     
-/* 257 */     return true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {
-/* 265 */     for (int i = 0; i < this.lits.length; i++) {
-/* 266 */       if (!this.voc.isFalsified(this.lits[i])) {
-/* 267 */         this.voc.watches(this.lits[i] ^ 0x1).remove(this);
-/*     */       }
-/*     */     } 
-/*     */     
-/* 271 */     int ind = 0;
-/* 272 */     while (ind < this.coefs.length && this.watchCumul - this.coefs[ind] < this.degree) {
-/*     */       
-/* 274 */       if (!this.voc.isUnassigned(this.lits[ind]) && this.voc
-/* 275 */         .getReason(this.lits[ind]) == this) {
-/* 276 */         upl.unset(this.lits[ind]);
-/*     */       }
-/* 278 */       ind++;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void undo(int p) {
-/*     */     long coefP;
-/* 291 */     if (this.litToCoeffs == null) {
-/*     */       
-/* 293 */       int indiceP = 0;
-/* 294 */       while (indiceP < this.lits.length && (this.lits[indiceP] ^ 0x1) != p)
-/*     */       {
-/* 296 */         indiceP++;
-/*     */       }
-/*     */       
-/* 299 */       coefP = (indiceP == this.lits.length) ? 0L : this.coefs[indiceP];
-/*     */     } else {
-/* 301 */       Long coefL = this.litToCoeffs.get(Integer.valueOf(p ^ 0x1));
-/* 302 */       if (coefL != null) {
-/* 303 */         coefP = coefL.longValue();
-/*     */       } else {
-/* 305 */         coefP = 0L;
-/*     */       } 
-/*     */     } 
-/* 308 */     this.watchCumul += coefP;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static MaxWatchPbLong normalizedMaxWatchPbNew(UnitPropagationListener s, ILits voc, int[] lits, BigInteger[] coefs, BigInteger degree, BigInteger sumCoefs) throws ContradictionException {
-/* 334 */     MaxWatchPbLong outclause = new MaxWatchPbLong(voc, lits, coefs, degree, sumCoefs);
-/*     */ 
-/*     */     
-/* 337 */     if (outclause.degree <= 0L) {
-/* 338 */       return null;
-/*     */     }
-/*     */     
-/* 341 */     outclause.computeWatches();
-/*     */     
-/* 343 */     outclause.computePropagation(s);
-/*     */     
-/* 345 */     return outclause;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagatePI(MandatoryLiteralListener l, int p) {
-/*     */     long coefP;
-/* 368 */     this.voc.watch(p, this);
-/*     */ 
-/*     */ 
-/*     */     
-/* 372 */     if (this.litToCoeffs == null) {
-/*     */       
-/* 374 */       int indiceP = 0;
-/* 375 */       while ((this.lits[indiceP] ^ 0x1) != p) {
-/* 376 */         indiceP++;
-/*     */       }
-/*     */ 
-/*     */       
-/* 380 */       coefP = this.coefs[indiceP];
-/*     */     } else {
-/* 382 */       coefP = ((Long)this.litToCoeffs.get(Integer.valueOf(p ^ 0x1))).longValue();
-/*     */     } 
-/*     */     
-/* 385 */     long newcumul = this.watchCumul - coefP;
-/*     */ 
-/*     */ 
-/*     */     
-/* 389 */     this.voc.undos(p).push(this);
-/*     */     
-/* 391 */     this.watchCumul = newcumul;
-/*     */ 
-/*     */     
-/* 394 */     int ind = 0;
-/*     */ 
-/*     */ 
-/*     */     
-/* 398 */     long limit = this.watchCumul - this.degree;
-/*     */     
-/* 400 */     while (ind < this.coefs.length && limit < this.coefs[ind]) {
-/*     */       
-/* 402 */       if (!this.voc.isFalsified(this.lits[ind])) {
-/* 403 */         l.isMandatory(this.lits[ind]);
-/*     */       }
-/* 405 */       ind++;
-/*     */     } 
-/* 407 */     return true;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 412 */     Set<Integer> litsSet = new HashSet<>(); int arrayOfInt[], j; byte b;
-/* 413 */     for (arrayOfInt = this.lits, j = arrayOfInt.length, b = 0; b < j; ) { Integer integer = Integer.valueOf(arrayOfInt[b]);
-/* 414 */       litsSet.add(integer); b++; }
-/* 415 */      for (int i = 0; i < trail.size(); i++) {
-/* 416 */       if (litsSet.contains(Integer.valueOf(trail.get(i) ^ 0x1))) {
-/* 417 */         return i;
-/*     */       }
-/*     */     } 
-/* 420 */     return -1;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\MaxWatchPbLong.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/OriginalBinaryClausePB.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/OriginalBinaryClausePB.java
deleted file mode 100644
index 085cf5f22291697e9bc9cbfee57353e915711ac5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/OriginalBinaryClausePB.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class OriginalBinaryClausePB
-/*    */   extends OriginalBinaryClause
-/*    */   implements PBConstr
-/*    */ {
-/*    */   public OriginalBinaryClausePB(IVecInt ps, ILits voc) {
-/* 44 */     super(ps, voc);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public static OriginalBinaryClausePB brandNewClause(UnitPropagationListener s, ILits voc, IVecInt literals) {
-/* 87 */     OriginalBinaryClausePB c = new OriginalBinaryClausePB(literals, voc);
-/* 88 */     c.register();
-/* 89 */     return c;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\OriginalBinaryClausePB.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/OriginalHTClausePB.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/OriginalHTClausePB.java
deleted file mode 100644
index 3ca107c375a62151b257ff092299a373f8432133..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/OriginalHTClausePB.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.OriginalHTClause;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class OriginalHTClausePB
-/*    */   extends OriginalHTClause
-/*    */   implements PBConstr
-/*    */ {
-/*    */   public OriginalHTClausePB(IVecInt ps, ILits voc) {
-/* 44 */     super(ps, voc);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public static OriginalHTClausePB brandNewClause(UnitPropagationListener s, ILits voc, IVecInt literals) {
-/* 87 */     OriginalHTClausePB c = new OriginalHTClausePB(literals, voc);
-/* 88 */     c.register();
-/* 89 */     return c;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\OriginalHTClausePB.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/PBConstr.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/PBConstr.java
deleted file mode 100644
index 225bc26445a9d3bdb9b57dbda5e6e789df8e1051..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/PBConstr.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-
-public interface PBConstr extends Constr {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\PBConstr.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/Pseudos.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/Pseudos.java
deleted file mode 100644
index b1e7742582032cefd0ac18e6e2472554f4a3e0f3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/Pseudos.java
+++ /dev/null
@@ -1,144 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class Pseudos
-/*     */ {
-/*     */   public static IDataStructurePB niceCheckedParameters(IVecInt ps, IVec<BigInteger> bigCoefs, boolean moreThan, BigInteger bigDeg, ILits voc) {
-/*  49 */     assert ps.size() != 0 && ps.size() == bigCoefs.size();
-/*  50 */     int[] lits = new int[ps.size()];
-/*  51 */     ps.copyTo(lits);
-/*  52 */     BigInteger[] bc = new BigInteger[bigCoefs.size()];
-/*  53 */     bigCoefs.copyTo((Object[])bc);
-/*  54 */     BigInteger bigDegree = niceCheckedParametersForCompetition(lits, bc, moreThan, bigDeg);
-/*     */ 
-/*     */     
-/*  57 */     IDataStructurePB mpb = new MapPb(voc.nVars() * 2 + 2);
-/*  58 */     if (bigDegree.signum() > 0) {
-/*  59 */       bigDegree = mpb.cuttingPlane(lits, bc, bigDegree);
-/*     */     }
-/*  61 */     if (bigDegree.signum() > 0) {
-/*  62 */       bigDegree = mpb.saturation();
-/*     */     }
-/*  64 */     if (bigDegree.signum() <= 0) {
-/*  65 */       return IDataStructurePB.TAUTOLOGY;
-/*     */     }
-/*  67 */     return mpb;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public static BigInteger niceCheckedParametersForCompetition(int[] lits, BigInteger[] bc, boolean moreThan, BigInteger bigDeg) {
-/*  72 */     BigInteger bigDegree = bigDeg;
-/*  73 */     if (!moreThan) {
-/*  74 */       for (int j = 0; j < lits.length; j++) {
-/*  75 */         bc[j] = bc[j].negate();
-/*     */       }
-/*  77 */       bigDegree = bigDegree.negate();
-/*     */     } 
-/*     */     int i;
-/*  80 */     for (i = 0; i < bc.length; i++) {
-/*  81 */       if (bc[i].signum() < 0) {
-/*  82 */         lits[i] = lits[i] ^ 0x1;
-/*  83 */         bc[i] = bc[i].negate();
-/*  84 */         bigDegree = bigDegree.add(bc[i]);
-/*     */       } 
-/*     */     } 
-/*     */     
-/*  88 */     for (i = 0; i < bc.length; i++) {
-/*  89 */       if (bc[i].compareTo(bigDegree) > 0) {
-/*  90 */         bc[i] = bigDegree;
-/*     */       }
-/*     */     } 
-/*     */     
-/*  94 */     return bigDegree;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static IDataStructurePB niceParameters(IVecInt ps, IVec<BigInteger> bigCoefs, boolean moreThan, BigInteger bigDeg, ILits voc) throws ContradictionException {
-/* 102 */     if (ps.size() == 0) {
-/* 103 */       if ((moreThan && bigDeg.signum() > 0) || (!moreThan && bigDeg
-/* 104 */         .signum() < 0)) {
-/* 105 */         throw new ContradictionException("Creating Empty clause ?");
-/*     */       }
-/*     */       
-/* 108 */       return IDataStructurePB.TAUTOLOGY;
-/*     */     } 
-/* 110 */     if (ps.size() != bigCoefs.size()) {
-/* 111 */       throw new IllegalArgumentException("Contradiction dans la taille des tableaux ps=" + ps
-/* 112 */           .size() + " coefs=" + bigCoefs
-/* 113 */           .size() + ".");
-/*     */     }
-/* 115 */     return niceCheckedParameters(ps, bigCoefs, moreThan, bigDeg, voc);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static BigInteger niceParametersForCompetition(int[] ps, BigInteger[] bigCoefs, boolean moreThan, BigInteger bigDeg) throws ContradictionException {
-/* 123 */     if (ps.length == 0) {
-/* 124 */       if ((moreThan && bigDeg.signum() > 0) || (!moreThan && bigDeg
-/* 125 */         .signum() < 0)) {
-/* 126 */         throw new ContradictionException("Creating Empty clause ?");
-/*     */       }
-/*     */       
-/* 129 */       return bigDeg;
-/*     */     } 
-/* 131 */     if (ps.length != bigCoefs.length) {
-/* 132 */       throw new IllegalArgumentException("Contradiction dans la taille des tableaux ps=" + ps.length + " coefs=" + bigCoefs.length + ".");
-/*     */     }
-/*     */ 
-/*     */     
-/* 136 */     return niceCheckedParametersForCompetition(ps, bigCoefs, moreThan, bigDeg);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\Pseudos.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/UnitClausesPB.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/UnitClausesPB.java
deleted file mode 100644
index 9c7d8b1b4ce25b44752b18e3941424a958bcf497..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/UnitClausesPB.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.UnitClauses;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class UnitClausesPB
-/*    */   extends UnitClauses
-/*    */   implements PBConstr
-/*    */ {
-/*    */   public UnitClausesPB(IVecInt values) {
-/* 41 */     super(values);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\UnitClausesPB.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/WatchPb.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/WatchPb.java
deleted file mode 100644
index 664c560242429eea35c2dc4ae4a0254f30f33852..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/WatchPb.java
+++ /dev/null
@@ -1,694 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Lits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Undoable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class WatchPb
-/*     */   implements Serializable, Undoable, IWatchPb, Propagatable
-/*     */ {
-/*     */   protected double activity;
-/*     */   protected BigInteger[] coefs;
-/*     */   protected BigInteger sumcoefs;
-/*     */   protected BigInteger degree;
-/*     */   protected int[] lits;
-/*     */   protected boolean learnt = false;
-/*     */   protected ILits voc;
-/*     */   
-/*     */   WatchPb() {}
-/*     */   
-/*     */   WatchPb(int[] lits, BigInteger[] coefs, BigInteger degree, BigInteger sumCoefs) {
-/* 121 */     this.lits = lits;
-/* 122 */     this.coefs = coefs;
-/* 123 */     this.degree = degree;
-/* 124 */     this.sumcoefs = sumCoefs;
-/*     */     
-/* 126 */     sort();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/* 171 */     BigInteger sumfalsified = BigInteger.ZERO;
-/* 172 */     int[] mlits = this.lits;
-/* 173 */     for (int i = 0; i < mlits.length; i++) {
-/* 174 */       int q = mlits[i];
-/* 175 */       if (this.voc.isFalsified(q)) {
-/* 176 */         outReason.push(q ^ 0x1);
-/* 177 */         sumfalsified = sumfalsified.add(this.coefs[i]);
-/* 178 */         if (this.sumcoefs.subtract(sumfalsified)
-/* 179 */           .compareTo(this.degree) < 0) {
-/*     */           return;
-/*     */         }
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected abstract void computeWatches() throws ContradictionException;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected abstract void computePropagation(UnitPropagationListener paramUnitPropagationListener) throws ContradictionException;
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 199 */     return this.lits[i];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getActivity() {
-/* 220 */     return this.activity;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {
-/* 229 */     if (this.learnt) {
-/* 230 */       this.activity += claInc;
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   public void setActivity(double d) {
-/* 235 */     if (this.learnt) {
-/* 236 */       this.activity = d;
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger slackConstraint() {
-/* 247 */     return computeLeftSide().subtract(this.degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger computeLeftSide(BigInteger[] theCoefs) {
-/* 274 */     BigInteger poss = BigInteger.ZERO;
-/*     */     
-/* 276 */     for (int i = 0; i < this.lits.length; i++) {
-/* 277 */       if (!this.voc.isFalsified(this.lits[i])) {
-/* 278 */         assert theCoefs[i].signum() >= 0;
-/* 279 */         poss = poss.add(theCoefs[i]);
-/*     */       } 
-/*     */     } 
-/* 282 */     return poss;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public BigInteger computeLeftSide() {
-/* 292 */     return computeLeftSide(this.coefs);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected boolean isSatisfiable() {
-/* 303 */     return (computeLeftSide().compareTo(this.degree) >= 0);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean learnt() {
-/* 313 */     return this.learnt;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean locked() {
-/* 322 */     for (int p : this.lits) {
-/* 323 */       if (this.voc.getReason(p) == this) {
-/* 324 */         return true;
-/*     */       }
-/*     */     } 
-/* 327 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/* 351 */     this.activity *= d;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void selectionSort(int from, int to) {
-/* 359 */     for (int i = from; i < to - 1; i++) {
-/* 360 */       int bestIndex = i;
-/* 361 */       for (int j = i + 1; j < to; j++) {
-/* 362 */         if (this.coefs[j].compareTo(this.coefs[bestIndex]) > 0 || (this.coefs[j]
-/* 363 */           .equals(this.coefs[bestIndex]) && this.lits[j] < this.lits[bestIndex]))
-/*     */         {
-/* 365 */           bestIndex = j;
-/*     */         }
-/*     */       } 
-/* 368 */       BigInteger tmp = this.coefs[i];
-/* 369 */       this.coefs[i] = this.coefs[bestIndex];
-/* 370 */       this.coefs[bestIndex] = tmp;
-/* 371 */       int tmp2 = this.lits[i];
-/* 372 */       this.lits[i] = this.lits[bestIndex];
-/* 373 */       this.lits[bestIndex] = tmp2;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setLearnt() {
-/* 381 */     this.learnt = true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean simplify() {
-/* 390 */     BigInteger cumul = BigInteger.ZERO;
-/*     */     
-/* 392 */     int i = 0;
-/* 393 */     while (i < this.lits.length && cumul.compareTo(this.degree) < 0) {
-/* 394 */       if (this.voc.isSatisfied(this.lits[i]))
-/*     */       {
-/* 396 */         cumul = cumul.add(this.coefs[i]);
-/*     */       }
-/* 398 */       i++;
-/*     */     } 
-/*     */     
-/* 401 */     return (cumul.compareTo(this.degree) >= 0);
-/*     */   }
-/*     */   
-/*     */   public final int size() {
-/* 405 */     return this.lits.length;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected final void sort() {
-/* 412 */     assert this.lits != null;
-/* 413 */     if (this.coefs.length > 0) {
-/* 414 */       sort(0, size());
-/* 415 */       BigInteger buffInt = this.coefs[0];
-/* 416 */       for (int i = 1; i < this.coefs.length; i++) {
-/* 417 */         assert buffInt.compareTo(this.coefs[i]) >= 0;
-/* 418 */         buffInt = this.coefs[i];
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected final void sort(int from, int to) {
-/* 433 */     int width = to - from;
-/* 434 */     if (width <= 15) {
-/* 435 */       selectionSort(from, to);
-/*     */     } else {
-/* 437 */       int indPivot = width / 2 + from;
-/* 438 */       BigInteger pivot = this.coefs[indPivot];
-/* 439 */       int litPivot = this.lits[indPivot];
-/*     */       
-/* 441 */       int i = from - 1;
-/* 442 */       int j = to;
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       while (true) {
-/* 447 */         i++;
-/* 448 */         if (this.coefs[i].compareTo(pivot) <= 0 && (
-/* 449 */           !this.coefs[i].equals(pivot) || this.lits[i] >= litPivot)) {
-/*     */           
-/*     */           do {
-/* 452 */             j--;
-/* 453 */           } while (pivot.compareTo(this.coefs[j]) > 0 || (this.coefs[j]
-/* 454 */             .equals(pivot) && this.lits[j] > litPivot));
-/*     */ 
-/*     */           
-/* 457 */           if (i >= j) {
-/*     */             break;
-/*     */           }
-/*     */           
-/* 461 */           BigInteger tmp = this.coefs[i];
-/* 462 */           this.coefs[i] = this.coefs[j];
-/* 463 */           this.coefs[j] = tmp;
-/* 464 */           int tmp2 = this.lits[i];
-/* 465 */           this.lits[i] = this.lits[j];
-/* 466 */           this.lits[j] = tmp2;
-/*     */         } 
-/*     */       } 
-/* 469 */       sort(from, i);
-/* 470 */       sort(i, to);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 477 */     StringBuilder stb = new StringBuilder();
-/*     */     
-/* 479 */     if (this.lits.length > 0) {
-/* 480 */       for (int i = 0; i < this.lits.length; i++) {
-/* 481 */         stb.append(" + ");
-/* 482 */         stb.append(this.coefs[i]);
-/* 483 */         stb.append(".");
-/* 484 */         stb.append(Lits.toString(this.lits[i]));
-/* 485 */         stb.append("[");
-/* 486 */         stb.append(this.voc.valueToString(this.lits[i]));
-/* 487 */         stb.append("@");
-/* 488 */         stb.append(this.voc.getLevel(this.lits[i]));
-/* 489 */         stb.append("]");
-/* 490 */         stb.append(" ");
-/*     */       } 
-/* 492 */       stb.append(">= ");
-/* 493 */       stb.append(this.degree);
-/*     */     } 
-/* 495 */     return stb.toString();
-/*     */   }
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/* 499 */     BigInteger tmp = slackConstraint();
-/* 500 */     for (int i = 0; i < this.lits.length; i++) {
-/* 501 */       if (this.voc.isUnassigned(this.lits[i]) && tmp
-/* 502 */         .compareTo(this.coefs[i]) < 0) {
-/* 503 */         boolean ret = s.enqueue(this.lits[i], this);
-/* 504 */         assert ret;
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void register() {
-/* 521 */     assert this.learnt;
-/*     */     try {
-/* 523 */       computeWatches();
-/* 524 */     } catch (ContradictionException e) {
-/* 525 */       System.out.println(this);
-/*     */       assert false;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object pb) {
-/* 583 */     if (pb == null) {
-/* 584 */       return false;
-/*     */     }
-/* 586 */     if (getClass() != pb.getClass()) {
-/* 587 */       return false;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     try {
-/* 595 */       WatchPb wpb = (WatchPb)pb;
-/* 596 */       if (!this.degree.equals(wpb.degree) || this.coefs.length != wpb.coefs.length || this.lits.length != wpb.lits.length)
-/*     */       {
-/*     */         
-/* 599 */         return false;
-/*     */       }
-/*     */ 
-/*     */       
-/* 603 */       for (int ilit = 0; ilit < this.coefs.length; ilit++) {
-/* 604 */         int lit = this.lits[ilit];
-/* 605 */         boolean ok = false;
-/* 606 */         for (int ilit2 = 0; ilit2 < this.coefs.length; ilit2++) {
-/* 607 */           if (wpb.lits[ilit2] == lit) {
-/* 608 */             if (!wpb.coefs[ilit2].equals(this.coefs[ilit])) {
-/* 609 */               return false;
-/*     */             }
-/*     */             
-/* 612 */             ok = true;
-/*     */             
-/*     */             break;
-/*     */           } 
-/*     */         } 
-/* 617 */         if (!ok) {
-/* 618 */           return false;
-/*     */         }
-/*     */       } 
-/* 621 */       return true;
-/* 622 */     } catch (ClassCastException e) {
-/* 623 */       return false;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 629 */     long sum = 0L;
-/* 630 */     for (int p : this.lits) {
-/* 631 */       sum += p;
-/*     */     }
-/* 633 */     return (int)sum / this.lits.length;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 643 */     return true;
-/*     */   }
-/*     */   
-/*     */   public Constr toConstraint() {
-/* 647 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canBeSatisfiedByCountingLiterals() {
-/* 670 */     return false;
-/*     */   }
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 674 */     throw new UnsupportedOperationException("Not applicable for PB constraints");
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 679 */     BigInteger satisfied = BigInteger.ZERO;
-/* 680 */     for (int i = 0; i < this.lits.length; i++) {
-/* 681 */       if (this.voc.isSatisfied(this.lits[i])) {
-/* 682 */         assert this.coefs[i].signum() >= 0;
-/* 683 */         satisfied = satisfied.add(this.coefs[i]);
-/*     */       } 
-/*     */     } 
-/* 686 */     return (satisfied.compareTo(this.degree) >= 0);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\WatchPb.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/WatchPbLong.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/WatchPbLong.java
deleted file mode 100644
index 167679092d9b2b93f81ed22fc7cee3aef060b1f9..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/constraints/pb/WatchPbLong.java
+++ /dev/null
@@ -1,689 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.constraints.pb;
-/*     */ 
-/*     */ import java.io.Serializable;
-/*     */ import java.math.BigInteger;
-/*     */ import java.util.Comparator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.constraints.cnf.Lits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ILits;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Undoable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Propagatable;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class WatchPbLong
-/*     */   implements Serializable, Undoable, Constr, Propagatable
-/*     */ {
-/*     */   protected double activity;
-/*     */   protected long[] coefs;
-/*     */   protected long sumcoefs;
-/*     */   protected long degree;
-/*     */   protected int[] lits;
-/*     */   protected boolean learnt = false;
-/*     */   protected ILits voc;
-/*     */   private final Comparator<Integer> levelBased;
-/*     */   
-/*     */   public static long[] toLong(BigInteger[] bigValues) {
-/* 128 */     long[] res = new long[bigValues.length];
-/* 129 */     for (int i = 0; i < res.length; i++) {
-/* 130 */       res[i] = bigValues[i].longValue();
-/*     */     }
-/* 132 */     return res;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void calcReason(int p, IVecInt outReason) {
-/* 176 */     long sumfalsified = 0L;
-/* 177 */     long tous = 0L;
-/* 178 */     int[] mlits = this.lits;
-/* 179 */     boolean ok = true;
-/* 180 */     for (int i = 0; i < mlits.length; i++) {
-/* 181 */       int q = mlits[i];
-/* 182 */       if (this.voc.isFalsified(q)) {
-/* 183 */         if (ok) {
-/* 184 */           outReason.push(q ^ 0x1);
-/* 185 */           sumfalsified += this.coefs[i];
-/* 186 */           if (this.sumcoefs - sumfalsified < this.degree) {
-/* 187 */             ok = false;
-/* 188 */             tous = sumfalsified;
-/*     */           } 
-/*     */         } else {
-/*     */           
-/* 192 */           tous += this.coefs[i];
-/*     */         } 
-/*     */       }
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int get(int i) {
-/* 211 */     return this.lits[i];
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public double getActivity() {
-/* 221 */     return this.activity;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void incActivity(double claInc) {
-/* 230 */     if (this.learnt) {
-/* 231 */       this.activity += claInc;
-/*     */     }
-/*     */   }
-/*     */   
-/*     */   public void setActivity(double d) {
-/* 236 */     if (this.learnt) {
-/* 237 */       this.activity = d;
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public long slackConstraint() {
-/* 248 */     return computeLeftSide() - this.degree;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public long computeLeftSide(long[] theCoefs) {
-/* 274 */     long poss = 0L;
-/*     */     
-/* 276 */     for (int i = 0; i < this.lits.length; i++) {
-/* 277 */       if (!this.voc.isFalsified(this.lits[i])) {
-/* 278 */         assert theCoefs[i] >= 0L;
-/* 279 */         poss += theCoefs[i];
-/*     */       } 
-/*     */     } 
-/* 282 */     return poss;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public long computeLeftSide() {
-/* 292 */     return computeLeftSide(this.coefs);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected boolean isSatisfiable() {
-/* 303 */     return (computeLeftSide() >= this.degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean learnt() {
-/* 313 */     return this.learnt;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean locked() {
-/* 322 */     for (int p : this.lits) {
-/* 323 */       if (this.voc.getReason(p) == this) {
-/* 324 */         return true;
-/*     */       }
-/*     */     } 
-/* 327 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void rescaleBy(double d) {
-/* 351 */     this.activity *= d;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void selectionSort(int from, int to) {
-/* 359 */     for (int i = from; i < to - 1; i++) {
-/* 360 */       int bestIndex = i;
-/* 361 */       for (int j = i + 1; j < to; j++) {
-/* 362 */         if (this.coefs[j] > this.coefs[bestIndex] || (this.coefs[j] == this.coefs[bestIndex] && this.lits[j] < this.lits[bestIndex]))
-/*     */         {
-/*     */           
-/* 365 */           bestIndex = j;
-/*     */         }
-/*     */       } 
-/* 368 */       long tmp = this.coefs[i];
-/* 369 */       this.coefs[i] = this.coefs[bestIndex];
-/* 370 */       this.coefs[bestIndex] = tmp;
-/* 371 */       int tmp2 = this.lits[i];
-/* 372 */       this.lits[i] = this.lits[bestIndex];
-/* 373 */       this.lits[bestIndex] = tmp2;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setLearnt() {
-/* 381 */     this.learnt = true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean simplify() {
-/* 390 */     long cumul = 0L;
-/*     */     
-/* 392 */     int i = 0;
-/* 393 */     while (i < this.lits.length && cumul < this.degree) {
-/* 394 */       if (this.voc.isSatisfied(this.lits[i]))
-/*     */       {
-/* 396 */         cumul += this.coefs[i];
-/*     */       }
-/* 398 */       i++;
-/*     */     } 
-/*     */     
-/* 401 */     return (cumul >= this.degree);
-/*     */   }
-/*     */   
-/*     */   public final int size() {
-/* 405 */     return this.lits.length;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected final void sort() {
-/* 412 */     assert this.lits != null;
-/* 413 */     if (this.coefs.length > 0) {
-/* 414 */       sort(0, size());
-/* 415 */       long buffInt = this.coefs[0];
-/* 416 */       for (int i = 1; i < this.coefs.length; i++) {
-/* 417 */         assert buffInt >= this.coefs[i];
-/* 418 */         buffInt = this.coefs[i];
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected final void sort(int from, int to) {
-/* 432 */     int width = to - from;
-/* 433 */     if (width <= 15) {
-/* 434 */       selectionSort(from, to);
-/*     */     } else {
-/* 436 */       int indPivot = width / 2 + from;
-/* 437 */       long pivot = this.coefs[indPivot];
-/* 438 */       int litPivot = this.lits[indPivot];
-/*     */       
-/* 440 */       int i = from - 1;
-/* 441 */       int j = to;
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       while (true) {
-/* 446 */         i++;
-/* 447 */         if (this.coefs[i] <= pivot && (this.coefs[i] != pivot || this.lits[i] >= litPivot)) {
-/*     */           
-/*     */           do {
-/* 450 */             j--;
-/* 451 */           } while (pivot > this.coefs[j] || (this.coefs[j] == pivot && this.lits[j] > litPivot));
-/*     */ 
-/*     */           
-/* 454 */           if (i >= j) {
-/*     */             break;
-/*     */           }
-/*     */           
-/* 458 */           long tmp = this.coefs[i];
-/* 459 */           this.coefs[i] = this.coefs[j];
-/* 460 */           this.coefs[j] = tmp;
-/* 461 */           int tmp2 = this.lits[i];
-/* 462 */           this.lits[i] = this.lits[j];
-/* 463 */           this.lits[j] = tmp2;
-/*     */         } 
-/*     */       } 
-/* 466 */       sort(from, i);
-/* 467 */       sort(i, to);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 474 */     StringBuilder stb = new StringBuilder();
-/*     */     
-/* 476 */     if (this.lits.length > 0) {
-/* 477 */       for (int i = 0; i < this.lits.length; i++) {
-/* 478 */         stb.append(" + ");
-/* 479 */         stb.append(this.coefs[i]);
-/* 480 */         stb.append(".");
-/* 481 */         stb.append(Lits.toString(this.lits[i]));
-/* 482 */         stb.append("[");
-/* 483 */         stb.append(this.voc.valueToString(this.lits[i]));
-/* 484 */         stb.append("@");
-/* 485 */         stb.append(this.voc.getLevel(this.lits[i]));
-/* 486 */         stb.append("]");
-/* 487 */         stb.append(" ");
-/*     */       } 
-/* 489 */       stb.append(">= ");
-/* 490 */       stb.append(this.degree);
-/*     */     } 
-/* 492 */     return stb.toString();
-/*     */   }
-/*     */   
-/*     */   public void assertConstraint(UnitPropagationListener s) {
-/* 496 */     long tmp = slackConstraint();
-/* 497 */     for (int i = 0; i < this.lits.length; i++) {
-/* 498 */       if (this.voc.isUnassigned(this.lits[i]) && tmp < this.coefs[i]) {
-/* 499 */         boolean ret = s.enqueue(this.lits[i], this);
-/* 500 */         assert ret;
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void register() {
-/* 510 */     assert this.learnt;
-/*     */     try {
-/* 512 */       computeWatches();
-/* 513 */     } catch (ContradictionException e) {
-/* 514 */       System.out.println(this);
-/*     */       assert false;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object pb) {
-/* 561 */     if (pb == null) {
-/* 562 */       return false;
-/*     */     }
-/* 564 */     if (getClass() != pb.getClass()) {
-/* 565 */       return false;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     try {
-/* 573 */       WatchPbLong wpb = (WatchPbLong)pb;
-/* 574 */       if (this.degree != wpb.degree || this.coefs.length != wpb.coefs.length || this.lits.length != wpb.lits.length)
-/*     */       {
-/*     */         
-/* 577 */         return false;
-/*     */       }
-/*     */ 
-/*     */       
-/* 581 */       for (int ilit = 0; ilit < this.coefs.length; ilit++) {
-/* 582 */         int lit = this.lits[ilit];
-/* 583 */         boolean ok = false;
-/* 584 */         for (int ilit2 = 0; ilit2 < this.coefs.length; ilit2++) {
-/* 585 */           if (wpb.lits[ilit2] == lit) {
-/* 586 */             if (wpb.coefs[ilit2] != this.coefs[ilit]) {
-/* 587 */               return false;
-/*     */             }
-/*     */             
-/* 590 */             ok = true;
-/*     */             
-/*     */             break;
-/*     */           } 
-/*     */         } 
-/* 595 */         if (!ok) {
-/* 596 */           return false;
-/*     */         }
-/*     */       } 
-/* 599 */       return true;
-/* 600 */     } catch (ClassCastException e) {
-/* 601 */       return false;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/* 607 */     long sum = 0L;
-/* 608 */     for (int p : this.lits) {
-/* 609 */       sum += p;
-/*     */     }
-/* 611 */     return (int)sum / this.lits.length;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void remove(UnitPropagationListener upl) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean propagate(UnitPropagationListener s, int p) {
-/* 624 */     return false;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void undo(int p) {}
-/*     */   
-/*     */   public boolean canBePropagatedMultipleTimes() {
-/* 631 */     return true;
-/*     */   }
-/*     */   
-/*     */   public Constr toConstraint() {
-/* 635 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   WatchPbLong() {
-/* 659 */     this.levelBased = new Comparator<Integer>()
-/*     */       {
-/*     */         public int compare(Integer o1, Integer o2) {
-/* 662 */           return WatchPbLong.this.voc.getLevel(o1.intValue()) - WatchPbLong.this.voc.getLevel(o2.intValue()); } }; } WatchPbLong(int[] lits, BigInteger[] coefs, BigInteger degree, BigInteger sumCoefs) { this.levelBased = new Comparator<Integer>() { public int compare(Integer o1, Integer o2) { return WatchPbLong.this.voc.getLevel(o1.intValue()) - WatchPbLong.this.voc.getLevel(o2.intValue()); } }
-/*     */       ;
-/*     */     this.lits = lits;
-/*     */     this.coefs = toLong(coefs);
-/*     */     this.degree = degree.longValue();
-/*     */     this.sumcoefs = sumCoefs.longValue();
-/* 668 */     sort(); } public boolean canBeSatisfiedByCountingLiterals() { return false; }
-/*     */ 
-/*     */   
-/*     */   public int requiredNumberOfSatisfiedLiterals() {
-/* 672 */     throw new UnsupportedOperationException("Not applicable for PB constraints");
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfied() {
-/* 677 */     throw new UnsupportedOperationException("Not implemented yet");
-/*     */   }
-/*     */   
-/*     */   protected abstract void computeWatches() throws ContradictionException;
-/*     */   
-/*     */   protected abstract void computePropagation(UnitPropagationListener paramUnitPropagationListener) throws ContradictionException;
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\constraints\pb\WatchPbLong.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/IPBCDCLSolver.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/IPBCDCLSolver.java
deleted file mode 100644
index 2da52d430df4ab5f738dc8f157bebc4276407340..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/IPBCDCLSolver.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.core;
-
-import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ICDCL;
-import net.fabricmc.loader.impl.lib.sat4j.pb.IPBSolver;
-
-public interface IPBCDCLSolver extends ICDCL, IPBSolver {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\core\IPBCDCLSolver.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBDataStructureFactory.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBDataStructureFactory.java
deleted file mode 100644
index 3104b573a342a4123b992186210e2fba31b21ee3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBDataStructureFactory.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.core;
-
-import java.math.BigInteger;
-import net.fabricmc.loader.impl.lib.sat4j.minisat.core.DataStructureFactory;
-import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-
-public interface PBDataStructureFactory extends DataStructureFactory {
-  Constr createPseudoBooleanConstraint(IVecInt paramIVecInt, IVec<BigInteger> paramIVec, boolean paramBoolean, BigInteger paramBigInteger) throws ContradictionException;
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\core\PBDataStructureFactory.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolver.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolver.java
deleted file mode 100644
index 3c01b7ad3166c693e6e051a28c175a32858f3ce2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolver.java
+++ /dev/null
@@ -1,394 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.core;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import java.util.Comparator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ConflictTimer;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.ConflictTimerAdapter;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.DataStructureFactory;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IOrder;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.LearnedConstraintsDeletionStrategy;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.LearningStrategy;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.RestartStrategy;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.Solver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.IPBSolverService;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.ObjectiveFunction;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.ObjectiveFunctionComparator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.orders.IOrderObjective;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.Constr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.UnitPropagationListener;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class PBSolver
-/*     */   extends Solver<PBDataStructureFactory>
-/*     */   implements IPBSolverService, IPBCDCLSolver<PBDataStructureFactory>
-/*     */ {
-/*     */   private ObjectiveFunction objf;
-/*     */   protected PBSolverStats pbStats;
-/*     */   public final LearnedConstraintsDeletionStrategy objectiveFunctionBased;
-/*     */   
-/*     */   public PBSolver(LearningStrategy<PBDataStructureFactory> learner, PBDataStructureFactory dsf, IOrder order, RestartStrategy restarter) {
-/*  74 */     super(learner, dsf, order, restarter);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 228 */     this.objectiveFunctionBased = new LearnedConstraintsDeletionStrategy()
-/*     */       {
-/*     */         private boolean[] inObjectiveFunction;
-/*     */ 
-/*     */ 
-/*     */         
-/* 234 */         private final ConflictTimer clauseManagement = (ConflictTimer)new ConflictTimerAdapter(PBSolver.this, 1000)
-/*     */           {
-/*     */             
-/* 237 */             private int nbconflict = 0;
-/*     */ 
-/*     */             
-/* 240 */             private int nextbound = 5000;
-/*     */ 
-/*     */             
-/*     */             public void run() {
-/* 244 */               this.nbconflict += bound();
-/* 245 */               if (this.nbconflict >= this.nextbound) {
-/* 246 */                 this.nextbound += 1000;
-/* 247 */                 this.nbconflict = 0;
-/* 248 */                 PBSolver.this.setNeedToReduceDB(true);
-/*     */               } 
-/*     */             }
-/*     */ 
-/*     */             
-/*     */             public void reset() {
-/* 254 */               super.reset();
-/* 255 */               this.nextbound = 5000;
-/* 256 */               if (this.nbconflict >= this.nextbound) {
-/* 257 */                 this.nbconflict = 0;
-/* 258 */                 PBSolver.this.setNeedToReduceDB(true);
-/*     */               } 
-/*     */             }
-/*     */           };
-/*     */         
-/*     */         public void reduce(IVec<Constr> learnedConstrs) {
-/*     */           int j;
-/* 265 */           for (int i = j = 0; i < learnedConstrs.size(); i++) {
-/* 266 */             Constr c = (Constr)learnedConstrs.get(i);
-/* 267 */             if (c.locked() || c.getActivity() <= 2.0D) {
-/* 268 */               learnedConstrs.set(j++, learnedConstrs.get(i));
-/*     */             } else {
-/* 270 */               c.remove((UnitPropagationListener)PBSolver.this);
-/*     */             } 
-/*     */           } 
-/* 273 */           if (PBSolver.this.isVerbose()) {
-/* 274 */             System.out.println(PBSolver.this.getLogPrefix() + "cleaning " + (learnedConstrs
-/* 275 */                 .size() - j) + " clauses out of " + learnedConstrs
-/* 276 */                 .size() + "/" + PBSolver.this.pbStats
-/* 277 */                 .getConflicts());
-/* 278 */             System.out.flush();
-/*     */           } 
-/* 280 */           learnedConstrs.shrinkTo(j);
-/*     */         }
-/*     */ 
-/*     */         
-/*     */         public ConflictTimer getTimer() {
-/* 285 */           return this.clauseManagement;
-/*     */         }
-/*     */ 
-/*     */         
-/*     */         public String toString() {
-/* 290 */           return "Objective function driven learned constraints deletion strategy";
-/*     */         }
-/*     */         
-/*     */         public void init() {
-/* 294 */           this.inObjectiveFunction = new boolean[PBSolver.this.nVars() + 1];
-/* 295 */           if (PBSolver.this.objf == null) {
-/* 296 */             throw new IllegalStateException("The strategy does not make sense if there is no objective function");
-/*     */           }
-/*     */           
-/* 299 */           IteratorInt it = PBSolver.this.objf.getVars().iterator();
-/* 300 */           while (it.hasNext()) {
-/* 301 */             this.inObjectiveFunction[Math.abs(it.next())] = true;
-/*     */           }
-/* 303 */           this.clauseManagement.reset();
-/*     */         }
-/*     */         
-/*     */         public void onClauseLearning(Constr constr) {
-/* 307 */           boolean fullObj = true;
-/*     */           
-/* 309 */           for (int i = 0; i < constr.size(); i++)
-/*     */           {
-/* 311 */             fullObj = (fullObj && this.inObjectiveFunction[LiteralsUtils.var(constr.get(i))]);
-/*     */           }
-/* 313 */           if (fullObj) {
-/* 314 */             constr.incActivity(1.0D);
-/*     */           } else {
-/* 316 */             constr.incActivity(constr.size());
-/*     */           } 
-/*     */         }
-/*     */         
-/*     */         public void onConflictAnalysis(Constr reason) {}
-/*     */         
-/*     */         public void onPropagation(Constr from, int propagated) {}
-/*     */       };
-/*     */     this.pbStats = new PBSolverStats();
-/*     */     initStats(this.pbStats);
-/*     */   }
-/*     */   
-/*     */   public IConstr addPseudoBoolean(IVecInt literals, IVec<BigInteger> coeffs, boolean moreThan, BigInteger degree) throws ContradictionException {
-/*     */     IVecInt vlits = dimacs2internal(literals);
-/*     */     assert vlits.size() == literals.size();
-/*     */     assert literals.size() == coeffs.size();
-/*     */     return addConstr(((PBDataStructureFactory)this.dsfactory).createPseudoBooleanConstraint(vlits, coeffs, moreThan, degree));
-/*     */   }
-/*     */   
-/*     */   public void setObjectiveFunction(ObjectiveFunction obj) {
-/*     */     this.objf = obj;
-/*     */     IOrder order = getOrder();
-/*     */     if (order instanceof IOrderObjective)
-/*     */       ((IOrderObjective)order).setObjectiveFunction(obj); 
-/*     */     if (obj != null)
-/*     */       dimacs2internal(obj.getVars()); 
-/*     */   }
-/*     */   
-/*     */   public ObjectiveFunction getObjectiveFunction() {
-/*     */     return this.objf;
-/*     */   }
-/*     */   
-/*     */   public IConstr addAtMost(IVecInt literals, IVecInt coeffs, int degree) throws ContradictionException {
-/*     */     Vec vec = new Vec(coeffs.size());
-/*     */     for (int i = 0; i < coeffs.size(); i++)
-/*     */       vec.push(BigInteger.valueOf(coeffs.get(i))); 
-/*     */     return addAtMost(literals, (IVec<BigInteger>)vec, BigInteger.valueOf(degree));
-/*     */   }
-/*     */   
-/*     */   public IConstr addAtMost(IVecInt literals, IVec<BigInteger> coeffs, BigInteger degree) throws ContradictionException {
-/*     */     IVecInt vlits = dimacs2internal(literals);
-/*     */     assert vlits.size() == literals.size();
-/*     */     assert literals.size() == coeffs.size();
-/*     */     return addConstr(((PBDataStructureFactory)this.dsfactory).createPseudoBooleanConstraint(vlits, coeffs, false, degree));
-/*     */   }
-/*     */   
-/*     */   public IConstr addAtLeast(IVecInt literals, IVecInt coeffs, int degree) throws ContradictionException {
-/*     */     Vec vec = new Vec(coeffs.size());
-/*     */     for (int i = 0; i < coeffs.size(); i++)
-/*     */       vec.push(BigInteger.valueOf(coeffs.get(i))); 
-/*     */     return addAtLeast(literals, (IVec<BigInteger>)vec, BigInteger.valueOf(degree));
-/*     */   }
-/*     */   
-/*     */   public IConstr addAtLeast(IVecInt literals, IVec<BigInteger> coeffs, BigInteger degree) throws ContradictionException {
-/*     */     IVecInt vlits = dimacs2internal(literals);
-/*     */     assert vlits.size() == literals.size();
-/*     */     assert literals.size() == coeffs.size();
-/*     */     return addConstr(((PBDataStructureFactory)this.dsfactory).createPseudoBooleanConstraint(vlits, coeffs, true, degree));
-/*     */   }
-/*     */   
-/*     */   public int[] primeImplicant() {
-/*     */     WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy;
-/*     */     String primeApproach = System.getProperty("prime");
-/*     */     if ("OBJECTIVE".equals(primeApproach)) {
-/*     */       watcherBasedPrimeImplicantStrategy = new WatcherBasedPrimeImplicantStrategy((Comparator)new ObjectiveFunctionComparator(this.objf));
-/*     */     } else {
-/*     */       watcherBasedPrimeImplicantStrategy = new WatcherBasedPrimeImplicantStrategy();
-/*     */     } 
-/*     */     int[] implicant = watcherBasedPrimeImplicantStrategy.compute(this);
-/*     */     this.prime = watcherBasedPrimeImplicantStrategy.getPrimeImplicantAsArrayWithHoles();
-/*     */     return implicant;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\core\PBSolver.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolverResolution.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolverResolution.java
deleted file mode 100644
index a102212361bf9abe10b7b67e05a073305062a4ff..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolverResolution.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.core;
-/*    */ 
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IOrder;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.LearningStrategy;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.RestartStrategy;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class PBSolverResolution
-/*    */   extends PBSolver
-/*    */ {
-/*    */   public PBSolverResolution(LearningStrategy<PBDataStructureFactory> learner, PBDataStructureFactory dsf, IOrder order, RestartStrategy restarter) {
-/* 52 */     super(learner, dsf, order, restarter);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\core\PBSolverResolution.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolverStats.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolverStats.java
deleted file mode 100644
index dfc4be3cd2301387976792b02c1e4037120069b7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/core/PBSolverStats.java
+++ /dev/null
@@ -1,255 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.core;
-/*     */ 
-/*     */ import java.io.PrintWriter;
-/*     */ import java.math.BigInteger;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.SolverStats;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class PBSolverStats
-/*     */   extends SolverStats
-/*     */ {
-/*     */   private long numberOfReductions;
-/*     */   private long numberOfReductionsByPower2;
-/*     */   private long numberOfRightShiftsForCoeffs;
-/*     */   private long numberOfReductionsByGCD;
-/*     */   private long numberOfLearnedConstraintsReduced;
-/*     */   private long numberOfResolution;
-/*     */   private long numberOfCP;
-/*     */   private long numberOfRoundingOperations;
-/*     */   private long numberOfEasyRoundingOperations;
-/*     */   private long numberOfEndingSkipping;
-/*     */   private long numberOfInternalSkipping;
-/*     */   private long numberOfDerivationSteps;
-/*     */   private long numberOfRemainingUnassigned;
-/*     */   private long numberOfRemainingAssigned;
-/*     */   private long falsifiedLiteralsRemovedFromConflict;
-/*     */   private long falsifiedLiteralsRemovedFromReason;
-/*     */   private long timeForArtithmeticOperations;
-/*     */   private BigInteger minRemoved;
-/*     */   private BigInteger maxRemoved;
-/*     */   private int nbRemoved;
-/*     */   
-/*     */   public void reset() {
-/*  86 */     super.reset();
-/*  87 */     this.numberOfReductions = 0L;
-/*  88 */     this.numberOfLearnedConstraintsReduced = 0L;
-/*  89 */     this.numberOfResolution = 0L;
-/*  90 */     this.numberOfCP = 0L;
-/*  91 */     this.numberOfRoundingOperations = 0L;
-/*  92 */     this.numberOfReductionsByPower2 = 0L;
-/*  93 */     this.numberOfRightShiftsForCoeffs = 0L;
-/*  94 */     this.numberOfReductionsByGCD = 0L;
-/*  95 */     this.numberOfEndingSkipping = 0L;
-/*  96 */     this.numberOfInternalSkipping = 0L;
-/*  97 */     this.numberOfDerivationSteps = 0L;
-/*  98 */     this.numberOfRemainingUnassigned = 0L;
-/*  99 */     this.numberOfRemainingAssigned = 0L;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void printStat(PrintWriter out, String prefix) {
-/* 104 */     super.printStat(out, prefix);
-/* 105 */     out.println(prefix + "number of reductions to clauses (during analyze)\t: " + 
-/*     */         
-/* 107 */         getNumberOfReductions());
-/* 108 */     out.println(prefix + "number of learned constraints concerned by reduction\t: " + this.numberOfLearnedConstraintsReduced);
-/*     */ 
-/*     */     
-/* 111 */     out.println(prefix + "number of learning phase by resolution\t: " + this.numberOfResolution);
-/*     */     
-/* 113 */     out.println(prefix + "number of learning phase by cutting planes\t: " + this.numberOfCP);
-/*     */     
-/* 115 */     out.println(prefix + "number of rounding to 1 operations\t: " + this.numberOfRoundingOperations);
-/*     */     
-/* 117 */     out.println(prefix + "number of easy rounding to 1 operations (no literal elimination needed)\t: " + this.numberOfEasyRoundingOperations);
-/*     */ 
-/*     */     
-/* 120 */     out.println(prefix + "number of reductions of the coefficients by power 2 \t: " + 
-/*     */         
-/* 122 */         getNumberOfReductionsByPower2());
-/* 123 */     out.println(prefix + "number of right shift for reduction by power 2 \t: " + this.numberOfRightShiftsForCoeffs);
-/*     */ 
-/*     */     
-/* 126 */     out.println(prefix + "number of reductions of the coefficients by GCD over coefficients \t: " + this.numberOfReductionsByGCD);
-/*     */ 
-/*     */     
-/* 129 */     out.println(prefix + "number of ending skipping \t: " + this.numberOfEndingSkipping);
-/*     */     
-/* 131 */     out.println(prefix + "number of internal skipping \t: " + this.numberOfInternalSkipping);
-/*     */     
-/* 133 */     out.println(prefix + "number of derivation steps \t: " + 
-/* 134 */         getNumberOfDerivationSteps());
-/* 135 */     out.println(prefix + "number of skipped derivation steps \t: " + (this.numberOfInternalSkipping + this.numberOfEndingSkipping));
-/*     */ 
-/*     */     
-/* 138 */     out.println(prefix + "number of remaining unassigned \t: " + this.numberOfRemainingUnassigned);
-/*     */     
-/* 140 */     out.println(prefix + "number of remaining assigned \t: " + this.numberOfRemainingAssigned);
-/*     */     
-/* 142 */     out.println(prefix + "number of falsified literals weakened from reason\t: " + this.falsifiedLiteralsRemovedFromReason);
-/*     */ 
-/*     */     
-/* 145 */     out.println(prefix + "number of falsified literals weakened from conflict\t: " + this.falsifiedLiteralsRemovedFromConflict);
-/*     */ 
-/*     */     
-/* 148 */     out.println(prefix + "time for arithmetic operations\t: " + this.timeForArtithmeticOperations);
-/*     */     
-/* 150 */     out.println(prefix + "minimum degree of deleted constraints\t: " + this.minRemoved);
-/*     */     
-/* 152 */     out.println(prefix + "maximum degree of deleted constraints\t: " + this.maxRemoved);
-/*     */     
-/* 154 */     out.println(prefix + "number of deleted constraints\t: " + this.nbRemoved);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public long getNumberOfReductions() {
-/* 159 */     return this.numberOfReductions;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public long getNumberOfReductionsByPower2() {
-/* 167 */     return this.numberOfReductionsByPower2;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public long getNumberOfDerivationSteps() {
-/* 247 */     return this.numberOfDerivationSteps;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\core\PBSolverStats.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/orders/IOrderObjective.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/orders/IOrderObjective.java
deleted file mode 100644
index 41a77b7beb62005d982d24ce53d1279f4ae52a3f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/orders/IOrderObjective.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.orders;
-
-import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IOrder;
-import net.fabricmc.loader.impl.lib.sat4j.pb.ObjectiveFunction;
-
-public interface IOrderObjective extends IOrder {
-  void setObjectiveFunction(ObjectiveFunction paramObjectiveFunction);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\orders\IOrderObjective.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/orders/VarOrderHeapObjective.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/orders/VarOrderHeapObjective.java
deleted file mode 100644
index 739ef315bf16fbde9bb7ee9f98f94e52eb6370b7..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/orders/VarOrderHeapObjective.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.orders;
-/*    */ 
-/*    */ import java.math.BigInteger;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.core.LiteralsUtils;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.core.IPhaseSelectionStrategy;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.minisat.orders.VarOrderHeap;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.pb.ObjectiveFunction;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class VarOrderHeapObjective
-/*    */   extends VarOrderHeap
-/*    */   implements IOrderObjective
-/*    */ {
-/*    */   private ObjectiveFunction obj;
-/*    */   
-/*    */   public VarOrderHeapObjective() {
-/* 55 */     this((IPhaseSelectionStrategy)new PhaseInLastLearnedClauseSelectionStrategy());
-/*    */   }
-/*    */   
-/*    */   public VarOrderHeapObjective(IPhaseSelectionStrategy strategy) {
-/* 59 */     super(strategy);
-/*    */   }
-/*    */   
-/*    */   public void setObjectiveFunction(ObjectiveFunction obj) {
-/* 63 */     this.obj = obj;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void init() {
-/* 68 */     super.init();
-/* 69 */     if (this.obj != null) {
-/* 70 */       IVecInt vars = this.obj.getVars();
-/* 71 */       IVec<BigInteger> coefs = this.obj.getCoeffs();
-/* 72 */       for (int i = 0; i < vars.size(); i++) {
-/* 73 */         int dimacsLiteral = vars.get(i);
-/* 74 */         if (this.lits.belongsToPool(Math.abs(dimacsLiteral))) {
-/* 75 */           int p = this.lits.getFromPool(dimacsLiteral);
-/* 76 */           BigInteger c = (BigInteger)coefs.get(i);
-/* 77 */           if (c.signum() < 0) {
-/* 78 */             p = LiteralsUtils.neg(p);
-/*    */           }
-/* 80 */           int var = LiteralsUtils.var(p);
-/* 81 */           this.activity[var] = (c.bitLength() < 64) ? c
-/* 82 */             .abs().longValue() : 9.223372036854776E18D;
-/*    */           
-/* 84 */           if (this.heap.inHeap(var)) {
-/* 85 */             this.heap.increase(var);
-/*    */           } else {
-/* 87 */             this.heap.insert(var);
-/*    */           } 
-/* 89 */           this.phaseStrategy.init(var, LiteralsUtils.neg(p));
-/*    */         } 
-/*    */       } 
-/*    */     } 
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 97 */     return super.toString() + " taking into account the objective function";
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\orders\VarOrderHeapObjective.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/DependencyHelper.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/DependencyHelper.java
deleted file mode 100644
index 11a16ebc947d53ec5086bf1c56c4489ad3880ce9..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/DependencyHelper.java
+++ /dev/null
@@ -1,884 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.tools;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.Collection;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.Map;
-/*     */ import java.util.Set;
-/*     */ import java.util.TreeSet;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.IPBSolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.ObjectiveFunction;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.tools.GateTranslator;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class DependencyHelper<T, C>
-/*     */ {
-/*  68 */   public static final INegator NO_NEGATION = new INegator()
-/*     */     {
-/*     */       public boolean isNegated(Object thing) {
-/*  71 */         return false;
-/*     */       }
-/*     */       
-/*     */       public Object unNegate(Object thing) {
-/*  75 */         return thing;
-/*     */       }
-/*     */     };
-/*     */   
-/*  79 */   public static final INegator BASIC_NEGATION = new INegator()
-/*     */     {
-/*     */       public boolean isNegated(Object thing) {
-/*  82 */         return thing instanceof DependencyHelper.Negation;
-/*     */       }
-/*     */       
-/*     */       public Object unNegate(Object thing) {
-/*  86 */         return ((Negation)thing).getThing();
-/*     */       }
-/*     */     };
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private static final class Negation
-/*     */   {
-/*     */     private final Object thing;
-/*     */ 
-/*     */     
-/*     */     Object getThing() {
-/*  98 */       return this.thing;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public String toString() {
-/* 103 */       return "-" + this.thing;
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/* 112 */   private final Map<T, Integer> mapToDimacs = new HashMap<>();
-/* 113 */   private final Map<Integer, T> mapToDomain = new HashMap<>();
-/* 114 */   final Map<IConstr, C> descs = new HashMap<>();
-/*     */   
-/*     */   private final XplainPB xplain;
-/*     */   private final GateTranslator gator;
-/*     */   final IPBSolver solver;
-/* 119 */   private INegator negator = BASIC_NEGATION;
-/*     */ 
-/*     */   
-/*     */   private ObjectiveFunction objFunction;
-/*     */   
-/*     */   private IVecInt objLiterals;
-/*     */   
-/*     */   private IVec<BigInteger> objCoefs;
-/*     */   
-/*     */   private final boolean explanationEnabled;
-/*     */   
-/*     */   private final boolean canonicalOptFunction;
-/*     */ 
-/*     */   
-/*     */   public DependencyHelper(IPBSolver solver) {
-/* 134 */     this(solver, true);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public DependencyHelper(IPBSolver solver, boolean explanationEnabled) {
-/* 148 */     this(solver, explanationEnabled, true);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public DependencyHelper(IPBSolver solver, boolean explanationEnabled, boolean canonicalOptFunctionEnabled) {
-/* 169 */     if (explanationEnabled) {
-/* 170 */       this.xplain = new XplainPB(solver);
-/* 171 */       this.solver = this.xplain;
-/*     */     } else {
-/* 173 */       this.xplain = null;
-/* 174 */       this.solver = solver;
-/*     */     } 
-/* 176 */     this.gator = new GateTranslator((ISolver)this.solver);
-/* 177 */     this.explanationEnabled = explanationEnabled;
-/* 178 */     this.canonicalOptFunction = canonicalOptFunctionEnabled;
-/*     */   }
-/*     */   
-/*     */   public void setNegator(INegator negator) {
-/* 182 */     this.negator = negator;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected int getIntValue(T thing) {
-/* 193 */     return getIntValue(thing, true);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected int getIntValue(T thing, boolean create) {
-/*     */     T myThing;
-/* 209 */     boolean negated = this.negator.isNegated(thing);
-/* 210 */     if (negated) {
-/* 211 */       myThing = (T)this.negator.unNegate(thing);
-/*     */     } else {
-/* 213 */       myThing = thing;
-/*     */     } 
-/* 215 */     Integer intValue = this.mapToDimacs.get(myThing);
-/* 216 */     if (intValue == null) {
-/* 217 */       if (create) {
-/* 218 */         intValue = Integer.valueOf(this.solver.nextFreeVarId(true));
-/* 219 */         this.mapToDomain.put(intValue, myThing);
-/* 220 */         this.mapToDimacs.put(myThing, intValue);
-/*     */       } else {
-/* 222 */         throw new IllegalArgumentException("" + myThing + " is unknown in the solver!");
-/*     */       } 
-/*     */     }
-/*     */     
-/* 226 */     if (negated) {
-/* 227 */       return -intValue.intValue();
-/*     */     }
-/* 229 */     return intValue.intValue();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Collection<T> getASolution() {
-/* 275 */     int[] model = this.solver.model();
-/* 276 */     Collection<T> toInstall = new ArrayList<>();
-/* 277 */     if (model != null) {
-/* 278 */       for (int i : model) {
-/* 279 */         if (i > 0) {
-/* 280 */           toInstall.add(this.mapToDomain.get(Integer.valueOf(i)));
-/*     */         }
-/*     */       } 
-/*     */     }
-/* 284 */     return toInstall;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean hasASolution() throws TimeoutException {
-/* 319 */     return this.solver.isSatisfiable();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Set<C> why() throws TimeoutException {
-/* 361 */     if (!this.explanationEnabled) {
-/* 362 */       throw new UnsupportedOperationException("Explanation not enabled!");
-/*     */     }
-/* 364 */     Collection<IConstr> explanation = this.xplain.explain();
-/* 365 */     Set<C> ezexplain = new TreeSet<>();
-/* 366 */     for (IConstr constr : explanation) {
-/* 367 */       C desc = this.descs.get(constr);
-/* 368 */       if (desc != null) {
-/* 369 */         ezexplain.add(desc);
-/*     */       }
-/*     */     } 
-/* 372 */     return ezexplain;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setTrue(T thing, C name) throws ContradictionException {
-/* 423 */     IConstr constr = this.gator.gateTrue(getIntValue(thing));
-/* 424 */     if (constr != null) {
-/* 425 */       this.descs.put(constr, name);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setFalse(T thing, C name) throws ContradictionException {
-/* 442 */     IConstr constr = this.gator.gateFalse(getIntValue(thing));
-/*     */     
-/* 444 */     if (constr != null) {
-/* 445 */       this.descs.put(constr, name);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public ImplicationRHS<T, C> implication(T... lhs) {
-/* 459 */     VecInt vecInt = new VecInt();
-/* 460 */     for (T t : lhs) {
-/* 461 */       vecInt.push(-getIntValue(t));
-/*     */     }
-/* 463 */     return new ImplicationRHS<>(this, (IVecInt)vecInt);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public ImplicationNamer<T, C> atMost(int i, T... things) throws ContradictionException {
-/* 509 */     Vec vec = new Vec();
-/* 510 */     VecInt vecInt = new VecInt();
-/* 511 */     for (T t : things) {
-/* 512 */       vecInt.push(getIntValue(t));
-/*     */     }
-/* 514 */     vec.push(this.solver.addAtMost((IVecInt)vecInt, i));
-/* 515 */     return new ImplicationNamer<>(this, (IVec<IConstr>)vec);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void clause(C name, T... things) throws ContradictionException {
-/* 548 */     VecInt vecInt = new VecInt(things.length);
-/* 549 */     for (T t : things) {
-/* 550 */       vecInt.push(getIntValue(t));
-/*     */     }
-/* 552 */     IConstr constr = this.gator.addClause((IVecInt)vecInt);
-/*     */     
-/* 554 */     if (constr != null) {
-/* 555 */       this.descs.put(constr, name);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setObjectiveFunction(WeightedObject<T>... wobj) {
-/* 683 */     createObjectivetiveFunctionIfNeeded(wobj.length);
-/* 684 */     for (WeightedObject<T> wo : wobj) {
-/* 685 */       addProperly(wo.thing, wo.getWeight());
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private void addProperly(T thing, BigInteger weight) {
-/* 691 */     int lit = getIntValue(thing);
-/*     */     int index;
-/* 693 */     if (this.canonicalOptFunction && (
-/* 694 */       index = this.objLiterals.indexOf(lit)) != -1) {
-/* 695 */       this.objCoefs.set(index, ((BigInteger)this.objCoefs.get(index)).add(weight));
-/* 696 */       if (((BigInteger)this.objCoefs.get(index)).equals(BigInteger.ZERO)) {
-/* 697 */         this.objLiterals.delete(index);
-/* 698 */         this.objCoefs.delete(index);
-/*     */       } 
-/*     */     } else {
-/* 701 */       this.objLiterals.push(lit);
-/* 702 */       this.objCoefs.push(weight);
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private void createObjectivetiveFunctionIfNeeded(int n) {
-/* 707 */     if (this.objFunction == null) {
-/* 708 */       this.objLiterals = (IVecInt)new VecInt(n);
-/* 709 */       this.objCoefs = (IVec<BigInteger>)new Vec(n);
-/* 710 */       this.objFunction = new ObjectiveFunction(this.objLiterals, this.objCoefs);
-/*     */       
-/* 712 */       this.solver.setObjectiveFunction(this.objFunction);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IPBSolver getSolver() {
-/* 857 */     if (this.explanationEnabled) {
-/* 858 */       return (IPBSolver)this.xplain.decorated();
-/*     */     }
-/* 860 */     return this.solver;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void reset() {
-/* 869 */     this.mapToDimacs.clear();
-/* 870 */     this.mapToDomain.clear();
-/* 871 */     this.descs.clear();
-/* 872 */     this.solver.reset();
-/* 873 */     if (this.objLiterals != null) {
-/* 874 */       this.objLiterals.clear();
-/* 875 */       this.objCoefs.clear();
-/*     */     } 
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\tools\DependencyHelper.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/INegator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/INegator.java
deleted file mode 100644
index 8b241ec31f458d41b164a6b3fa9fb0bf738cb0fa..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/INegator.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.pb.tools;
-
-public interface INegator {
-  boolean isNegated(Object paramObject);
-  
-  Object unNegate(Object paramObject);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\tools\INegator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationAnd.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationAnd.java
deleted file mode 100644
index caafaabbcd59e8e5a58d3b3242ab26fe7ee78cfe..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationAnd.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.tools;
-/*     */ 
-/*     */ import java.util.Iterator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class ImplicationAnd<T, C>
-/*     */ {
-/*     */   private final DependencyHelper<T, C> helper;
-/*     */   private final IVecInt clause;
-/*  54 */   private final IVec<IConstr> toName = (IVec<IConstr>)new Vec();
-/*     */   
-/*     */   public ImplicationAnd(DependencyHelper<T, C> helper, IVecInt clause) {
-/*  57 */     this.clause = clause;
-/*  58 */     this.helper = helper;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public ImplicationAnd<T, C> andNot(T thing) throws ContradictionException {
-/*  89 */     VecInt vecInt = new VecInt();
-/*  90 */     this.clause.copyTo((IVecInt)vecInt);
-/*  91 */     vecInt.push(-this.helper.getIntValue(thing));
-/*  92 */     IConstr constr = this.helper.solver.addClause((IVecInt)vecInt);
-/*  93 */     if (constr != null) {
-/*  94 */       this.toName.push(constr);
-/*     */     }
-/*  96 */     return this;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void named(C name) {
-/* 108 */     for (Iterator<IConstr> it = this.toName.iterator(); it.hasNext();)
-/* 109 */       this.helper.descs.put(it.next(), name); 
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\tools\ImplicationAnd.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationNamer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationNamer.java
deleted file mode 100644
index 510c7983203c7a7fca68296b7edbb8c6b3da1368..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationNamer.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.pb.tools;
-/*    */ 
-/*    */ import java.util.Iterator;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*    */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ImplicationNamer<T, C>
-/*    */ {
-/*    */   private final DependencyHelper<T, C> helper;
-/* 51 */   private IVec<IConstr> toName = (IVec<IConstr>)new Vec();
-/*    */   
-/*    */   public ImplicationNamer(DependencyHelper<T, C> helper, IVec<IConstr> toName) {
-/* 54 */     this.toName = toName;
-/* 55 */     this.helper = helper;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void named(C name) {
-/* 65 */     for (Iterator<IConstr> it = this.toName.iterator(); it.hasNext();)
-/* 66 */       this.helper.descs.put(it.next(), name); 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\tools\ImplicationNamer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationRHS.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationRHS.java
deleted file mode 100644
index 63314419a7d37f594d7ff7645144041958846c31..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/ImplicationRHS.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.tools;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.Vec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class ImplicationRHS<T, C>
-/*     */ {
-/*     */   private final IVecInt clause;
-/*     */   private final DependencyHelper<T, C> helper;
-/*  52 */   private final IVec<IConstr> toName = (IVec<IConstr>)new Vec();
-/*     */   
-/*     */   public ImplicationRHS(DependencyHelper<T, C> helper, IVecInt clause) {
-/*  55 */     this.clause = clause;
-/*  56 */     this.helper = helper;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public ImplicationNamer<T, C> implies(T... things) throws ContradictionException {
-/*  85 */     for (T t : things) {
-/*  86 */       this.clause.push(this.helper.getIntValue(t));
-/*     */     }
-/*  88 */     this.toName.push(this.helper.solver.addClause(this.clause));
-/*  89 */     return new ImplicationNamer<>(this.helper, this.toName);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public ImplicationAnd<T, C> impliesNot(T thing) throws ContradictionException {
-/* 102 */     ImplicationAnd<T, C> and = new ImplicationAnd<>(this.helper, this.clause);
-/*     */     
-/* 104 */     and.andNot(thing);
-/* 105 */     return and;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\tools\ImplicationRHS.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/WeightedObject.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/WeightedObject.java
deleted file mode 100644
index af7a73fa6682f5e60fe0a5f024f5a8ab8b335adb..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/WeightedObject.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.tools;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class WeightedObject<T>
-/*     */   implements Comparable<WeightedObject<T>>
-/*     */ {
-/*     */   public final T thing;
-/*     */   private BigInteger weight;
-/*     */   
-/*     */   private WeightedObject(T thing, BigInteger weight) {
-/*  41 */     this.thing = thing;
-/*  42 */     this.weight = weight;
-/*     */   }
-/*     */   
-/*     */   public BigInteger getWeight() {
-/*  46 */     return this.weight;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int compareTo(WeightedObject<T> arg0) {
-/*  54 */     return this.weight.compareTo(arg0.getWeight());
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static <E> WeightedObject<E> newWO(E e, BigInteger w) {
-/*  66 */     return new WeightedObject<>(e, w);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int hashCode() {
-/*  71 */     int prime = 31;
-/*  72 */     int result = 1;
-/*     */     
-/*  74 */     result = 31 * result + ((this.thing == null) ? 0 : this.thing.hashCode());
-/*     */     
-/*  76 */     result = 31 * result + ((this.weight == null) ? 0 : this.weight.hashCode());
-/*  77 */     return result;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean equals(Object obj) {
-/*  82 */     if (this == obj) {
-/*  83 */       return true;
-/*     */     }
-/*  85 */     if (obj == null) {
-/*  86 */       return false;
-/*     */     }
-/*  88 */     if (getClass() != obj.getClass()) {
-/*  89 */       return false;
-/*     */     }
-/*  91 */     WeightedObject<?> other = (WeightedObject)obj;
-/*  92 */     if (this.thing == null) {
-/*  93 */       if (other.thing != null) {
-/*  94 */         return false;
-/*     */       }
-/*  96 */     } else if (!this.thing.equals(other.thing)) {
-/*  97 */       return false;
-/*     */     } 
-/*  99 */     if (this.weight == null) {
-/* 100 */       if (other.weight != null) {
-/* 101 */         return false;
-/*     */       }
-/* 103 */     } else if (!this.weight.equals(other.weight)) {
-/* 104 */       return false;
-/*     */     } 
-/* 106 */     return true;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\tools\WeightedObject.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/XplainPB.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/XplainPB.java
deleted file mode 100644
index b4a817b6029dd9ef4f2316609c7e7d4a43645fb5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/pb/tools/XplainPB.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.pb.tools;
-/*     */ 
-/*     */ import java.math.BigInteger;
-/*     */ import java.util.Iterator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.IPBSolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.pb.ObjectiveFunction;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVec;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.tools.xplain.Xplain;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class XplainPB
-/*     */   extends Xplain<IPBSolver>
-/*     */   implements IPBSolver
-/*     */ {
-/*     */   public XplainPB(IPBSolver solver) {
-/*  55 */     super((ISolver)solver);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr addAtMost(IVecInt literals, int degree) throws ContradictionException {
-/*  78 */     VecInt vecInt = new VecInt(literals.size(), 1);
-/*  79 */     int newvar = createNewVar(literals);
-/*  80 */     literals.push(newvar);
-/*  81 */     vecInt.push(degree - vecInt.size());
-/*  82 */     IConstr constr = ((IPBSolver)decorated()).addAtMost(literals, (IVecInt)vecInt, degree);
-/*  83 */     if (constr == null) {
-/*     */       
-/*  85 */       discardLastestVar();
-/*     */     } else {
-/*  87 */       getConstrs().put(Integer.valueOf(newvar), constr);
-/*     */     } 
-/*  89 */     return constr;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr addPseudoBoolean(IVecInt lits, IVec<BigInteger> coeffs, boolean moreThan, BigInteger d) throws ContradictionException {
-/* 119 */     int newvar = createNewVar(lits);
-/* 120 */     lits.push(newvar);
-/* 121 */     if (moreThan && d.signum() >= 0) {
-/* 122 */       coeffs.push(d);
-/*     */     } else {
-/* 124 */       BigInteger sum = BigInteger.ZERO;
-/* 125 */       for (Iterator<BigInteger> ite = coeffs.iterator(); ite.hasNext();) {
-/* 126 */         sum = sum.add(ite.next());
-/*     */       }
-/* 128 */       sum = sum.subtract(d);
-/* 129 */       coeffs.push(sum.negate());
-/*     */     } 
-/*     */     
-/* 132 */     IConstr constr = ((IPBSolver)decorated()).addPseudoBoolean(lits, coeffs, moreThan, d);
-/* 133 */     if (constr == null) {
-/*     */       
-/* 135 */       discardLastestVar();
-/*     */     } else {
-/*     */       
-/* 138 */       getConstrs().put(Integer.valueOf(newvar), constr);
-/*     */     } 
-/* 140 */     return constr;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private IConstr addPseudoBoolean(IVecInt lits, IVecInt coeffs, boolean moreThan, int d) throws ContradictionException {
-/* 145 */     int newvar = createNewVar(lits);
-/* 146 */     lits.push(newvar);
-/* 147 */     if (moreThan && d >= 0) {
-/* 148 */       coeffs.push(d);
-/*     */     } else {
-/* 150 */       int sum = 0;
-/* 151 */       for (IteratorInt ite = coeffs.iterator(); ite.hasNext();) {
-/* 152 */         sum += ite.next();
-/*     */       }
-/* 154 */       sum -= d;
-/* 155 */       coeffs.push(-sum);
-/*     */     } 
-/*     */     
-/* 158 */     IConstr constr = moreThan ? ((IPBSolver)decorated()).addAtLeast(lits, coeffs, d) : ((IPBSolver)decorated()).addAtMost(lits, coeffs, d);
-/* 159 */     if (constr == null) {
-/*     */       
-/* 161 */       discardLastestVar();
-/*     */     } else {
-/*     */       
-/* 164 */       getConstrs().put(Integer.valueOf(newvar), constr);
-/*     */     } 
-/* 166 */     return constr;
-/*     */   }
-/*     */   
-/*     */   public void setObjectiveFunction(ObjectiveFunction obj) {
-/* 170 */     ((IPBSolver)decorated()).setObjectiveFunction(obj);
-/*     */   }
-/*     */   
-/*     */   public ObjectiveFunction getObjectiveFunction() {
-/* 174 */     return ((IPBSolver)decorated()).getObjectiveFunction();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public IConstr addAtMost(IVecInt literals, IVecInt coeffs, int degree) throws ContradictionException {
-/* 179 */     return addPseudoBoolean(literals, coeffs, false, degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr addAtLeast(IVecInt literals, IVecInt coeffs, int degree) throws ContradictionException {
-/* 189 */     return addPseudoBoolean(literals, coeffs, true, degree);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\pb\tools\XplainPB.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/AssignmentOrigin.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/AssignmentOrigin.java
deleted file mode 100644
index ad294dbdf6b073bec014010dc6ae8ca6b4804b6e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/AssignmentOrigin.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public enum AssignmentOrigin
-/*    */ {
-/* 39 */   UNASSIGNED("\033[0;37m"), DECIDED("\033[0;32m"),
-/* 40 */   PROPAGATED_ORIGINAL("\033[0;31m"),
-/* 41 */   PROPAGATED_LEARNED("\033[0;34m"),
-/* 42 */   DECIDED_PROPAGATED("\033[0;35m"),
-/* 43 */   DECIDED_PROPAGATED_LEARNED("\033[0;36m"),
-/*    */   
-/* 45 */   DECIDED_CYCLE("\033[0;42m");
-/*    */   
-/*    */   public static final String BLANK = "\033[0m";
-/*    */   
-/*    */   private final String color;
-/*    */ 
-/*    */   
-/*    */   AssignmentOrigin(String color) {
-/* 53 */     this.color = color;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\AssignmentOrigin.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Constr.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Constr.java
deleted file mode 100644
index baafcbd6db7d522fa14b6f88fec01a6ef2542171..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Constr.java
+++ /dev/null
@@ -1,183 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public interface Constr
-/*     */   extends IConstr
-/*     */ {
-/*  51 */   public static final Constr TAUTOLOGY = new Constr()
-/*     */     {
-/*     */       public boolean learnt() {
-/*  54 */         return false;
-/*     */       }
-/*     */       
-/*     */       public int size() {
-/*  58 */         return 0;
-/*     */       }
-/*     */       
-/*     */       public int get(int i) {
-/*  62 */         throw new UnsupportedOperationException("No elements in a tautology");
-/*     */       }
-/*     */ 
-/*     */       
-/*     */       public double getActivity() {
-/*  67 */         return 0.0D;
-/*     */       }
-/*     */       
-/*     */       public boolean canBePropagatedMultipleTimes() {
-/*  71 */         return false;
-/*     */       }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void remove(UnitPropagationListener upl) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public boolean simplify() {
-/*  83 */         return false;
-/*     */       }
-/*     */       
-/*     */       public void calcReason(int p, IVecInt outReason) {
-/*  87 */         throw new UnsupportedOperationException("A tautology cannot be a reason");
-/*     */       }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void incActivity(double claInc) {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public boolean locked() {
-/* 106 */         return false;
-/*     */       }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void setLearnt() {}
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void register() {}
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void rescaleBy(double d) {}
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void setActivity(double d) {}
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void assertConstraint(UnitPropagationListener s) {}
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public boolean canBeSatisfiedByCountingLiterals() {
-/* 134 */         return false;
-/*     */       }
-/*     */       
-/*     */       public int requiredNumberOfSatisfiedLiterals() {
-/* 138 */         return 0;
-/*     */       }
-/*     */       
-/*     */       public boolean isSatisfied() {
-/* 142 */         return true;
-/*     */       }
-/*     */       
-/*     */       public int getAssertionLevel(IVecInt trail, int decisionLevel) {
-/* 146 */         return 0;
-/*     */       }
-/*     */     };
-/*     */   
-/*     */   void remove(UnitPropagationListener paramUnitPropagationListener);
-/*     */   
-/*     */   boolean simplify();
-/*     */   
-/*     */   void calcReason(int paramInt, IVecInt paramIVecInt);
-/*     */   
-/*     */   void incActivity(double paramDouble);
-/*     */   
-/*     */   boolean locked();
-/*     */   
-/*     */   void setLearnt();
-/*     */   
-/*     */   void register();
-/*     */   
-/*     */   void rescaleBy(double paramDouble);
-/*     */   
-/*     */   void setActivity(double paramDouble);
-/*     */   
-/*     */   void assertConstraint(UnitPropagationListener paramUnitPropagationListener);
-/*     */   
-/*     */   boolean canBeSatisfiedByCountingLiterals();
-/*     */   
-/*     */   int requiredNumberOfSatisfiedLiterals();
-/*     */   
-/*     */   boolean isSatisfied();
-/*     */   
-/*     */   int getAssertionLevel(IVecInt paramIVecInt, int paramInt);
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\Constr.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ContradictionException.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ContradictionException.java
deleted file mode 100644
index 7a800672d772fe84765015103befdd30855e755d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ContradictionException.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ContradictionException
-/*    */   extends Exception
-/*    */ {
-/*    */   public ContradictionException() {}
-/*    */   
-/*    */   public ContradictionException(String message) {
-/* 54 */     super(message);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\ContradictionException.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IConstr.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IConstr.java
deleted file mode 100644
index 02afae7220088950b862eec005eaa3486f3d82be..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IConstr.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface IConstr {
-  boolean learnt();
-  
-  int size();
-  
-  int get(int paramInt);
-  
-  double getActivity();
-  
-  boolean canBePropagatedMultipleTimes();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\IConstr.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ILogAble.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ILogAble.java
deleted file mode 100644
index eb94480e054dc70b0c4a38d6aa8b2145a87ea110..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ILogAble.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public interface ILogAble
-/*    */ {
-/* 42 */   public static final ILogAble CONSOLE = new ILogAble()
-/*    */     {
-/*    */       public void log(String message) {
-/* 45 */         System.out.println(message);
-/*    */       }
-/*    */     };
-/*    */   
-/*    */   void log(String paramString);
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\ILogAble.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IOptimizationProblem.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IOptimizationProblem.java
deleted file mode 100644
index 4daded144d72e1edd44ce8dd1913481c6c6c8261..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IOptimizationProblem.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface IOptimizationProblem extends IProblem {
-  boolean admitABetterSolution(IVecInt paramIVecInt) throws TimeoutException;
-  
-  boolean hasNoObjectiveFunction();
-  
-  Number getObjectiveValue();
-  
-  void discardCurrentSolution() throws ContradictionException;
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\IOptimizationProblem.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IProblem.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IProblem.java
deleted file mode 100644
index f69e5c354f0c6d682fda5547bd83107e521cacfb..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IProblem.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface IProblem extends RandomAccessModel {
-  int[] model();
-  
-  int[] primeImplicant();
-  
-  boolean primeImplicant(int paramInt);
-  
-  boolean isSatisfiable() throws TimeoutException;
-  
-  boolean isSatisfiable(IVecInt paramIVecInt, boolean paramBoolean) throws TimeoutException;
-  
-  boolean isSatisfiable(IVecInt paramIVecInt) throws TimeoutException;
-  
-  int nVars();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\IProblem.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ISolver.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ISolver.java
deleted file mode 100644
index f9df606ae6b49686a6d8b414e01fc7f11afd710b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ISolver.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-import java.io.PrintWriter;
-import java.io.Serializable;
-
-public interface ISolver extends Serializable, IProblem {
-  int nextFreeVarId(boolean paramBoolean);
-  
-  IConstr addClause(IVecInt paramIVecInt) throws ContradictionException;
-  
-  IVecInt createBlockingClauseForCurrentModel();
-  
-  boolean removeConstr(IConstr paramIConstr);
-  
-  boolean removeSubsumedConstr(IConstr paramIConstr);
-  
-  IConstr addAtMost(IVecInt paramIVecInt, int paramInt) throws ContradictionException;
-  
-  void setTimeout(int paramInt);
-  
-  void expireTimeout();
-  
-  void reset();
-  
-  @Deprecated
-  void printStat(PrintWriter paramPrintWriter, String paramString);
-  
-  boolean isVerbose();
-  
-  String getLogPrefix();
-  
-  IVecInt unsatExplanation();
-  
-  int[] modelWithInternalVariables();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\ISolver.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ISolverService.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ISolverService.java
deleted file mode 100644
index 25cc259c0d42f3e58a17d9c4de672803b31a2343..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/ISolverService.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface ISolverService {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\ISolverService.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IVec.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IVec.java
deleted file mode 100644
index 058f34f62e83e713d84ebced452fbd6d4dbb7eb1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IVec.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-import java.io.Serializable;
-import java.util.Comparator;
-import java.util.Iterator;
-
-public interface IVec<T> extends Serializable, Cloneable {
-  int size();
-  
-  void shrinkTo(int paramInt);
-  
-  void pop();
-  
-  void ensure(int paramInt);
-  
-  IVec<T> push(T paramT);
-  
-  void clear();
-  
-  T last();
-  
-  T get(int paramInt);
-  
-  void set(int paramInt, T paramT);
-  
-  void remove(T paramT);
-  
-  void removeFromLast(T paramT);
-  
-  T delete(int paramInt);
-  
-  void copyTo(IVec<T> paramIVec);
-  
-  <E> void copyTo(E[] paramArrayOfE);
-  
-  void moveTo(IVec<T> paramIVec);
-  
-  void moveTo(int paramInt1, int paramInt2);
-  
-  void sort(Comparator<T> paramComparator);
-  
-  boolean isEmpty();
-  
-  Iterator<T> iterator();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\IVec.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IVecInt.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IVecInt.java
deleted file mode 100644
index 9fe9d820e7436c0b9ebf4fea54240ff49632e0f1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IVecInt.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-import java.io.Serializable;
-import java.util.Comparator;
-
-public interface IVecInt extends Serializable, Cloneable {
-  int size();
-  
-  void shrink(int paramInt);
-  
-  IVecInt pop();
-  
-  void growTo(int paramInt1, int paramInt2);
-  
-  void ensure(int paramInt);
-  
-  IVecInt push(int paramInt);
-  
-  void unsafePush(int paramInt);
-  
-  int unsafeGet(int paramInt);
-  
-  void clear();
-  
-  int last();
-  
-  int get(int paramInt);
-  
-  void set(int paramInt1, int paramInt2);
-  
-  boolean contains(int paramInt);
-  
-  int indexOf(int paramInt);
-  
-  void copyTo(IVecInt paramIVecInt);
-  
-  void copyTo(int[] paramArrayOfint);
-  
-  void moveTo(int[] paramArrayOfint);
-  
-  void moveTo(int paramInt1, int paramInt2);
-  
-  void remove(int paramInt);
-  
-  int delete(int paramInt);
-  
-  void sort();
-  
-  void sort(Comparator<Integer> paramComparator);
-  
-  void sortUnique();
-  
-  boolean isEmpty();
-  
-  IteratorInt iterator();
-  
-  int[] toArray();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\IVecInt.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IteratorInt.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IteratorInt.java
deleted file mode 100644
index d34395161a89f1c03be6950047e214231bc73f9e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/IteratorInt.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface IteratorInt {
-  boolean hasNext();
-  
-  int next();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\IteratorInt.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Lbool.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Lbool.java
deleted file mode 100644
index 6c617630ca2b43ef45d2ecb8402892ec2949c78b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Lbool.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class Lbool
-/*    */ {
-/* 43 */   public static final Lbool FALSE = new Lbool("F");
-/* 44 */   public static final Lbool TRUE = new Lbool("T");
-/* 45 */   public static final Lbool UNDEFINED = new Lbool("U");
-/*    */   private final String symbol;
-/*    */   
-/*    */   static {
-/* 49 */     FALSE.opposite = TRUE;
-/* 50 */     TRUE.opposite = FALSE;
-/* 51 */     UNDEFINED.opposite = UNDEFINED;
-/*    */   }
-/*    */   private Lbool opposite;
-/*    */   private Lbool(String symbol) {
-/* 55 */     this.symbol = symbol;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 74 */     return this.symbol;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\Lbool.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/MandatoryLiteralListener.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/MandatoryLiteralListener.java
deleted file mode 100644
index e694172220d6c4bc77f1d1df7dd44796cb03ee77..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/MandatoryLiteralListener.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface MandatoryLiteralListener {
-  void isMandatory(int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\MandatoryLiteralListener.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Propagatable.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Propagatable.java
deleted file mode 100644
index 756479234179f6e1bda9e11bb6cbd9da8b60ea4d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/Propagatable.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface Propagatable {
-  boolean propagate(UnitPropagationListener paramUnitPropagationListener, int paramInt);
-  
-  boolean propagatePI(MandatoryLiteralListener paramMandatoryLiteralListener, int paramInt);
-  
-  Constr toConstraint();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\Propagatable.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/RandomAccessModel.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/RandomAccessModel.java
deleted file mode 100644
index 7a590312ef7fb655aa9729ede69eef4190b3d224..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/RandomAccessModel.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface RandomAccessModel {
-  boolean model(int paramInt);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\RandomAccessModel.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/SearchListener.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/SearchListener.java
deleted file mode 100644
index 2b16016f0b298d883beffe7f421d47cbf383531e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/SearchListener.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-import java.io.Serializable;
-
-public interface SearchListener<S extends ISolverService> extends Serializable, UnitClauseConsumer {
-  void init(S paramS);
-  
-  void assuming(int paramInt);
-  
-  void propagating(int paramInt);
-  
-  void enqueueing(int paramInt, IConstr paramIConstr);
-  
-  void backtracking(int paramInt);
-  
-  void adding(int paramInt);
-  
-  void learn(IConstr paramIConstr);
-  
-  void delete(IConstr paramIConstr);
-  
-  void conflictFound(IConstr paramIConstr, int paramInt1, int paramInt2);
-  
-  void conflictFound(int paramInt);
-  
-  void solutionFound(int[] paramArrayOfint, RandomAccessModel paramRandomAccessModel);
-  
-  void beginLoop();
-  
-  void start();
-  
-  void end(Lbool paramLbool);
-  
-  void restarting();
-  
-  void backjump(int paramInt);
-  
-  void cleaning();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\SearchListener.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/SearchListenerAdapter.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/SearchListenerAdapter.java
deleted file mode 100644
index 182d0a680433bac520a31231779fcfd3d2c66736..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/SearchListenerAdapter.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public abstract class SearchListenerAdapter<S extends ISolverService> implements SearchListener<S> {
-  public void init(S solverService) {}
-  
-  public void assuming(int p) {}
-  
-  public void propagating(int p) {}
-  
-  public void enqueueing(int p, IConstr reason) {}
-  
-  public void backtracking(int p) {}
-  
-  public void adding(int p) {}
-  
-  public void learn(IConstr c) {}
-  
-  public void learnUnit(int p) {}
-  
-  public void delete(IConstr c) {}
-  
-  public void conflictFound(IConstr confl, int dlevel, int trailLevel) {}
-  
-  public void conflictFound(int p) {}
-  
-  public void solutionFound(int[] model, RandomAccessModel lazyModel) {}
-  
-  public void beginLoop() {}
-  
-  public void start() {}
-  
-  public void end(Lbool result) {}
-  
-  public void restarting() {}
-  
-  public void backjump(int backjumpLevel) {}
-  
-  public void cleaning() {}
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\SearchListenerAdapter.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/TimeoutException.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/TimeoutException.java
deleted file mode 100644
index 31174f2520d3a52ad6ef53616ea9d6d2539bf7c6..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/TimeoutException.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class TimeoutException
-/*    */   extends Exception
-/*    */ {
-/*    */   public TimeoutException() {}
-/*    */   
-/*    */   public TimeoutException(String message) {
-/* 58 */     super(message);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\TimeoutException.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitClauseConsumer.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitClauseConsumer.java
deleted file mode 100644
index 4ef3620901fff72bf363fff9124b3693a9c1609f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitClauseConsumer.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public interface UnitClauseConsumer
-/*    */ {
-/* 39 */   public static final UnitClauseConsumer VOID = new UnitClauseConsumer() {
-/*    */       public void learnUnit(int p) {}
-/*    */     };
-/*    */   
-/*    */   void learnUnit(int paramInt);
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\UnitClauseConsumer.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitClauseProvider.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitClauseProvider.java
deleted file mode 100644
index 4304c17726d8f1f07f10b499dda3362a5c9d195c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitClauseProvider.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.specs;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public interface UnitClauseProvider
-/*    */ {
-/* 44 */   public static final UnitClauseProvider VOID = new UnitClauseProvider() {
-/*    */       public void provideUnitClauses(UnitPropagationListener upl) {}
-/*    */     };
-/*    */   
-/*    */   void provideUnitClauses(UnitPropagationListener paramUnitPropagationListener);
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\UnitClauseProvider.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitPropagationListener.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitPropagationListener.java
deleted file mode 100644
index ab199d5f19abb5d75ecd4a14b2f42d338b4bd61c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/specs/UnitPropagationListener.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.specs;
-
-public interface UnitPropagationListener {
-  boolean enqueue(int paramInt);
-  
-  boolean enqueue(int paramInt, Constr paramConstr);
-  
-  void unset(int paramInt);
-  
-  int getPropagationLevel();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\specs\UnitPropagationListener.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/AbstractClauseSelectorSolver.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/AbstractClauseSelectorSolver.java
deleted file mode 100644
index 00466263fcd7fcb78d49900b6384eccce1c5fc9b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/AbstractClauseSelectorSolver.java
+++ /dev/null
@@ -1,180 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.tools;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import java.util.Iterator;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class AbstractClauseSelectorSolver<T extends ISolver>
-/*     */   extends SolverDecorator<T>
-/*     */ {
-/*     */   private int lastCreatedVar;
-/*     */   private boolean pooledVarId = false;
-/*     */   
-/*  60 */   private final SelectorState external = new SelectorState()
-/*     */     {
-/*     */       private IVecInt getNegatedSelectors() {
-/*  63 */         VecInt vecInt = new VecInt();
-/*  64 */         for (Iterator<Integer> iterator = AbstractClauseSelectorSolver.this.getAddedVars().iterator(); iterator.hasNext(); ) { int var = ((Integer)iterator.next()).intValue();
-/*  65 */           vecInt.push(-var); }
-/*     */         
-/*  67 */         return (IVecInt)vecInt;
-/*     */       }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public boolean isSatisfiable(IVecInt assumps, boolean global) throws TimeoutException {
-/*  76 */         IVecInt all = getNegatedSelectors();
-/*  77 */         assumps.copyTo(all);
-/*  78 */         return AbstractClauseSelectorSolver.this.decorated().isSatisfiable(all, global);
-/*     */       }
-/*     */       
-/*     */       public boolean isSatisfiable() throws TimeoutException {
-/*  82 */         return AbstractClauseSelectorSolver.this.decorated().isSatisfiable(getNegatedSelectors());
-/*     */       }
-/*     */       
-/*     */       public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
-/*  86 */         IVecInt all = getNegatedSelectors();
-/*  87 */         assumps.copyTo(all);
-/*  88 */         return AbstractClauseSelectorSolver.this.decorated().isSatisfiable(all);
-/*     */       }
-/*     */     };
-/*     */ 
-/*     */   
-/*  93 */   private final SelectorState internal = new SelectorState()
-/*     */     {
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public boolean isSatisfiable() throws TimeoutException
-/*     */       {
-/* 100 */         return AbstractClauseSelectorSolver.this.decorated().isSatisfiable();
-/*     */       }
-/*     */       
-/*     */       public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
-/* 104 */         return AbstractClauseSelectorSolver.this.decorated().isSatisfiable(assumps);
-/*     */       }
-/*     */ 
-/*     */       
-/*     */       public boolean isSatisfiable(IVecInt assumps, boolean global) throws TimeoutException {
-/* 109 */         return AbstractClauseSelectorSolver.this.decorated().isSatisfiable(assumps, global);
-/*     */       }
-/*     */     };
-/*     */   
-/* 113 */   private SelectorState selectedState = this.external;
-/*     */   
-/*     */   public AbstractClauseSelectorSolver(T solver) {
-/* 116 */     super(solver);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public abstract Collection<Integer> getAddedVars();
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected int createNewVar(IVecInt literals) {
-/* 128 */     for (IteratorInt it = literals.iterator(); it.hasNext();) {
-/* 129 */       if (Math.abs(it.next()) > nextFreeVarId(false)) {
-/* 130 */         throw new IllegalStateException("Please call newVar(int) before adding constraints!!!");
-/*     */       }
-/*     */     } 
-/*     */     
-/* 134 */     if (this.pooledVarId) {
-/* 135 */       this.pooledVarId = false;
-/* 136 */       return this.lastCreatedVar;
-/*     */     } 
-/* 138 */     this.lastCreatedVar = nextFreeVarId(true);
-/* 139 */     return this.lastCreatedVar;
-/*     */   }
-/*     */   
-/*     */   protected void discardLastestVar() {
-/* 143 */     this.pooledVarId = true;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps, boolean global) throws TimeoutException {
-/* 154 */     return this.selectedState.isSatisfiable(assumps, global);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable() throws TimeoutException {
-/* 159 */     return this.selectedState.isSatisfiable();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
-/* 164 */     return this.selectedState.isSatisfiable(assumps);
-/*     */   }
-/*     */   
-/*     */   private static interface SelectorState {
-/*     */     boolean isSatisfiable() throws TimeoutException;
-/*     */     
-/*     */     boolean isSatisfiable(IVecInt param1IVecInt) throws TimeoutException;
-/*     */     
-/*     */     boolean isSatisfiable(IVecInt param1IVecInt, boolean param1Boolean) throws TimeoutException;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\AbstractClauseSelectorSolver.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/FullClauseSelectorSolver.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/FullClauseSelectorSolver.java
deleted file mode 100644
index a3bac53737de083c21a98dc6c9e04112918118fd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/FullClauseSelectorSolver.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.tools;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.Map;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class FullClauseSelectorSolver<T extends ISolver>
-/*     */   extends AbstractClauseSelectorSolver<T>
-/*     */ {
-/*  51 */   private final Map<Integer, IConstr> constrs = new HashMap<>();
-/*  52 */   private final IVecInt lastClause = (IVecInt)new VecInt();
-/*     */   private IConstr lastConstr;
-/*     */   private final boolean skipDuplicatedEntries;
-/*     */   
-/*     */   public FullClauseSelectorSolver(T solver, boolean skipDuplicatedEntries) {
-/*  57 */     super(solver);
-/*  58 */     this.skipDuplicatedEntries = skipDuplicatedEntries;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public IConstr addControlableClause(IVecInt literals) throws ContradictionException {
-/*  63 */     if (this.skipDuplicatedEntries) {
-/*  64 */       if (literals.equals(this.lastClause)) {
-/*  65 */         return null;
-/*     */       }
-/*  67 */       this.lastClause.clear();
-/*  68 */       literals.copyTo(this.lastClause);
-/*     */     } 
-/*  70 */     int newvar = createNewVar(literals);
-/*  71 */     literals.push(newvar);
-/*  72 */     this.lastConstr = super.addClause(literals);
-/*  73 */     if (this.lastConstr == null) {
-/*  74 */       discardLastestVar();
-/*     */     } else {
-/*  76 */       this.constrs.put(Integer.valueOf(newvar), this.lastConstr);
-/*     */     } 
-/*  78 */     return this.lastConstr;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr addClause(IVecInt literals) throws ContradictionException {
-/*  88 */     return addControlableClause(literals);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int[] model() {
-/*  93 */     int[] fullmodel = modelWithInternalVariables();
-/*  94 */     if (fullmodel == null) {
-/*  95 */       return null;
-/*     */     }
-/*  97 */     int[] model = new int[fullmodel.length - this.constrs.size()];
-/*  98 */     int j = 0;
-/*  99 */     for (int element : fullmodel) {
-/* 100 */       if (this.constrs.get(Integer.valueOf(Math.abs(element))) == null) {
-/* 101 */         model[j++] = element;
-/*     */       }
-/*     */     } 
-/* 104 */     return model;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Collection<Integer> getAddedVars() {
-/* 117 */     return this.constrs.keySet();
-/*     */   }
-/*     */   
-/*     */   public IConstr getLastConstr() {
-/* 121 */     return this.lastConstr;
-/*     */   }
-/*     */   
-/*     */   public void setLastConstr(IConstr lastConstr) {
-/* 125 */     this.lastConstr = lastConstr;
-/*     */   }
-/*     */   
-/*     */   public Map<Integer, IConstr> getConstrs() {
-/* 129 */     return this.constrs;
-/*     */   }
-/*     */   
-/*     */   public IVecInt getLastClause() {
-/* 133 */     return this.lastClause;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\FullClauseSelectorSolver.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/GateTranslator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/GateTranslator.java
deleted file mode 100644
index f2d4197de9be12a9305d02eaf5ebc5ee14e8121f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/GateTranslator.java
+++ /dev/null
@@ -1,286 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.tools;
-/*     */ 
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class GateTranslator
-/*     */   extends SolverDecorator<ISolver>
-/*     */ {
-/*     */   public GateTranslator(ISolver solver) {
-/*  58 */     super(solver);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr gateFalse(int y) throws ContradictionException {
-/*  71 */     VecInt vecInt = new VecInt(2);
-/*  72 */     vecInt.push(-y);
-/*  73 */     return processClause((IVecInt)vecInt);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr gateTrue(int y) throws ContradictionException {
-/*  85 */     VecInt vecInt = new VecInt(2);
-/*  86 */     vecInt.push(y);
-/*  87 */     return processClause((IVecInt)vecInt);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private IConstr processClause(IVecInt clause) throws ContradictionException {
-/* 278 */     return addClause(clause);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\GateTranslator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/SolutionFoundListener.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/SolutionFoundListener.java
deleted file mode 100644
index 114bcb7ffa0d73c69c333d50de01a95ebbb7241c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/SolutionFoundListener.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.sat4j.tools;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public interface SolutionFoundListener
-/*    */ {
-/* 47 */   public static final SolutionFoundListener VOID = new SolutionFoundListener() {
-/*    */       public void onSolutionFound(int[] model) {}
-/*    */       
-/*    */       public void onUnsatTermination() {}
-/*    */     };
-/*    */   
-/*    */   void onSolutionFound(int[] paramArrayOfint);
-/*    */   
-/*    */   void onUnsatTermination();
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\SolutionFoundListener.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/SolverDecorator.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/SolverDecorator.java
deleted file mode 100644
index df6f8efc78dcb1301133ad328c44f402d1f63af9..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/SolverDecorator.java
+++ /dev/null
@@ -1,537 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.tools;
-/*     */ 
-/*     */ import java.io.PrintWriter;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public abstract class SolverDecorator<T extends ISolver>
-/*     */   implements ISolver
-/*     */ {
-/*     */   private T solver;
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps, boolean global) throws TimeoutException {
-/* 117 */     return this.solver.isSatisfiable(assumps, global);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean model(int var) {
-/* 153 */     return this.solver.model(var);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 187 */     return this.solver.toString();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void printStat(PrintWriter out, String prefix) {
-/* 202 */     this.solver.printStat(out, prefix);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public SolverDecorator(T solver) {
-/* 215 */     this.solver = solver;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr addClause(IVecInt literals) throws ContradictionException {
-/* 238 */     return this.solver.addClause(literals);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IVecInt createBlockingClauseForCurrentModel() {
-/* 269 */     return this.solver.createBlockingClauseForCurrentModel();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr addAtMost(IVecInt literals, int degree) throws ContradictionException {
-/* 279 */     return this.solver.addAtMost(literals, degree);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] model() {
-/* 298 */     return this.solver.model();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable() throws TimeoutException {
-/* 307 */     return this.solver.isSatisfiable();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
-/* 316 */     return this.solver.isSatisfiable(assumps);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void setTimeout(int t) {
-/* 325 */     this.solver.setTimeout(t);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void expireTimeout() {
-/* 343 */     this.solver.expireTimeout();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int nVars() {
-/* 361 */     return this.solver.nVars();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void reset() {
-/* 370 */     this.solver.reset();
-/*     */   }
-/*     */   
-/*     */   public T decorated() {
-/* 374 */     return this.solver;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean removeConstr(IConstr c) {
-/* 399 */     return this.solver.removeConstr(c);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int nextFreeVarId(boolean reserve) {
-/* 423 */     return this.solver.nextFreeVarId(reserve);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean removeSubsumedConstr(IConstr c) {
-/* 430 */     return this.solver.removeSubsumedConstr(c);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isVerbose() {
-/* 444 */     return this.solver.isVerbose();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String getLogPrefix() {
-/* 465 */     return this.solver.getLogPrefix();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IVecInt unsatExplanation() {
-/* 472 */     return this.solver.unsatExplanation();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] primeImplicant() {
-/* 479 */     return this.solver.primeImplicant();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public int[] modelWithInternalVariables() {
-/* 494 */     return this.solver.modelWithInternalVariables();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean primeImplicant(int p) {
-/* 529 */     return this.solver.primeImplicant(p);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\SolverDecorator.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/DeletionStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/DeletionStrategy.java
deleted file mode 100644
index becfa680e529735a09b3bbe693f467c2e1780da1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/DeletionStrategy.java
+++ /dev/null
@@ -1,173 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.tools.xplain;
-/*     */ 
-/*     */ import java.io.PrintWriter;
-/*     */ import java.util.Map;
-/*     */ import java.util.Set;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class DeletionStrategy
-/*     */   implements MinimizationStrategy
-/*     */ {
-/*     */   private boolean computationCanceled;
-/*     */   
-/*     */   public IVecInt explain(ISolver solver, Map<Integer, ?> constrs, IVecInt assumps) throws TimeoutException {
-/*  63 */     this.computationCanceled = false;
-/*     */     
-/*  65 */     VecInt vecInt1 = new VecInt(constrs.size() + assumps.size());
-/*  66 */     assumps.copyTo((IVecInt)vecInt1);
-/*  67 */     IVecInt firstExplanation = solver.unsatExplanation();
-/*  68 */     VecInt vecInt2 = new VecInt(firstExplanation.size());
-/*  69 */     if (firstExplanation.size() == 1) {
-/*  70 */       vecInt2.push(-firstExplanation.get(0));
-/*  71 */       return (IVecInt)vecInt2;
-/*     */     } 
-/*  73 */     if (solver.isVerbose()) {
-/*  74 */       System.out.print(solver.getLogPrefix() + "initial unsat core ");
-/*  75 */       firstExplanation.sort();
-/*  76 */       for (IteratorInt iteratorInt = firstExplanation.iterator(); iteratorInt.hasNext(); ) {
-/*  77 */         System.out.print(constrs.get(Integer.valueOf(-iteratorInt.next())));
-/*  78 */         System.out.print(" ");
-/*     */       } 
-/*  80 */       System.out.println();
-/*  81 */       solver.printStat(new PrintWriter(System.out, true), "c ");
-/*     */     } 
-/*  83 */     for (int i = 0; i < firstExplanation.size(); ) {
-/*  84 */       if (assumps.contains(firstExplanation.get(i))) {
-/*  85 */         firstExplanation.delete(i); continue;
-/*     */       } 
-/*  87 */       i++;
-/*     */     } 
-/*     */     
-/*  90 */     Set<Integer> constraintsVariables = constrs.keySet();
-/*  91 */     VecInt vecInt3 = new VecInt(constraintsVariables.size());
-/*  92 */     for (Integer v : constraintsVariables) {
-/*  93 */       vecInt3.push(v.intValue());
-/*     */     }
-/*     */     
-/*  96 */     for (IteratorInt it = firstExplanation.iterator(); it.hasNext(); ) {
-/*  97 */       int p = it.next();
-/*  98 */       if (p < 0) {
-/*  99 */         p = -p;
-/*     */       }
-/* 101 */       vecInt3.remove(p);
-/*     */     } 
-/*     */     
-/* 104 */     vecInt3.copyTo((IVecInt)vecInt1);
-/* 105 */     int unsatcorebegin = vecInt1.size();
-/* 106 */     firstExplanation.copyTo((IVecInt)vecInt1);
-/* 107 */     assert !solver.isSatisfiable((IVecInt)vecInt1);
-/* 108 */     int unsatcorelimit = vecInt1.size() - 1;
-/* 109 */     for (int j = unsatcorebegin; j < unsatcorelimit; j++) {
-/* 110 */       if (this.computationCanceled) {
-/* 111 */         throw new TimeoutException();
-/*     */       }
-/* 113 */       vecInt1.set(j, -vecInt1.get(j));
-/* 114 */       if (solver.isVerbose()) {
-/* 115 */         System.out.println(solver.getLogPrefix() + "checking " + constrs
-/* 116 */             .get(Integer.valueOf(vecInt1.get(j))) + " ...");
-/*     */       }
-/* 118 */       if (solver.isSatisfiable((IVecInt)vecInt1)) {
-/* 119 */         vecInt1.set(j, -vecInt1.get(j));
-/* 120 */         vecInt2.push(-vecInt1.get(j));
-/* 121 */         if (solver.isVerbose()) {
-/* 122 */           System.out.println(solver.getLogPrefix() + "mandatory.");
-/*     */         }
-/*     */       }
-/* 125 */       else if (solver.isVerbose()) {
-/* 126 */         System.out.println(solver.getLogPrefix() + "not needed.");
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 130 */     if (vecInt2.size() == 0) {
-/*     */       
-/* 132 */       vecInt2.push(-vecInt1.get(unsatcorelimit));
-/* 133 */       if (solver.isVerbose()) {
-/* 134 */         System.out.println(solver.getLogPrefix() + "skipping last test,the remaining element " + constrs
-/*     */             
-/* 136 */             .get(Integer.valueOf(vecInt1.get(unsatcorelimit))) + " is causing the inconsistency!");
-/*     */       }
-/*     */     } else {
-/*     */       
-/* 140 */       vecInt1.set(unsatcorelimit, 
-/* 141 */           -vecInt1.get(unsatcorelimit));
-/* 142 */       if (solver.isVerbose()) {
-/* 143 */         System.out.println(solver.getLogPrefix() + "checking " + constrs
-/* 144 */             .get(Integer.valueOf(vecInt1.get(unsatcorelimit))) + " ...");
-/*     */       }
-/*     */       
-/* 147 */       if (solver.isSatisfiable((IVecInt)vecInt1)) {
-/* 148 */         vecInt1.set(unsatcorelimit, 
-/* 149 */             -vecInt1.get(unsatcorelimit));
-/* 150 */         vecInt2.push(-vecInt1.get(unsatcorelimit));
-/* 151 */         if (solver.isVerbose()) {
-/* 152 */           System.out.println(solver.getLogPrefix() + "mandatory.");
-/*     */         }
-/*     */       }
-/* 155 */       else if (solver.isVerbose()) {
-/* 156 */         System.out.println(solver.getLogPrefix() + "not needed.");
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 160 */     return (IVecInt)vecInt2;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 165 */     return "Deletion based minimization strategy";
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\xplain\DeletionStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/MinimizationStrategy.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/MinimizationStrategy.java
deleted file mode 100644
index 50d1e34fea0b1d983570672c243605227975f86c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/MinimizationStrategy.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package net.fabricmc.loader.impl.lib.sat4j.tools.xplain;
-
-import java.io.Serializable;
-import java.util.Map;
-import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-
-public interface MinimizationStrategy extends Serializable {
-  IVecInt explain(ISolver paramISolver, Map<Integer, ?> paramMap, IVecInt paramIVecInt) throws TimeoutException;
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\xplain\MinimizationStrategy.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/Xplain.java b/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/Xplain.java
deleted file mode 100644
index b259ab60b6075900b4a419af6d8bf6c634660bd2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/sat4j/tools/xplain/Xplain.java
+++ /dev/null
@@ -1,236 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.sat4j.tools.xplain;
-/*     */ 
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.Collection;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.core.VecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ContradictionException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IConstr;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.ISolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IVecInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.IteratorInt;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.specs.TimeoutException;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.tools.FullClauseSelectorSolver;
-/*     */ import net.fabricmc.loader.impl.lib.sat4j.tools.SolverDecorator;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class Xplain<T extends ISolver>
-/*     */   extends FullClauseSelectorSolver<T>
-/*     */ {
-/*     */   private IVecInt assump;
-/*  66 */   private MinimizationStrategy xplainStrategy = new DeletionStrategy();
-/*     */   
-/*     */   public Xplain(T solver, boolean skipDuplicatedEntries) {
-/*  69 */     super((ISolver)solver, skipDuplicatedEntries);
-/*     */   }
-/*     */   
-/*     */   public Xplain(T solver) {
-/*  73 */     this(solver, true);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public IConstr addAtMost(IVecInt literals, int degree) throws ContradictionException {
-/*  93 */     throw new UnsupportedOperationException("Explanation requires Pseudo Boolean support. See XplainPB class instead.");
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private IVecInt explanationKeys() throws TimeoutException {
-/* 108 */     assert !isSatisfiable(this.assump);
-/* 109 */     ISolver solver = decorated();
-/* 110 */     if (solver instanceof SolverDecorator) {
-/* 111 */       solver = ((SolverDecorator)solver).decorated();
-/*     */     }
-/* 113 */     return this.xplainStrategy.explain(solver, getConstrs(), this.assump);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Collection<IConstr> explain() throws TimeoutException {
-/* 150 */     IVecInt keys = explanationKeys();
-/* 151 */     Collection<IConstr> explanation = new ArrayList<>(keys.size());
-/* 152 */     for (IteratorInt it = keys.iterator(); it.hasNext();) {
-/* 153 */       explanation.add((IConstr)getConstrs().get(Integer.valueOf(it.next())));
-/*     */     }
-/* 155 */     return explanation;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable() throws TimeoutException {
-/* 179 */     this.assump = VecInt.EMPTY;
-/* 180 */     return super.isSatisfiable();
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
-/* 191 */     this.assump = assumps;
-/* 192 */     return super.isSatisfiable(assumps);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isSatisfiable(IVecInt assumps, boolean global) throws TimeoutException {
-/* 198 */     this.assump = assumps;
-/* 199 */     return super.isSatisfiable(assumps, global);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean removeConstr(IConstr c) {
-/* 215 */     if (getLastConstr() == c) {
-/* 216 */       getLastClause().clear();
-/* 217 */       setLastConstr(null);
-/*     */     } 
-/* 219 */     return super.removeConstr(c);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public boolean removeSubsumedConstr(IConstr c) {
-/* 224 */     if (getLastConstr() == c) {
-/* 225 */       getLastClause().clear();
-/* 226 */       setLastConstr(null);
-/*     */     } 
-/* 228 */     return super.removeSubsumedConstr(c);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\sat4j\tools\xplain\Xplain.class
- * Java compiler version: 7 (51.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/AsmClassRemapper.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/AsmClassRemapper.java
deleted file mode 100644
index 9597890b92648f84b58467e7011cad4d175f65b3..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/AsmClassRemapper.java
+++ /dev/null
@@ -1,853 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.Iterator;
-/*     */ import java.util.Map;
-/*     */ import java.util.Objects;
-/*     */ import java.util.Set;
-/*     */ import java.util.function.Function;
-/*     */ import java.util.regex.Pattern;
-/*     */ import javax.lang.model.SourceVersion;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ import org.objectweb.asm.AnnotationVisitor;
-/*     */ import org.objectweb.asm.ClassVisitor;
-/*     */ import org.objectweb.asm.FieldVisitor;
-/*     */ import org.objectweb.asm.Handle;
-/*     */ import org.objectweb.asm.Label;
-/*     */ import org.objectweb.asm.MethodVisitor;
-/*     */ import org.objectweb.asm.RecordComponentVisitor;
-/*     */ import org.objectweb.asm.Type;
-/*     */ import org.objectweb.asm.commons.FieldRemapper;
-/*     */ import org.objectweb.asm.commons.MethodRemapper;
-/*     */ import org.objectweb.asm.commons.RecordComponentRemapper;
-/*     */ import org.objectweb.asm.commons.Remapper;
-/*     */ import org.objectweb.asm.tree.AbstractInsnNode;
-/*     */ import org.objectweb.asm.tree.LabelNode;
-/*     */ import org.objectweb.asm.tree.LocalVariableNode;
-/*     */ import org.objectweb.asm.tree.MethodNode;
-/*     */ import org.objectweb.asm.tree.ParameterNode;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ final class AsmClassRemapper
-/*     */   extends VisitTrackingClassRemapper
-/*     */ {
-/*     */   private final boolean rebuildSourceFilenames;
-/*     */   private final boolean checkPackageAccess;
-/*     */   private final boolean skipLocalMapping;
-/*     */   private final boolean renameInvalidLocals;
-/*     */   private final Pattern invalidLvNamePattern;
-/*     */   private final boolean inferNameFromSameLvIndex;
-/*     */   private boolean sourceNameVisited;
-/*     */   private MethodNode methodNode;
-/*     */   
-/*     */   AsmClassRemapper(ClassVisitor cv, AsmRemapper remapper, boolean rebuildSourceFilenames, boolean checkPackageAccess, boolean skipLocalMapping, boolean renameInvalidLocals, Pattern invalidLvNamePattern, boolean inferNameFromSameLvIndex) {
-/*  56 */     super(cv, (Remapper)remapper);
-/*  57 */     this.rebuildSourceFilenames = rebuildSourceFilenames;
-/*  58 */     this.checkPackageAccess = checkPackageAccess;
-/*  59 */     this.skipLocalMapping = skipLocalMapping;
-/*  60 */     this.renameInvalidLocals = renameInvalidLocals;
-/*  61 */     this.invalidLvNamePattern = invalidLvNamePattern;
-/*  62 */     this.inferNameFromSameLvIndex = inferNameFromSameLvIndex;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
-/*  67 */     if (this.checkPackageAccess) {
-/*  68 */       AsmRemapper remapper = (AsmRemapper)this.remapper;
-/*     */       
-/*  70 */       if (superName != null) PackageAccessChecker.checkClass(name, superName, "super class", remapper);
-/*     */       
-/*  72 */       if (interfaces != null) {
-/*  73 */         for (String iface : interfaces) {
-/*  74 */           PackageAccessChecker.checkClass(name, iface, "super interface", remapper);
-/*     */         }
-/*     */       }
-/*     */     } 
-/*     */     
-/*  79 */     this.sourceNameVisited = false;
-/*     */     
-/*  81 */     super.visit(version, access, name, signature, superName, interfaces);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitSource(String source, String debug) {
-/*  86 */     this.sourceNameVisited = true;
-/*     */     
-/*  88 */     if (!this.rebuildSourceFilenames) {
-/*  89 */       super.visitSource(source, debug);
-/*     */       
-/*     */       return;
-/*     */     } 
-/*  93 */     String mappedClsName = this.remapper.map(this.className);
-/*     */     
-/*  95 */     int end = mappedClsName.indexOf('$');
-/*  96 */     if (end <= 0) end = mappedClsName.length();
-/*     */     
-/*  98 */     int start = mappedClsName.lastIndexOf('/', end - 1) + 1;
-/*  99 */     if (end <= start) end = mappedClsName.length();
-/*     */     
-/* 101 */     super.visitSource(mappedClsName.substring(start, end).concat(".java"), debug);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {
-/* 106 */     if (this.checkPackageAccess) {
-/* 107 */       PackageAccessChecker.checkDesc(this.className, descriptor, "field descriptor", (AsmRemapper)this.remapper);
-/*     */     }
-/*     */     
-/* 110 */     return super.visitField(access, name, descriptor, signature, value);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   protected FieldVisitor createFieldRemapper(FieldVisitor fieldVisitor) {
-/* 115 */     return (FieldVisitor)new AsmFieldRemapper(fieldVisitor, (AsmRemapper)this.remapper);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
-/* 120 */     if (this.checkPackageAccess) {
-/* 121 */       PackageAccessChecker.checkDesc(this.className, descriptor, "method descriptor", (AsmRemapper)this.remapper);
-/*     */     }
-/*     */     
-/* 124 */     if (!this.skipLocalMapping || this.renameInvalidLocals) {
-/* 125 */       this.methodNode = new MethodNode(this.api, access, name, descriptor, signature, exceptions);
-/*     */     }
-/*     */     
-/* 128 */     return super.visitMethod(access, name, descriptor, signature, exceptions);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   protected MethodVisitor createMethodRemapper(MethodVisitor methodVisitor) {
-/* 133 */     return (MethodVisitor)new AsmMethodRemapper(methodVisitor, (AsmRemapper)this.remapper, this.className, this.methodNode, this.checkPackageAccess, this.skipLocalMapping, this.renameInvalidLocals, this.invalidLvNamePattern, this.inferNameFromSameLvIndex);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   protected RecordComponentVisitor createRecordComponentRemapper(RecordComponentVisitor recordComponentVisitor) {
-/* 139 */     return (RecordComponentVisitor)new AsmRecordComponentRemapper(recordComponentVisitor, (AsmRemapper)this.remapper);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public AnnotationVisitor createAnnotationRemapper(String descriptor, AnnotationVisitor annotationVisitor) {
-/* 144 */     return new AsmAnnotationRemapper(descriptor, annotationVisitor, (AsmRemapper)this.remapper);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitEnd() {
-/* 149 */     ((AsmRemapper)this.remapper).finish(this.className, this.cv);
-/*     */     
-/* 151 */     super.visitEnd();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   protected void onVisit(VisitTrackingClassRemapper.VisitKind kind) {
-/* 156 */     if (this.rebuildSourceFilenames && !this.sourceNameVisited && kind.ordinal() > VisitTrackingClassRemapper.VisitKind.SOURCE.ordinal()) {
-/* 157 */       visitSource((String)null, (String)null);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private static class AsmFieldRemapper
-/*     */     extends FieldRemapper
-/*     */   {
-/*     */     AsmFieldRemapper(FieldVisitor fieldVisitor, AsmRemapper remapper) {
-/* 172 */       super(fieldVisitor, (Remapper)remapper);
-/*     */     }
-/*     */     
-/*     */     public AnnotationVisitor createAnnotationRemapper(String descriptor, AnnotationVisitor annotationVisitor)
-/*     */     {
-/* 177 */       return new AsmAnnotationRemapper(descriptor, annotationVisitor, (AsmRemapper)this.remapper); }
-/*     */   }
-/*     */   private static class AsmMethodRemapper extends MethodRemapper
-/*     */   {
-/*     */     private final TinyRemapper tr;
-/*     */     public AnnotationVisitor createAnnotationRemapper(String descriptor, AnnotationVisitor annotationVisitor) { return new AsmAnnotationRemapper(descriptor, annotationVisitor, (AsmRemapper)this.remapper); }
-/*     */     public void visitTryCatchBlock(Label start, Label end, Label handler, String type) { if (this.checkPackageAccess)
-/*     */         PackageAccessChecker.checkClass(this.owner, type, "try-catch", (AsmRemapper)this.remapper);  super.visitTryCatchBlock(start, end, handler, type); }
-/*     */     public void visitTypeInsn(int opcode, String type) { if (this.checkPackageAccess)
-/*     */         PackageAccessChecker.checkClass(this.owner, type, "type instruction", (AsmRemapper)this.remapper);  super.visitTypeInsn(opcode, type); } public void visitLdcInsn(Object value) { if (this.checkPackageAccess)
-/*     */         PackageAccessChecker.checkValue(this.owner, value, "ldc instruction", (AsmRemapper)this.remapper);  super.visitLdcInsn(value); } public void visitMultiANewArrayInsn(String descriptor, int numDimensions) { if (this.checkPackageAccess)
-/*     */         PackageAccessChecker.checkDesc(this.owner, descriptor, "multianewarray instruction", (AsmRemapper)this.remapper);  super.visitMultiANewArrayInsn(descriptor, numDimensions); } public void visitFieldInsn(int opcode, String owner, String name, String descriptor) { if (this.checkPackageAccess)
-/*     */         PackageAccessChecker.checkMember(this.owner, owner, name, descriptor, TrMember.MemberType.FIELD, "field instruction", (AsmRemapper)this.remapper); 
-/*     */       super.visitFieldInsn(opcode, owner, name, descriptor); } public void visitMethodInsn(int opcode, String owner, String name, String descriptor, boolean isInterface) { if (this.checkPackageAccess)
-/*     */         PackageAccessChecker.checkMember(this.owner, owner, name, descriptor, TrMember.MemberType.METHOD, "method instruction", (AsmRemapper)this.remapper); 
-/* 192 */       super.visitMethodInsn(opcode, owner, name, descriptor, isInterface); } AsmMethodRemapper(MethodVisitor methodVisitor, AsmRemapper remapper, String owner, MethodNode methodNode, boolean checkPackageAccess, boolean skipLocalMapping, boolean renameInvalidLocals, Pattern invalidLvNamePattern, boolean inferNameFromSameLvIndex) { super((methodNode != null) ? (MethodVisitor)methodNode : methodVisitor, (Remapper)remapper);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/* 695 */       this.nameCounts = new HashMap<>(); this.owner = owner; this.methodNode = methodNode; this.output = methodVisitor; this.checkPackageAccess = checkPackageAccess; this.skipLocalMapping = skipLocalMapping; this.renameInvalidLocals = renameInvalidLocals; this.invalidLvNamePattern = invalidLvNamePattern; this.inferNameFromSameLvIndex = inferNameFromSameLvIndex; this.tr = remapper.tr; }
-/*     */     public void visitInvokeDynamicInsn(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments) { Handle implemented = getLambdaImplementedMethod(name, descriptor, bootstrapMethodHandle, this.tr.knownIndyBsm, bootstrapMethodArguments); if (implemented != null) { name = this.remapper.mapMethodName(implemented.getOwner(), implemented.getName(), implemented.getDesc()); } else { name = this.remapper.mapInvokeDynamicMethodName(name, descriptor); }  for (int i = 0; i < bootstrapMethodArguments.length; i++) bootstrapMethodArguments[i] = this.remapper.mapValue(bootstrapMethodArguments[i]);  this.mv.visitInvokeDynamicInsn(name, this.remapper.mapMethodDesc(descriptor), (Handle)this.remapper.mapValue(bootstrapMethodHandle), bootstrapMethodArguments); }
-/*     */     private static Handle getLambdaImplementedMethod(String name, String desc, Handle bsm, Set<String> knownIndyBsm, Object... bsmArgs) { if (isJavaLambdaMetafactory(bsm)) { assert desc.endsWith(";"); return new Handle(9, desc.substring(desc.lastIndexOf(')') + 2, desc.length() - 1), name, ((Type)bsmArgs[0]).getDescriptor(), true); }  if (knownIndyBsm.contains(bsm.getOwner())) return null;  System.out.printf("unknown invokedynamic bsm: %s/%s%s (tag=%d iif=%b)%n", new Object[] { bsm.getOwner(), bsm.getName(), bsm.getDesc(), Integer.valueOf(bsm.getTag()), Boolean.valueOf(bsm.isInterface()) }); return null; }
-/*     */     private static boolean isJavaLambdaMetafactory(Handle bsm) { return (bsm.getTag() == 6 && bsm.getOwner().equals("java/lang/invoke/LambdaMetafactory") && ((bsm.getName().equals("metafactory") && bsm.getDesc().equals("(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;")) || (bsm.getName().equals("altMetafactory") && bsm.getDesc().equals("(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;"))) && !bsm.isInterface()); }
-/*     */     public void visitEnd() { if (this.methodNode != null) { if (!this.skipLocalMapping || (this.renameInvalidLocals && ((this.methodNode.localVariables != null && !this.methodNode.localVariables.isEmpty()) || (this.methodNode.parameters != null && !this.methodNode.parameters.isEmpty())))) processLocals();  this.methodNode.visitEnd(); this.methodNode.accept(this.output); } else { super.visitEnd(); }  }
-/*     */     private void processLocals() { boolean isStatic = ((this.methodNode.access & 0x8) != 0); Type[] argTypes = Type.getArgumentTypes(this.methodNode.desc); int argLvSize = getLvIndex(argTypes.length, isStatic, argTypes); String[] args = new String[argTypes.length]; if (this.methodNode.parameters != null && this.methodNode.parameters.size() == args.length) { for (int i = 0; i < args.length; i++) args[i] = ((ParameterNode)this.methodNode.parameters.get(i)).name;  } else { assert this.methodNode.parameters == null; }  if (this.methodNode.localVariables != null) for (int i = 0; i < this.methodNode.localVariables.size(); i++) { LocalVariableNode lv = this.methodNode.localVariables.get(i); if (!isStatic && lv.index == 0) { lv.name = "this"; } else if (lv.index < argLvSize) { int asmIndex = getAsmIndex(lv.index, isStatic, argTypes); String existingName = args[asmIndex]; if (existingName == null || (!isValidJavaIdentifier(existingName) && isValidJavaIdentifier(lv.name))) args[asmIndex] = lv.name;  } else if (!this.skipLocalMapping) { int startOpIdx = 0; LabelNode labelNode = lv.start; AbstractInsnNode abstractInsnNode; while ((abstractInsnNode = labelNode.getPrevious()) != null) { if (abstractInsnNode.getOpcode() >= 0) startOpIdx++;  }  lv.name = ((AsmRemapper)this.remapper).mapMethodVar(this.owner, this.methodNode.name, this.methodNode.desc, lv.index, startOpIdx, i, lv.name); if (this.renameInvalidLocals && isValidLvName(lv.name)) this.nameCounts.putIfAbsent(lv.name, Integer.valueOf(1));  }  }   if (!this.skipLocalMapping) for (int i = 0; i < args.length; i++) { args[i] = ((AsmRemapper)this.remapper).mapMethodArg(this.owner, this.methodNode.name, this.methodNode.desc, getLvIndex(i, isStatic, argTypes), args[i]); if (this.renameInvalidLocals && isValidLvName(args[i])) this.nameCounts.putIfAbsent(args[i], Integer.valueOf(1));  }   if (this.renameInvalidLocals) for (int i = 0; i < args.length; i++) { if (!isValidLvName(args[i])) args[i] = getNameFromType(this.remapper.mapDesc(argTypes[i].getDescriptor()), true);  }   boolean hasAnyArgs = false; boolean hasAllArgs = true; for (String arg : args) { if (arg != null) { hasAnyArgs = true; } else { hasAllArgs = false; }  }  if (this.methodNode.localVariables != null || (hasAnyArgs && (this.methodNode.access & 0x400) == 0)) { if (this.methodNode.localVariables == null) this.methodNode.localVariables = new ArrayList();  boolean[] argsWritten = new boolean[args.length]; int i; label158: for (i = 0; i < this.methodNode.localVariables.size(); i++) { LocalVariableNode lv = this.methodNode.localVariables.get(i); if (isStatic || lv.index != 0) if (lv.index < argLvSize) { int asmIndex = getAsmIndex(lv.index, isStatic, argTypes); lv.name = args[asmIndex]; argsWritten[asmIndex] = true; } else if (this.renameInvalidLocals && !isValidLvName(lv.name)) { if (this.inferNameFromSameLvIndex) for (int k = 0; k < this.methodNode.localVariables.size(); k++) { if (k != i) { LocalVariableNode otherLv = this.methodNode.localVariables.get(k); if (otherLv.index == lv.index && otherLv.name != null && otherLv.desc.equals(lv.desc) && (k < i || isValidLvName(otherLv.name))) { lv.name = otherLv.name; continue label158; }  }  }   lv.name = getNameFromType(lv.desc, false); }   }  LabelNode start = null; LabelNode end = null; for (int j = 0; j < args.length; j++) { if (!argsWritten[j] && args[j] != null) { if (start == null) { boolean pastStart = false; for (Iterator<AbstractInsnNode> it = this.methodNode.instructions.iterator(); it.hasNext(); ) { AbstractInsnNode ain = it.next(); if (ain.getType() == 8) { LabelNode label = (LabelNode)ain; if (start == null && !pastStart) start = label;  end = label; continue; }  if (ain.getOpcode() >= 0) { pastStart = true; end = null; }  }  if (start == null) { start = new LabelNode(); this.methodNode.instructions.insert((AbstractInsnNode)start); }  if (end == null) if (!pastStart) { end = start; } else { end = new LabelNode(); this.methodNode.instructions.add((AbstractInsnNode)end); }   }  this.methodNode.localVariables.add(new LocalVariableNode(args[j], this.remapper.mapDesc(argTypes[j].getDescriptor()), null, start, end, getLvIndex(j, isStatic, argTypes))); }  }  }  if (this.methodNode.parameters != null || (hasAllArgs && args.length > 0) || (hasAnyArgs && (this.methodNode.access & 0x400) != 0)) { if (this.methodNode.parameters == null) this.methodNode.parameters = new ArrayList(args.length);  while (this.methodNode.parameters.size() < args.length) this.methodNode.parameters.add(new ParameterNode(null, 0));  for (int i = 0; i < args.length; i++) ((ParameterNode)this.methodNode.parameters.get(i)).name = args[i];  }  }
-/*     */     private static int getLvIndex(int asmIndex, boolean isStatic, Type[] argTypes) { int ret = 0; if (!isStatic) ret++;  for (int i = 0; i < asmIndex; i++) ret += argTypes[i].getSize();  return ret; }
-/*     */     private static int getAsmIndex(int lvIndex, boolean isStatic, Type[] argTypes) { if (!isStatic) lvIndex--;  for (int i = 0; i < argTypes.length; i++) { if (lvIndex == 0) return i;  lvIndex -= argTypes[i].getSize(); }  return -1; } private String getNameFromType(String type, boolean isArg) { String varName; int start, startDollar; char first, firstLc; boolean plural = false; if (type.charAt(0) == '[') { plural = true; type = type.substring(type.lastIndexOf('[') + 1); }  boolean incrementLetter = true; switch (type.charAt(0)) { case 'B': varName = "b"; break;case 'C': varName = "c"; break;case 'D': varName = "d"; break;case 'F': varName = "f"; break;case 'I': varName = "i"; break;case 'J': varName = "l"; break;case 'S': varName = "s"; break;case 'Z': varName = "bl"; incrementLetter = false; break;case 'L': start = type.lastIndexOf('/') + 1; startDollar = type.lastIndexOf('$') + 1; if (startDollar > start && startDollar < type.length() - 1) { start = startDollar; } else if (start == 0) { start = 1; }  first = type.charAt(start); firstLc = Character.toLowerCase(first); if (first == firstLc) { varName = null; } else { varName = firstLc + type.substring(start + 1, type.length() - 1); }  if (!isValidJavaIdentifier(varName)) varName = isArg ? "arg" : "lv";  incrementLetter = false; break;default: throw new IllegalStateException(); }  boolean hasPluralS = false; if (plural) { String pluralVarName = varName + 's'; if (!isJavaKeyword(pluralVarName)) { varName = pluralVarName; hasPluralS = true; }  }  if (incrementLetter) { int index = -1; while (this.nameCounts.putIfAbsent(varName, Integer.valueOf(1)) != null || isJavaKeyword(varName)) { if (index < 0) index = getNameIndex(varName, hasPluralS);  varName = getIndexName(++index, plural); }  return varName; }  String baseVarName = varName; int count = ((Integer)this.nameCounts.compute(baseVarName, (k, v) -> Integer.valueOf((v == null) ? 1 : (v.intValue() + 1)))).intValue(); if (count == 1) { if (isJavaKeyword(baseVarName)) { varName = varName + '_'; } else { return varName; }  } else { varName = baseVarName + Integer.toString(count); }  while (this.nameCounts.putIfAbsent(varName, Integer.valueOf(1)) != null) varName = baseVarName + Integer.toString(count++);  this.nameCounts.put(baseVarName, Integer.valueOf(count)); return varName; } private static int getNameIndex(String name, boolean plural) { int ret = 0; for (int i = 0, max = name.length() - (plural ? 1 : 0); i < max; i++) ret = ret * 26 + name.charAt(i) - 97 + 1;  return ret - 1; } private static String getIndexName(int index, boolean plural) { if (index < 26 && !plural) return singleCharStrings[index];  StringBuilder ret = new StringBuilder(2); do { int next = index / 26; int cur = index - next * 26; ret.append((char)(97 + cur)); index = next - 1; } while (index >= 0); ret.reverse(); if (plural) ret.append('s');  return ret.toString(); } private boolean isValidLvName(String s) { return (isValidJavaIdentifier(s) && !isJavaKeyword(s) && (this.invalidLvNamePattern == null || !this.invalidLvNamePattern.matcher(s).matches())); } private static boolean isValidJavaIdentifier(String s) { return (s != null && !s.isEmpty() && SourceVersion.isIdentifier(s) && !s.codePoints().anyMatch(Character::isIdentifierIgnorable)); } private static boolean isJavaKeyword(String s) { return SourceVersion.isKeyword(s); } private static final String[] singleCharStrings = new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" }; private final String owner; private final MethodNode methodNode; private final MethodVisitor output; private final Map<String, Integer> nameCounts; private final boolean checkPackageAccess; private final boolean skipLocalMapping; private final boolean renameInvalidLocals; private final Pattern invalidLvNamePattern; private final boolean inferNameFromSameLvIndex;
-/*     */   } private static class AsmRecordComponentRemapper extends RecordComponentRemapper
-/*     */   {
-/* 705 */     AsmRecordComponentRemapper(RecordComponentVisitor recordComponentVisitor, AsmRemapper remapper) { super(recordComponentVisitor, (Remapper)remapper); }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     public AnnotationVisitor createAnnotationRemapper(String descriptor, AnnotationVisitor annotationVisitor) {
-/* 710 */       return new AsmAnnotationRemapper(descriptor, annotationVisitor, (AsmRemapper)this.remapper);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private static class AsmAnnotationRemapper
-/*     */     extends AnnotationVisitor
-/*     */   {
-/*     */     protected final String descriptor;
-/*     */     
-/*     */     protected final AsmRemapper remapper;
-/*     */     
-/*     */     AsmAnnotationRemapper(String descriptor, AnnotationVisitor annotationVisitor, AsmRemapper remapper) {
-/* 723 */       super(589824, annotationVisitor);
-/* 724 */       this.descriptor = descriptor;
-/* 725 */       this.remapper = remapper;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public void visit(String name, Object value) {
-/* 730 */       super.visit(
-/* 731 */           mapAnnotationAttributeName(name, getDescriptor(value)), this.remapper
-/* 732 */           .mapValue(value));
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public void visitEnum(String name, String descriptor, String value) {
-/* 737 */       super.visitEnum(
-/* 738 */           mapAnnotationAttributeName(name, descriptor), this.remapper
-/* 739 */           .mapDesc(descriptor), this.remapper
-/* 740 */           .mapFieldName(Type.getType(descriptor).getInternalName(), value, descriptor));
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public AnnotationVisitor visitAnnotation(String name, String descriptor) {
-/* 745 */       AnnotationVisitor annotationVisitor = super.visitAnnotation(
-/* 746 */           mapAnnotationAttributeName(name, descriptor), this.remapper
-/* 747 */           .mapDesc(descriptor));
-/*     */       
-/* 749 */       if (annotationVisitor == null) {
-/* 750 */         return null;
-/*     */       }
-/* 752 */       return (annotationVisitor == this.av) ? this : createAnnotationRemapper(descriptor, annotationVisitor);
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public AnnotationVisitor createAnnotationRemapper(String descriptor, AnnotationVisitor annotationVisitor) {
-/* 757 */       return new AsmAnnotationRemapper(descriptor, annotationVisitor, this.remapper);
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     public AnnotationVisitor visitArray(String name) {
-/* 766 */       return new AsmArrayAttributeAnnotationRemapper(name, desc -> super.visitArray(mapAnnotationAttributeName(name, (desc == null) ? null : ("[" + desc))), this.remapper);
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     protected String mapAnnotationAttributeName(String name, String attributeDesc) {
-/* 772 */       if (this.descriptor == null || name == null) {
-/* 773 */         return name;
-/*     */       }
-/*     */       
-/* 776 */       return this.remapper.mapAnnotationAttributeName(this.descriptor, name, attributeDesc);
-/*     */     }
-/*     */     
-/*     */     protected static String getDescriptor(Object value) {
-/* 780 */       if (value instanceof Type) return ((Type)value).getDescriptor();
-/*     */       
-/* 782 */       Class<?> cls = value.getClass();
-/*     */       
-/* 784 */       if (Byte.class.isAssignableFrom(cls)) return "B"; 
-/* 785 */       if (Boolean.class.isAssignableFrom(cls)) return "Z"; 
-/* 786 */       if (Character.class.isAssignableFrom(cls)) return "C"; 
-/* 787 */       if (Short.class.isAssignableFrom(cls)) return "S"; 
-/* 788 */       if (Integer.class.isAssignableFrom(cls)) return "I"; 
-/* 789 */       if (Long.class.isAssignableFrom(cls)) return "J"; 
-/* 790 */       if (Float.class.isAssignableFrom(cls)) return "F"; 
-/* 791 */       if (Double.class.isAssignableFrom(cls)) return "D";
-/*     */       
-/* 793 */       return Type.getDescriptor(cls);
-/*     */     }
-/*     */     
-/*     */     private static class AsmArrayAttributeAnnotationRemapper extends AsmAnnotationRemapper {
-/*     */       protected final String arrayName;
-/*     */       protected final Function<String, AnnotationVisitor> avSupplier;
-/*     */       
-/*     */       AsmArrayAttributeAnnotationRemapper(String arrayName, Function<String, AnnotationVisitor> avSupplier, AsmRemapper remapper) {
-/* 801 */         super((String)null, (AnnotationVisitor)null, remapper);
-/*     */         
-/* 803 */         this.arrayName = arrayName;
-/* 804 */         this.avSupplier = Objects.<Function<String, AnnotationVisitor>>requireNonNull(avSupplier);
-/*     */       }
-/*     */ 
-/*     */       
-/*     */       public void visit(String name, Object value) {
-/* 809 */         if (this.av == null) this.av = this.avSupplier.apply(getDescriptor(value));
-/*     */         
-/* 811 */         super.visit(name, value);
-/*     */       }
-/*     */ 
-/*     */       
-/*     */       public void visitEnum(String name, String descriptor, String value) {
-/* 816 */         if (this.av == null) this.av = this.avSupplier.apply(descriptor);
-/*     */         
-/* 818 */         super.visitEnum(name, descriptor, value);
-/*     */       }
-/*     */ 
-/*     */       
-/*     */       public AnnotationVisitor visitAnnotation(String name, String descriptor) {
-/* 823 */         if (this.av == null) this.av = this.avSupplier.apply(descriptor);
-/*     */         
-/* 825 */         return super.visitAnnotation(name, descriptor);
-/*     */       }
-/*     */ 
-/*     */       
-/*     */       public AnnotationVisitor visitArray(String name) {
-/* 830 */         return new AsmArrayAttributeAnnotationRemapper(name, desc -> { if (this.av == null) this.av = this.avSupplier.apply((desc == null) ? null : ("[" + desc));  return super.visitArray(mapAnnotationAttributeName(name, (desc == null) ? null : ("[" + desc))); }this.remapper);
-/*     */       }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*     */       public void visitEnd() {
-/* 841 */         if (this.av == null) this.av = this.avSupplier.apply(null);
-/*     */         
-/* 843 */         super.visitEnd();
-/*     */       }
-/*     */     }
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\AsmClassRemapper.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/AsmRemapper.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/AsmRemapper.java
deleted file mode 100644
index 2eab608e2b1e014d26f3538b62564b138b13df62..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/AsmRemapper.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMethod;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrRemapper;
-/*     */ import org.objectweb.asm.ClassVisitor;
-/*     */ import org.objectweb.asm.Type;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ class AsmRemapper
-/*     */   extends TrRemapper
-/*     */ {
-/*     */   final TinyRemapper.MrjState context;
-/*     */   final TinyRemapper tr;
-/*     */   
-/*     */   AsmRemapper(TinyRemapper.MrjState context) {
-/*  34 */     this.context = context;
-/*  35 */     this.tr = context.tr;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String map(String typeName) {
-/*  40 */     String ret = this.tr.classMap.get(typeName);
-/*  41 */     if (ret != null) return ret;
-/*     */     
-/*  43 */     return (this.tr.extraRemapper != null) ? this.tr.extraRemapper.map(typeName) : typeName;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String mapFieldName(String owner, String name, String desc) {
-/*  48 */     ClassInstance cls = getClass(owner);
-/*  49 */     if (cls == null) return name;
-/*     */     
-/*  51 */     return mapFieldName(cls, name, desc);
-/*     */   }
-/*     */   
-/*     */   final String mapFieldName(ClassInstance cls, String name, String desc) {
-/*  55 */     MemberInstance member = cls.resolve(TrMember.MemberType.FIELD, MemberInstance.getFieldId(name, desc, this.tr.ignoreFieldDesc));
-/*     */     
-/*     */     String newName;
-/*  58 */     if (member != null && (newName = member.getNewName()) != null) {
-/*  59 */       return newName;
-/*     */     }
-/*     */     
-/*  62 */     assert (newName = this.tr.fieldMap.get(cls.getName() + "/" + MemberInstance.getFieldId(name, desc, this.tr.ignoreFieldDesc))) == null || newName.equals(name);
-/*     */     
-/*  64 */     return (this.tr.extraRemapper != null) ? this.tr.extraRemapper.mapFieldName(cls.getName(), name, desc) : name;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String mapRecordComponentName(String owner, String name, String descriptor) {
-/*  69 */     return mapFieldName(owner, name, descriptor);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String mapMethodName(String owner, String name, String desc) {
-/*  74 */     if (!desc.startsWith("(")) {
-/*  75 */       return mapFieldName(owner, name, desc);
-/*     */     }
-/*     */     
-/*  78 */     ClassInstance cls = getClass(owner);
-/*  79 */     if (cls == null) return name;
-/*     */     
-/*  81 */     return mapMethodName(cls, name, desc);
-/*     */   }
-/*     */   
-/*     */   final String mapMethodName(ClassInstance cls, String name, String desc) {
-/*  85 */     MemberInstance member = cls.resolve(TrMember.MemberType.METHOD, MemberInstance.getMethodId(name, desc));
-/*     */     
-/*     */     String newName;
-/*  88 */     if (member != null && (newName = member.getNewName()) != null) {
-/*  89 */       return newName;
-/*     */     }
-/*     */     
-/*  92 */     assert (newName = this.tr.methodMap.get(cls.getName() + "/" + MemberInstance.getMethodId(name, desc))) == null || newName.equals(name);
-/*     */     
-/*  94 */     return (this.tr.extraRemapper != null) ? this.tr.extraRemapper.mapMethodName(cls.getName(), name, desc) : name;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String mapMethodNamePrefixDesc(String owner, String name, String descPrefix) {
-/*  99 */     ClassInstance cls = getClass(owner);
-/* 100 */     if (cls == null) return name;
-/*     */     
-/* 102 */     Collection<TrMethod> members = cls.resolveMethods(name, descPrefix, true, null, null);
-/* 103 */     MemberInstance member = (members.size() == 1) ? members.iterator().next() : null;
-/*     */     
-/*     */     String newName;
-/* 106 */     if (member != null && (newName = member.getNewName()) != null) {
-/* 107 */       return newName;
-/*     */     }
-/*     */     
-/* 110 */     return name;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String mapMethodArg(String methodOwner, String methodName, String methodDesc, int lvIndex, String name) {
-/* 123 */     String newName = this.tr.methodArgMap.get(methodOwner + "/" + MemberInstance.getMethodId(methodName, methodDesc) + lvIndex);
-/* 124 */     if (newName != null) return newName;
-/*     */     
-/* 126 */     ClassInstance cls = getClass(methodOwner);
-/* 127 */     if (cls == null) return name;
-/*     */     
-/* 129 */     MemberInstance originatingMethod = cls.resolve(TrMember.MemberType.METHOD, MemberInstance.getMethodId(methodName, methodDesc));
-/* 130 */     if (originatingMethod == null) return name;
-/*     */     
-/* 132 */     String originatingNewName = this.tr.methodArgMap.get(originatingMethod.newNameOriginatingCls + "/" + MemberInstance.getMethodId(originatingMethod.name, originatingMethod.desc) + lvIndex);
-/*     */     
-/* 134 */     return (originatingNewName != null) ? originatingNewName : name;
-/*     */   }
-/*     */   
-/*     */   public String mapMethodVar(String methodOwner, String methodName, String methodDesc, int lvIndex, int startOpIdx, int asmIndex, String name) {
-/* 138 */     return name;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String mapAnnotationAttributeName(String descriptor, String name) {
-/* 143 */     throw new RuntimeException("Deprecated function");
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String mapAnnotationAttributeName(String annotationDesc, String name, String attributeDesc) {
-/* 148 */     String annotationClass = Type.getType(annotationDesc).getInternalName();
-/*     */     
-/* 150 */     if (attributeDesc == null) {
-/* 151 */       return mapMethodNamePrefixDesc(annotationClass, name, "()");
-/*     */     }
-/* 153 */     return mapMethodName(annotationClass, name, "()" + attributeDesc);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   void finish(String className, ClassVisitor cv) {
-/* 158 */     ClassInstance cls = null;
-/*     */     
-/* 160 */     if (this.tr.propagateBridges == TinyRemapper.LinkedMethodPropagation.COMPATIBLE || this.tr.propagateRecordComponents == TinyRemapper.LinkedMethodPropagation.COMPATIBLE) {
-/*     */       
-/* 162 */       cls = getClass(className);
-/*     */       
-/* 164 */       if (cls != null) {
-/* 165 */         BridgeHandler.generateCompatBridges(cls, this, cv);
-/*     */       }
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   ClassInstance getClass(String owner) {
-/* 171 */     return this.context.getClass(owner);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\AsmRemapper.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/BridgeHandler.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/BridgeHandler.java
deleted file mode 100644
index 4b972123df7b307fe7d7328c27f71f3979ca64de..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/BridgeHandler.java
+++ /dev/null
@@ -1,154 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import org.objectweb.asm.ClassVisitor;
-/*     */ import org.objectweb.asm.MethodVisitor;
-/*     */ import org.objectweb.asm.Type;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ final class BridgeHandler
-/*     */ {
-/*     */   public static MemberInstance getTarget(MemberInstance bridgeMethod) {
-/*  30 */     assert bridgeMethod.isBridge();
-/*     */     
-/*  32 */     MemberInstance ret = bridgeMethod.bridgeTarget;
-/*  33 */     if (ret != null) return ret;
-/*     */ 
-/*     */ 
-/*     */     
-/*  37 */     String bridgeId = bridgeMethod.getId();
-/*  38 */     int descStart = bridgeId.indexOf('(');
-/*     */     
-/*  40 */     for (MemberInstance m : bridgeMethod.cls.getMembers()) {
-/*  41 */       if (m != bridgeMethod && m
-/*  42 */         .isVirtual() && 
-/*  43 */         !m.isBridge() && 
-/*  44 */         isBridged(bridgeId, m.getId(), descStart, bridgeMethod.getContext())) {
-/*  45 */         bridgeMethod.bridgeTarget = m;
-/*     */         
-/*  47 */         return m;
-/*     */       } 
-/*     */     } 
-/*     */     
-/*  51 */     return null;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private static boolean isBridged(String bridgeId, String targetId, int descStart, TinyRemapper.MrjState context) {
-/*  63 */     if (!bridgeId.regionMatches(0, targetId, 0, descStart + 1)) return false;
-/*     */ 
-/*     */     
-/*  66 */     int argsEndBridge = bridgeId.lastIndexOf(')');
-/*  67 */     int argsEndTarget = targetId.lastIndexOf(')');
-/*     */     
-/*  69 */     if (!ClassInstance.isAssignableFrom(bridgeId, argsEndBridge + 1, targetId, argsEndTarget + 1, context)) {
-/*  70 */       return false;
-/*     */     }
-/*     */ 
-/*     */     
-/*  74 */     int posBridge = descStart + 1;
-/*  75 */     int posTarget = posBridge;
-/*     */     
-/*  77 */     for (; posBridge < argsEndBridge && posTarget < argsEndTarget; posBridge++, posTarget++) {
-/*  78 */       if (!ClassInstance.isAssignableFrom(bridgeId, posBridge, targetId, posTarget, context)) return false;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/*  83 */       char type = bridgeId.charAt(posBridge);
-/*     */       
-/*  85 */       while (type == '[') {
-/*  86 */         type = bridgeId.charAt(++posBridge);
-/*     */       }
-/*     */       
-/*  89 */       if (type == 'L') posBridge = bridgeId.indexOf(';', posBridge + 1);
-/*     */ 
-/*     */ 
-/*     */       
-/*  93 */       type = targetId.charAt(posTarget);
-/*     */       
-/*  95 */       while (type == '[') {
-/*  96 */         type = targetId.charAt(++posTarget);
-/*     */       }
-/*     */       
-/*  99 */       if (type == 'L') posTarget = targetId.indexOf(';', posTarget + 1);
-/*     */     
-/*     */     } 
-/* 102 */     return (posBridge == argsEndBridge && posTarget == argsEndTarget);
-/*     */   }
-/*     */   
-/*     */   public static void generateCompatBridges(ClassInstance cls, AsmRemapper remapper, ClassVisitor out) {
-/* 106 */     label30: for (MemberInstance m : cls.getMembers()) {
-/* 107 */       String bridgedName = m.getNewBridgedName();
-/*     */       
-/*     */       String mappedName;
-/* 110 */       if (bridgedName == null || (
-/* 111 */         mappedName = m.getNewMappedName()) == null || bridgedName
-/* 112 */         .equals(mappedName)) {
-/*     */         continue;
-/*     */       }
-/*     */       
-/* 116 */       for (MemberInstance o : cls.getMembers()) {
-/* 117 */         if (o != m && o.desc
-/* 118 */           .equals(m.desc) && remapper
-/* 119 */           .mapMethodName(cls.getName(), o.name, o.desc).equals(mappedName)) {
-/*     */           continue label30;
-/*     */         }
-/*     */       } 
-/*     */ 
-/*     */       
-/* 125 */       String mappedDesc = remapper.mapDesc(m.desc);
-/* 126 */       int lvSize = 1;
-/*     */       
-/* 128 */       MethodVisitor mv = out.visitMethod(m.access | 0x40 | 0x1000, mappedName, mappedDesc, null, null);
-/* 129 */       mv.visitCode();
-/* 130 */       mv.visitVarInsn(25, 0);
-/*     */       
-/* 132 */       if (!mappedDesc.startsWith("()")) {
-/* 133 */         for (Type type : Type.getArgumentTypes(mappedDesc)) {
-/* 134 */           mv.visitVarInsn(type.getOpcode(21), lvSize);
-/* 135 */           lvSize += type.getSize();
-/*     */         } 
-/*     */       }
-/*     */       
-/* 139 */       mv.visitMethodInsn(182, remapper.map(cls.getName()), bridgedName, mappedDesc, cls.isInterface());
-/*     */       
-/* 141 */       Type retType = Type.getReturnType(mappedDesc);
-/* 142 */       mv.visitInsn(retType.getOpcode(172));
-/*     */       
-/* 144 */       mv.visitMaxs(Math.max(lvSize, retType.getSize()), lvSize);
-/* 145 */       mv.visitEnd();
-/*     */     } 
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\BridgeHandler.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/ClassInstance.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/ClassInstance.java
deleted file mode 100644
index f1471e301b5587b79fae89c71a3db42499de87ab..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/ClassInstance.java
+++ /dev/null
@@ -1,927 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.nio.file.Path;
-/*     */ import java.util.ArrayDeque;
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.Arrays;
-/*     */ import java.util.Collection;
-/*     */ import java.util.Collections;
-/*     */ import java.util.Deque;
-/*     */ import java.util.HashMap;
-/*     */ import java.util.HashSet;
-/*     */ import java.util.IdentityHashMap;
-/*     */ import java.util.List;
-/*     */ import java.util.Map;
-/*     */ import java.util.Set;
-/*     */ import java.util.concurrent.ConcurrentHashMap;
-/*     */ import java.util.concurrent.ConcurrentMap;
-/*     */ import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
-/*     */ import java.util.function.Predicate;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrClass;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrEnvironment;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrField;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMethod;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class ClassInstance
-/*     */   implements TrClass
-/*     */ {
-/*     */   ClassInstance(TinyRemapper tr, boolean isInput, InputTag[] inputTags, Path srcFile, byte[] data) {
-/*  55 */     assert !isInput || data != null;
-/*  56 */     this.tr = tr;
-/*  57 */     this.isInput = isInput;
-/*  58 */     this.inputTags = inputTags;
-/*  59 */     this.srcPath = srcFile;
-/*  60 */     this.data = data;
-/*  61 */     this.mrjOrigin = this;
-/*     */   }
-/*     */   
-/*     */   void init(String name, int classVersion, int mrjVersion, String signature, String superName, int access, String[] interfaces) {
-/*  65 */     this.name = name;
-/*  66 */     this.classVersion = classVersion;
-/*  67 */     this.mrjVersion = mrjVersion;
-/*  68 */     this.superName = superName;
-/*  69 */     this.signature = signature;
-/*  70 */     this.access = access;
-/*  71 */     this.interfaces = interfaces;
-/*     */   }
-/*     */   
-/*     */   void setContext(TinyRemapper.MrjState context) {
-/*  75 */     this.context = context;
-/*     */   }
-/*     */   
-/*     */   TinyRemapper.MrjState getContext() {
-/*  79 */     return this.context;
-/*     */   }
-/*     */   
-/*     */   MemberInstance addMember(MemberInstance member) {
-/*  83 */     return this.members.put(member.getId(), member);
-/*     */   } void addInputTags(InputTag[] tags) {
-/*     */     InputTag[] oldTags;
-/*     */     InputTag[] newTags;
-/*  87 */     if (tags == null || tags.length == 0) {
-/*     */       return;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     do {
-/*  93 */       oldTags = this.inputTags;
-/*     */       
-/*  95 */       if (oldTags == null) {
-/*  96 */         newTags = tags;
-/*     */       } else {
-/*  98 */         int missingTags = 0;
-/*     */         
-/* 100 */         for (InputTag newTag : tags) {
-/* 101 */           boolean found = false;
-/*     */           
-/* 103 */           for (InputTag oldTag : oldTags) {
-/* 104 */             if (newTag == oldTag) {
-/* 105 */               found = true;
-/*     */               
-/*     */               break;
-/*     */             } 
-/*     */           } 
-/* 110 */           if (!found) missingTags++;
-/*     */         
-/*     */         } 
-/* 113 */         if (missingTags == 0)
-/*     */           return; 
-/* 115 */         newTags = Arrays.<InputTag>copyOf(oldTags, oldTags.length + missingTags);
-/*     */         
-/* 117 */         for (InputTag newTag : tags) {
-/* 118 */           boolean found = false;
-/*     */           
-/* 120 */           for (InputTag oldTag : oldTags) {
-/* 121 */             if (newTag == oldTag) {
-/* 122 */               found = true;
-/*     */               
-/*     */               break;
-/*     */             } 
-/*     */           } 
-/* 127 */           if (!found) {
-/* 128 */             newTags[newTags.length - missingTags] = newTag;
-/* 129 */             missingTags--;
-/*     */           } 
-/*     */         } 
-/*     */         
-/* 133 */         assert missingTags == 0;
-/*     */       } 
-/* 135 */     } while (!inputTagsUpdater.compareAndSet(this, oldTags, newTags));
-/*     */   }
-/*     */   
-/*     */   InputTag[] getInputTags() {
-/* 139 */     return this.inputTags;
-/*     */   }
-/*     */   
-/*     */   boolean hasAnyInputTag(InputTag[] reqTags) {
-/* 143 */     InputTag[] availTags = this.inputTags;
-/* 144 */     if (availTags == null) return true;
-/*     */     
-/* 146 */     for (InputTag reqTag : reqTags) {
-/* 147 */       for (InputTag availTag : availTags) {
-/* 148 */         if (availTag == reqTag) {
-/* 149 */           return true;
-/*     */         }
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 154 */     return false;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public TrEnvironment getEnvironment() {
-/* 159 */     return this.context;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int getAccess() {
-/* 164 */     return this.access;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String getName() {
-/* 169 */     return this.name;
-/*     */   }
-/*     */   
-/*     */   public int getClassVersion() {
-/* 173 */     return this.classVersion;
-/*     */   }
-/*     */   
-/*     */   public int getMrjVersion() {
-/* 177 */     return this.mrjVersion;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String getSuperName() {
-/* 182 */     return this.superName;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public ClassInstance getSuperClass() {
-/* 192 */     for (ClassInstance cls : this.parents) {
-/* 193 */       if (!cls.isInterface()) return cls;
-/*     */     
-/*     */     } 
-/* 196 */     return null;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   String[] getInterfaceNames0() {
-/* 216 */     return this.interfaces;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isPublicOrPrivate() {
-/* 230 */     return ((this.access & 0x3) != 0);
-/*     */   }
-/*     */   
-/*     */   public boolean isMrjCopy() {
-/* 234 */     return (this.mrjOrigin != this);
-/*     */   }
-/*     */   
-/*     */   public ClassInstance getMrjOrigin() {
-/* 238 */     return this.mrjOrigin;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   void propagate(TrMember.MemberType type, String originatingCls, String idSrc, String nameDst, TinyRemapper.Direction dir, boolean isVirtual, boolean fromBridge, boolean first, Set<ClassInstance> visitedUp, Set<ClassInstance> visitedDown) {
-/* 258 */     MemberInstance member = getMember(type, idSrc);
-/*     */     
-/* 260 */     if (member != null) {
-/* 261 */       if (!first && !isVirtual) {
-/*     */         return;
-/*     */       }
-/*     */       
-/* 265 */       if (first || (member.access & 0xA) == 0 || this.tr.propagatePrivate || (
-/*     */ 
-/*     */         
-/* 268 */         !this.tr.forcePropagation.isEmpty() && this.tr.forcePropagation.contains(this.name.replace('/', '.') + "." + member.name)))
-/*     */       {
-/* 270 */         if (!member.setNewName(nameDst, fromBridge)) {
-/* 271 */           ((Set<String>)this.tr.conflicts.computeIfAbsent(member, x -> Collections.newSetFromMap(new ConcurrentHashMap<>()))).add(originatingCls + "/" + nameDst);
-/*     */         } else {
-/* 273 */           member.newNameOriginatingCls = originatingCls;
-/*     */         } 
-/*     */       }
-/*     */       
-/* 277 */       if (first && ((member.access & 0x2) != 0 || (type == TrMember.MemberType.METHOD && 
-/*     */         
-/* 279 */         isInterface() && !isVirtual)))
-/*     */         return; 
-/* 281 */       if (this.tr.propagateBridges != TinyRemapper.LinkedMethodPropagation.DISABLED && member.cls.isInput && isVirtual && (member.access & 0x40) != 0) {
-/*     */ 
-/*     */ 
-/*     */         
-/* 285 */         assert member.type == TrMember.MemberType.METHOD;
-/*     */ 
-/*     */ 
-/*     */         
-/* 289 */         MemberInstance bridgeTarget = BridgeHandler.getTarget(member);
-/*     */         
-/* 291 */         if (bridgeTarget != null) {
-/* 292 */           Set<ClassInstance> visitedUpBridge = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 293 */           Set<ClassInstance> visitedDownBridge = Collections.newSetFromMap(new IdentityHashMap<>());
-/*     */           
-/* 295 */           visitedUpBridge.add(member.cls);
-/* 296 */           visitedDownBridge.add(member.cls);
-/*     */           
-/* 298 */           propagate(TrMember.MemberType.METHOD, originatingCls, bridgeTarget.getId(), nameDst, TinyRemapper.Direction.DOWN, true, (this.tr.propagateBridges == TinyRemapper.LinkedMethodPropagation.COMPATIBLE), false, visitedUpBridge, visitedDownBridge);
-/*     */         } 
-/*     */       } 
-/*     */     } else {
-/* 302 */       assert !first && (type == TrMember.MemberType.FIELD || !isInterface() || isVirtual);
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 307 */     assert isVirtual || dir == TinyRemapper.Direction.DOWN;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 326 */     if (dir == TinyRemapper.Direction.ANY || dir == TinyRemapper.Direction.UP || (isVirtual && member != null && (member.access & 0xA) == 0)) {
-/* 327 */       for (ClassInstance node : this.parents) {
-/* 328 */         if (visitedUp.add(node)) {
-/* 329 */           node.propagate(type, originatingCls, idSrc, nameDst, TinyRemapper.Direction.UP, isVirtual, fromBridge, false, visitedUp, visitedDown);
-/*     */         }
-/*     */       } 
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/* 336 */     if (dir == TinyRemapper.Direction.ANY || dir == TinyRemapper.Direction.DOWN || (isVirtual && member != null && (member.access & 0xA) == 0)) {
-/* 337 */       for (ClassInstance node : this.children) {
-/* 338 */         if (visitedDown.add(node)) {
-/* 339 */           node.propagate(type, originatingCls, idSrc, nameDst, TinyRemapper.Direction.DOWN, isVirtual, fromBridge, false, visitedUp, visitedDown);
-/*     */         }
-/*     */       } 
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isAssignableFrom(TrClass cls) {
-/* 349 */     return (cls instanceof ClassInstance && isAssignableFrom((ClassInstance)cls));
-/*     */   }
-/*     */   
-/*     */   public boolean isAssignableFrom(ClassInstance cls) {
-/* 353 */     if (cls == this) return true;
-/*     */     
-/* 355 */     if (isInterface()) {
-/* 356 */       Set<ClassInstance> visited = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 357 */       Deque<ClassInstance> queue = new ArrayDeque<>();
-/* 358 */       visited.add(cls);
-/*     */       
-/*     */       do {
-/* 361 */         for (ClassInstance parent : cls.parents) {
-/* 362 */           if (parent == this) return true;
-/*     */           
-/* 364 */           if (visited.add(parent)) {
-/* 365 */             queue.addLast(parent);
-/*     */           }
-/*     */         } 
-/* 368 */       } while ((cls = queue.pollFirst()) != null);
-/*     */     } else {
-/*     */       do {
-/* 371 */         ClassInstance superCls = null;
-/*     */         
-/* 373 */         for (ClassInstance c : cls.parents) {
-/* 374 */           if (!c.isInterface()) {
-/* 375 */             if (c == this) return true; 
-/* 376 */             superCls = c;
-/*     */             
-/*     */             break;
-/*     */           } 
-/*     */         } 
-/* 381 */         cls = superCls;
-/* 382 */       } while (cls != null);
-/*     */     } 
-/*     */     
-/* 385 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   static boolean isAssignableFrom(String superDesc, int superDescStart, String subDesc, int subDescStart, TinyRemapper.MrjState context) {
-/* 394 */     char superType = superDesc.charAt(superDescStart);
-/* 395 */     char subType = subDesc.charAt(subDescStart);
-/*     */ 
-/*     */     
-/* 398 */     if (superType == '[') {
-/*     */ 
-/*     */       
-/*     */       do {
-/* 402 */         if (subType != '[') return false;
-/*     */         
-/* 404 */         superType = superDesc.charAt(++superDescStart);
-/* 405 */         subType = subDesc.charAt(++subDescStart);
-/* 406 */       } while (superType == '[');
-/*     */       
-/* 408 */       return (superType == subType && (superType != 'L' || superDesc
-/* 409 */         .regionMatches(superDescStart + 1, subDesc, subDescStart + 1, superDesc.indexOf(';', superDescStart + 1) + 1)));
-/* 410 */     }  if (superType != 'L')
-/* 411 */       return (superType == subType); 
-/* 412 */     if (subType != 'L' && subType != '[') {
-/* 413 */       return false;
-/*     */     }
-/*     */ 
-/*     */     
-/* 417 */     superDescStart++;
-/* 418 */     subDescStart++;
-/*     */ 
-/*     */     
-/* 421 */     if (superDesc.startsWith("java/lang/Object;", superDescStart)) return true;
-/*     */ 
-/*     */     
-/* 424 */     if (subType != 'L') return false;
-/*     */     
-/* 426 */     int superDescEnd = superDesc.indexOf(';', superDescStart);
-/* 427 */     int subDescEnd = subDesc.indexOf(';', subDescStart);
-/* 428 */     int superDescLen = superDescEnd - superDescStart;
-/*     */ 
-/*     */     
-/* 431 */     if (superDescLen == subDescEnd - subDescStart && superDesc
-/* 432 */       .regionMatches(superDescStart, subDesc, subDescStart, superDescLen)) {
-/* 433 */       return true;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/* 438 */     String superName = superDesc.substring(superDescStart, superDescEnd);
-/* 439 */     String subName = subDesc.substring(subDescStart, subDescEnd);
-/*     */     
-/* 441 */     ClassInstance superCls = context.getClass(superName);
-/* 442 */     if (superCls != null && superCls.children.isEmpty()) return false;
-/*     */     
-/* 444 */     ClassInstance subCls = context.getClass(subName);
-/*     */     
-/* 446 */     if (subCls != null) {
-/* 447 */       if (superCls == null || superCls.isInterface()) {
-/* 448 */         Set<ClassInstance> visited = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 449 */         Deque<ClassInstance> queue = new ArrayDeque<>();
-/* 450 */         visited.add(subCls);
-/*     */         
-/*     */         do {
-/* 453 */           for (ClassInstance parent : subCls.parents) {
-/* 454 */             if (parent.name.equals(superName)) return true;
-/*     */             
-/* 456 */             if (visited.add(parent)) {
-/* 457 */               queue.addLast(parent);
-/*     */             }
-/*     */           } 
-/* 460 */         } while ((subCls = queue.pollFirst()) != null);
-/*     */       } else {
-/*     */         do {
-/* 463 */           String curSuperName = subCls.superName;
-/*     */           
-/* 465 */           if (curSuperName.equals(superName)) return true; 
-/* 466 */           if (curSuperName.equals("java/lang/Object")) return false;
-/*     */           
-/* 468 */           subCls = context.getClass(curSuperName);
-/* 469 */         } while (subCls != null);
-/*     */       } 
-/* 471 */     } else if (superCls != null) {
-/* 472 */       Set<ClassInstance> visited = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 473 */       Deque<ClassInstance> queue = new ArrayDeque<>();
-/* 474 */       visited.add(superCls);
-/*     */       
-/*     */       do {
-/* 477 */         for (ClassInstance child : superCls.children) {
-/* 478 */           if (child.name.equals(subName)) return true;
-/*     */           
-/* 480 */           if (visited.add(child)) {
-/* 481 */             queue.addLast(child);
-/*     */           }
-/*     */         } 
-/* 484 */       } while ((superCls = queue.pollFirst()) != null);
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 489 */     return false;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public MemberInstance getMember(TrMember.MemberType type, String id) {
-/* 503 */     return this.members.get(id);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Collection<MemberInstance> getMembers() {
-/* 530 */     return this.members.values();
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Collection<TrField> getFields(String name, String desc, boolean isDescPrefix, Predicate<TrField> filter, Collection<TrField> out) {
-/* 535 */     if (out == null) out = new ArrayList<>(this.members.size());
-/*     */     
-/* 537 */     for (MemberInstance m : this.members.values()) {
-/* 538 */       if (m.isField() && matches(m, name, desc, isDescPrefix, filter)) out.add(m);
-/*     */     
-/*     */     } 
-/* 541 */     return out;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Collection<TrMethod> getMethods(String name, String desc, boolean isDescPrefix, Predicate<TrMethod> filter, Collection<TrMethod> out) {
-/* 546 */     if (out == null) out = new ArrayList<>(this.members.size());
-/*     */     
-/* 548 */     for (MemberInstance m : this.members.values()) {
-/* 549 */       if (m.isMethod() && matches(m, name, desc, isDescPrefix, filter)) out.add(m);
-/*     */     
-/*     */     } 
-/* 552 */     return out;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public MemberInstance resolve(TrMember.MemberType type, String id) {
-/* 566 */     MemberInstance member = getMember(type, id);
-/* 567 */     if (member != null) return member;
-/*     */ 
-/*     */     
-/* 570 */     member = this.resolvedMembers.get(id);
-/*     */     
-/* 572 */     if (member == null) {
-/*     */       
-/* 574 */       member = (type == TrMember.MemberType.FIELD) ? resolveField(id) : resolveMethod(id);
-/* 575 */       assert member != null;
-/*     */ 
-/*     */       
-/* 578 */       MemberInstance prev = this.resolvedMembers.putIfAbsent(id, member);
-/* 579 */       if (prev != null) member = prev;
-/*     */     
-/*     */     } 
-/* 582 */     return (member != nullMember) ? member : null;
-/*     */   }
-/*     */   
-/*     */   private MemberInstance resolveField(String id) {
-/* 586 */     Deque<ClassInstance> queue = new ArrayDeque<>();
-/* 587 */     Set<ClassInstance> visited = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 588 */     visited.add(this);
-/* 589 */     ClassInstance context = this;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     while (true) {
-/* 595 */       ClassInstance cls = context;
-/*     */       
-/*     */       do {
-/* 598 */         for (ClassInstance parent : cls.parents) {
-/* 599 */           if (parent.isInterface() && visited.add(parent)) {
-/* 600 */             MemberInstance ret = parent.getMember(TrMember.MemberType.FIELD, id);
-/* 601 */             if (ret != null) return ret;
-/*     */             
-/* 603 */             queue.addLast(parent);
-/*     */           } 
-/*     */         } 
-/* 606 */       } while ((cls = queue.pollLast()) != null);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/* 611 */       cls = context;
-/* 612 */       context = cls.getSuperClass();
-/* 613 */       if (context == null)
-/*     */         break; 
-/* 615 */       MemberInstance parentMember = context.getMember(TrMember.MemberType.FIELD, id);
-/* 616 */       if (parentMember != null) return parentMember;
-/*     */     
-/*     */     } 
-/* 619 */     return nullMember;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Collection<TrField> resolveFields(String name, String desc, boolean isDescPrefix, Predicate<TrField> filter, Collection<TrField> out) {
-/* 624 */     if (name != null && ((desc != null && !isDescPrefix) || this.tr.ignoreFieldDesc)) {
-/* 625 */       MemberInstance ret = resolve(TrMember.MemberType.FIELD, MemberInstance.getFieldId(name, desc, this.tr.ignoreFieldDesc));
-/* 626 */       if (ret != null && filter != null && !filter.test(ret)) ret = null;
-/*     */       
-/* 628 */       if (out == null) {
-/* 629 */         return (ret == null || filter != null) ? Collections.<TrField>emptyList() : Collections.<TrField>singletonList(ret);
-/*     */       }
-/* 631 */       if (ret != null) out.add(ret); 
-/* 632 */       return out;
-/*     */     } 
-/*     */ 
-/*     */     
-/* 636 */     if (out == null) out = new ArrayList<>();
-/*     */     
-/* 638 */     for (MemberInstance member : getMembers()) {
-/* 639 */       if (member.isField()) addMatching(member, name, desc, isDescPrefix, filter, out);
-/*     */     
-/*     */     } 
-/* 642 */     Deque<ClassInstance> queue = new ArrayDeque<>();
-/* 643 */     Set<ClassInstance> visited = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 644 */     visited.add(this);
-/* 645 */     ClassInstance context = this;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     while (true) {
-/* 651 */       ClassInstance cls = context;
-/*     */       
-/*     */       do {
-/* 654 */         for (ClassInstance parent : cls.parents) {
-/* 655 */           if (parent.isInterface() && visited.add(parent)) {
-/* 656 */             for (MemberInstance member : parent.getMembers()) {
-/* 657 */               if (member.isField()) addMatching(member, name, desc, isDescPrefix, filter, out);
-/*     */             
-/*     */             } 
-/* 660 */             queue.addLast(parent);
-/*     */           } 
-/*     */         } 
-/* 663 */       } while ((cls = queue.pollLast()) != null);
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */       
-/* 668 */       cls = context;
-/* 669 */       context = cls.getSuperClass();
-/* 670 */       if (context == null)
-/*     */         break; 
-/* 672 */       for (MemberInstance member : context.getMembers()) {
-/* 673 */         if (member.isField()) addMatching(member, name, desc, isDescPrefix, filter, out);
-/*     */       
-/*     */       } 
-/*     */     } 
-/* 677 */     return out;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private MemberInstance resolveMethod(String id) {
-/* 684 */     ClassInstance cls = this;
-/*     */     
-/* 686 */     while ((cls = cls.getSuperClass()) != null) {
-/* 687 */       MemberInstance ret = cls.getMember(TrMember.MemberType.METHOD, id);
-/* 688 */       if (ret != null) return ret;
-/*     */     
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 701 */     Deque<ClassInstance> queue = new ArrayDeque<>();
-/* 702 */     Set<ClassInstance> visited = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 703 */     visited.add(this);
-/* 704 */     List<MemberInstance> matchedMethods = new ArrayList<>();
-/* 705 */     boolean hasNonAbstract = false;
-/* 706 */     cls = this;
-/*     */     
-/*     */     do {
-/* 709 */       for (ClassInstance parent : cls.parents) {
-/* 710 */         if (!visited.add(parent))
-/*     */           continue; 
-/* 712 */         if (parent.isInterface()) {
-/* 713 */           MemberInstance parentMember = parent.getMember(TrMember.MemberType.METHOD, id);
-/*     */           
-/* 715 */           if (parentMember != null && parentMember.isVirtual()) {
-/* 716 */             if (!parentMember.isAbstract()) hasNonAbstract = true; 
-/* 717 */             matchedMethods.add(parentMember);
-/*     */             
-/*     */             continue;
-/*     */           } 
-/*     */         } 
-/* 722 */         queue.addLast(parent);
-/*     */       } 
-/* 724 */     } while ((cls = queue.pollFirst()) != null);
-/*     */     
-/* 726 */     if (hasNonAbstract && matchedMethods.size() > 1)
-/*     */     {
-/* 728 */       label47: for (MemberInstance member : matchedMethods) {
-/* 729 */         if (member.isAbstract())
-/*     */           continue; 
-/* 731 */         for (MemberInstance m : matchedMethods) {
-/* 732 */           if (m != member && member.cls.isAssignableFrom(m.cls))
-/*     */             continue label47; 
-/*     */         } 
-/* 735 */         return member;
-/*     */       } 
-/*     */     }
-/*     */     
-/* 739 */     if (!matchedMethods.isEmpty()) return matchedMethods.get(0);
-/*     */     
-/* 741 */     return nullMember;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Collection<TrMethod> resolveMethods(String name, String desc, boolean isDescPrefix, Predicate<TrMethod> filter, Collection<TrMethod> out) {
-/* 746 */     if (name != null && desc != null && !isDescPrefix) {
-/* 747 */       MemberInstance ret = resolve(TrMember.MemberType.METHOD, MemberInstance.getMethodId(name, desc));
-/* 748 */       if (ret != null && filter != null && !filter.test(ret)) ret = null;
-/*     */       
-/* 750 */       if (out == null) {
-/* 751 */         return (ret == null || filter != null) ? Collections.<TrMethod>emptyList() : Collections.<TrMethod>singletonList(ret);
-/*     */       }
-/* 753 */       if (ret != null) out.add(ret); 
-/* 754 */       return out;
-/*     */     } 
-/*     */ 
-/*     */     
-/* 758 */     if (out == null) out = new ArrayList<>();
-/*     */     
-/* 760 */     for (MemberInstance member : getMembers()) {
-/* 761 */       if (member.isMethod()) addMatching(member, name, desc, isDescPrefix, filter, out);
-/*     */     
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 767 */     ClassInstance cls = this;
-/*     */     
-/* 769 */     while ((cls = cls.getSuperClass()) != null) {
-/* 770 */       for (MemberInstance member : cls.getMembers()) {
-/* 771 */         if (member.isMethod()) addMatching(member, name, desc, isDescPrefix, filter, out);
-/*     */       
-/*     */       } 
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 785 */     Deque<ClassInstance> queue = new ArrayDeque<>();
-/* 786 */     Set<ClassInstance> visited = Collections.newSetFromMap(new IdentityHashMap<>());
-/* 787 */     visited.add(this);
-/* 788 */     Map<String, List<TrMethod>> matchedMethodsMap = new HashMap<>();
-/* 789 */     boolean hasNonAbstract = false;
-/* 790 */     cls = this;
-/*     */     
-/*     */     do {
-/* 793 */       for (ClassInstance parent : cls.parents) {
-/* 794 */         if (!visited.add(parent))
-/*     */           continue; 
-/* 796 */         if (parent.isInterface()) {
-/* 797 */           for (MemberInstance member : parent.getMembers()) {
-/* 798 */             if (member.isMethod() && matches(member, name, desc, isDescPrefix, filter) && 
-/* 799 */               addUnique(member, (Collection<MemberInstance>)matchedMethodsMap.computeIfAbsent(member.getId(), ignore -> new ArrayList())) && 
-/* 800 */               !member.isAbstract()) hasNonAbstract = true;
-/*     */           
-/*     */           } 
-/*     */         }
-/*     */ 
-/*     */         
-/* 806 */         queue.addLast(parent);
-/*     */       } 
-/* 808 */     } while ((cls = queue.pollFirst()) != null);
-/*     */     
-/* 810 */     for (List<TrMethod> matchedMethods : matchedMethodsMap.values()) {
-/* 811 */       if (matchedMethods.isEmpty())
-/*     */         continue; 
-/* 813 */       if (hasNonAbstract && matchedMethods.size() > 1) {
-/* 814 */         label86: for (TrMethod member : matchedMethods) {
-/* 815 */           if (member.isAbstract())
-/*     */             continue; 
-/* 817 */           for (TrMember m : matchedMethods) {
-/* 818 */             if (m != member && member.getOwner().isAssignableFrom(m.getOwner()))
-/*     */               continue label86; 
-/*     */           } 
-/* 821 */           addUnique(member, out);
-/*     */         } 
-/*     */       }
-/*     */ 
-/*     */ 
-/*     */       
-/* 827 */       addUnique(matchedMethods.get(0), out);
-/*     */     } 
-/*     */     
-/* 830 */     return out;
-/*     */   }
-/*     */   
-/*     */   private static <T extends TrMember> boolean matches(T member, String name, String desc, boolean isDescPrefix, Predicate<T> filter) {
-/* 834 */     return ((name == null || name.equals(member.getName())) && (desc == null || (!isDescPrefix && member
-/* 835 */       .getDesc().equals(desc)) || (isDescPrefix && member.getDesc().startsWith(desc))) && (filter == null || filter
-/* 836 */       .test(member)));
-/*     */   }
-/*     */   
-/*     */   private static <T extends TrMember> boolean addUnique(T member, Collection<T> out) {
-/* 840 */     for (TrMember trMember : out) {
-/* 841 */       if (trMember.getName().equals(member.getName()) && trMember.getDesc().equals(member.getDesc())) return false;
-/*     */     
-/*     */     } 
-/* 844 */     out.add(member);
-/*     */     
-/* 846 */     return true;
-/*     */   }
-/*     */   
-/*     */   private static <T extends TrMember> void addMatching(T member, String name, String desc, boolean isDescPrefix, Predicate<T> filter, Collection<T> out) {
-/* 850 */     if (matches(member, name, desc, isDescPrefix, filter)) {
-/* 851 */       addUnique(member, out);
-/*     */     }
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   ClassInstance constructMrjCopy(TinyRemapper.MrjState newContext) {
-/* 857 */     ClassInstance copy = new ClassInstance(this.tr, false, this.inputTags, this.srcPath, this.data);
-/* 858 */     copy.init(this.name, this.classVersion, this.mrjVersion, this.signature, this.superName, this.access, this.interfaces);
-/* 859 */     copy.setContext(newContext);
-/*     */     
-/* 861 */     for (MemberInstance member : this.members.values()) {
-/* 862 */       copy.addMember(new MemberInstance(member.type, copy, member.name, member.desc, member.access, member.index));
-/*     */     }
-/*     */ 
-/*     */     
-/* 866 */     copy.mrjOrigin = this.mrjOrigin;
-/* 867 */     return copy;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean isInput() {
-/* 879 */     return this.isInput;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 884 */     return this.name;
-/*     */   }
-/*     */   
-/*     */   public static String getMrjName(String clsName, int mrjVersion) {
-/* 888 */     if (mrjVersion != -1) {
-/* 889 */       return "/META-INF/versions/" + mrjVersion + "/" + clsName;
-/*     */     }
-/* 891 */     return clsName;
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/* 899 */   private static final MemberInstance nullMember = new MemberInstance(null, null, null, null, 0, 0);
-/* 900 */   private static final AtomicReferenceFieldUpdater<ClassInstance, InputTag[]> inputTagsUpdater = (AtomicReferenceFieldUpdater)AtomicReferenceFieldUpdater.newUpdater(ClassInstance.class, (Class)InputTag[].class, "inputTags");
-/*     */   
-/*     */   final TinyRemapper tr;
-/*     */   
-/*     */   private TinyRemapper.MrjState context;
-/*     */   final boolean isInput;
-/*     */   private volatile InputTag[] inputTags;
-/*     */   final Path srcPath;
-/*     */   byte[] data;
-/*     */   private ClassInstance mrjOrigin;
-/* 910 */   private final Map<String, MemberInstance> members = new HashMap<>();
-/* 911 */   private final ConcurrentMap<String, MemberInstance> resolvedMembers = new ConcurrentHashMap<>();
-/* 912 */   final Set<ClassInstance> parents = new HashSet<>();
-/* 913 */   final Set<ClassInstance> children = new HashSet<>();
-/*     */   private String name;
-/*     */   private int classVersion;
-/*     */   private int mrjVersion;
-/*     */   private String superName;
-/*     */   private String signature;
-/*     */   private int access;
-/*     */   private String[] interfaces;
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\ClassInstance.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/FileSystemReference.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/FileSystemReference.java
deleted file mode 100644
index e662a3384db477401f2b77fd99f4f8a2ca222a59..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/FileSystemReference.java
+++ /dev/null
@@ -1,155 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.io.Closeable;
-/*     */ import java.io.IOException;
-/*     */ import java.net.URI;
-/*     */ import java.net.URISyntaxException;
-/*     */ import java.nio.file.FileSystem;
-/*     */ import java.nio.file.FileSystemAlreadyExistsException;
-/*     */ import java.nio.file.FileSystemNotFoundException;
-/*     */ import java.nio.file.FileSystems;
-/*     */ import java.nio.file.Path;
-/*     */ import java.util.Collections;
-/*     */ import java.util.IdentityHashMap;
-/*     */ import java.util.Map;
-/*     */ import java.util.Set;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class FileSystemReference
-/*     */   implements Closeable
-/*     */ {
-/*     */   public static FileSystemReference openJar(Path path) throws IOException {
-/*  44 */     return openJar(path, false);
-/*     */   }
-/*     */   
-/*     */   public static FileSystemReference openJar(Path path, boolean create) throws IOException {
-/*  48 */     return open(toJarUri(path), create);
-/*     */   }
-/*     */   
-/*     */   private static URI toJarUri(Path path) {
-/*  52 */     URI uri = path.toUri();
-/*     */     
-/*     */     try {
-/*  55 */       return new URI("jar:" + uri.getScheme(), uri.getHost(), uri.getPath(), uri.getFragment());
-/*  56 */     } catch (URISyntaxException e) {
-/*  57 */       throw new RuntimeException("can't convert path " + path + " to uri", e);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static FileSystemReference open(URI uri, boolean create) throws IOException {
-/*  66 */     synchronized (openFsMap) {
-/*  67 */       boolean opened = false;
-/*  68 */       FileSystem fs = null;
-/*     */       
-/*     */       try {
-/*  71 */         fs = FileSystems.getFileSystem(uri);
-/*  72 */       } catch (FileSystemNotFoundException e) {
-/*     */         try {
-/*  74 */           fs = FileSystems.newFileSystem(uri, create ? Collections.singletonMap("create", "true") : Collections.emptyMap());
-/*  75 */           opened = true;
-/*  76 */         } catch (FileSystemAlreadyExistsException f) {
-/*  77 */           fs = FileSystems.getFileSystem(uri);
-/*     */         } 
-/*     */       } 
-/*     */       
-/*  81 */       FileSystemReference ret = new FileSystemReference(fs);
-/*  82 */       Set<FileSystemReference> refs = openFsMap.get(fs);
-/*     */       
-/*  84 */       if (refs == null) {
-/*  85 */         refs = Collections.newSetFromMap(new IdentityHashMap<>());
-/*  86 */         openFsMap.put(fs, refs);
-/*  87 */         if (!opened) refs.add(null); 
-/*  88 */       } else if (opened) {
-/*  89 */         throw new IllegalStateException("opened but already in refs?");
-/*     */       } 
-/*     */       
-/*  92 */       refs.add(ret);
-/*     */       
-/*  94 */       return ret;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private FileSystemReference(FileSystem fs) {
-/*  99 */     this.fileSystem = fs;
-/*     */   }
-/*     */   
-/*     */   public boolean isReadOnly() {
-/* 103 */     if (this.closed) throw new IllegalStateException("fs closed");
-/*     */     
-/* 105 */     return this.fileSystem.isReadOnly();
-/*     */   }
-/*     */   
-/*     */   public Path getPath(String first, String... more) {
-/* 109 */     if (this.closed) throw new IllegalStateException("fs closed");
-/*     */     
-/* 111 */     return this.fileSystem.getPath(first, more);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void close() throws IOException {
-/* 122 */     synchronized (openFsMap) {
-/* 123 */       if (this.closed)
-/* 124 */         return;  this.closed = true;
-/*     */       
-/* 126 */       Set<FileSystemReference> refs = openFsMap.get(this.fileSystem);
-/* 127 */       if (refs == null || !refs.remove(this)) throw new IllegalStateException("fs " + this.fileSystem + " was already closed");
-/*     */       
-/* 129 */       if (refs.isEmpty()) {
-/* 130 */         openFsMap.remove(this.fileSystem);
-/* 131 */         this.fileSystem.close();
-/* 132 */       } else if (refs.size() == 1 && refs.contains(null)) {
-/* 133 */         openFsMap.remove(this.fileSystem);
-/*     */       } 
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 140 */     synchronized (openFsMap) {
-/* 141 */       Set<FileSystemReference> refs = openFsMap.getOrDefault(this.fileSystem, Collections.emptySet());
-/* 142 */       return String.format("%s=%dx,%s", new Object[] { this.fileSystem, Integer.valueOf(refs.size()), refs.contains(null) ? "existing" : "new" });
-/*     */     } 
-/*     */   }
-/*     */   
-/* 146 */   private static final Map<FileSystem, Set<FileSystemReference>> openFsMap = new IdentityHashMap<>();
-/*     */   private final FileSystem fileSystem;
-/*     */   private volatile boolean closed;
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\FileSystemReference.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/IMappingProvider.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/IMappingProvider.java
deleted file mode 100644
index f7b1625c8ff167387e3deb7cef23ee789b25bf28..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/IMappingProvider.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @FunctionalInterface
-/*    */ public interface IMappingProvider
-/*    */ {
-/*    */   void load(MappingAcceptor paramMappingAcceptor);
-/*    */   
-/*    */   public static final class Member
-/*    */   {
-/*    */     public String owner;
-/*    */     public String name;
-/*    */     public String desc;
-/*    */     
-/*    */     public Member(String owner, String name, String desc) {
-/* 35 */       this.owner = owner;
-/* 36 */       this.name = name;
-/* 37 */       this.desc = desc;
-/*    */     }
-/*    */   }
-/*    */   
-/*    */   public static interface MappingAcceptor {
-/*    */     void acceptClass(String param1String1, String param1String2);
-/*    */     
-/*    */     void acceptMethod(Member param1Member, String param1String);
-/*    */     
-/*    */     void acceptMethodArg(Member param1Member, int param1Int, String param1String);
-/*    */     
-/*    */     void acceptMethodVar(Member param1Member, int param1Int1, int param1Int2, int param1Int3, String param1String);
-/*    */     
-/*    */     void acceptField(Member param1Member, String param1String);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\IMappingProvider.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/InputTag.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/InputTag.java
deleted file mode 100644
index a30f98b2a1c40cbed86efda5a13afa1d99b2d0a6..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/InputTag.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper;
-
-public final class InputTag {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\InputTag.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MemberInstance.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MemberInstance.java
deleted file mode 100644
index 819ffba992198c81e923ee4adb091a74f4b5a80d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MemberInstance.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrClass;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrField;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMethod;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class MemberInstance
-/*     */   implements TrField, TrMethod
-/*     */ {
-/*     */   MemberInstance(TrMember.MemberType type, ClassInstance cls, String name, String desc, int access, int index) {
-/*  33 */     this.type = type;
-/*  34 */     this.cls = cls;
-/*  35 */     this.name = name;
-/*  36 */     this.desc = desc;
-/*  37 */     this.access = access;
-/*  38 */     this.index = index;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public TrMember.MemberType getType() {
-/*  43 */     return this.type;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public TrClass getOwner() {
-/*  48 */     return this.cls;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String getName() {
-/*  53 */     return this.name;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String getDesc() {
-/*  58 */     return this.desc;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int getAccess() {
-/*  63 */     return this.access;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public int getIndex() {
-/*  68 */     return this.index;
-/*     */   }
-/*     */   
-/*     */   public TinyRemapper.MrjState getContext() {
-/*  72 */     return this.cls.getContext();
-/*     */   }
-/*     */   
-/*     */   public String getId() {
-/*  76 */     return getId(this.type, this.name, this.desc, this.cls.tr.ignoreFieldDesc);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public String getNewName() {
-/*  85 */     String ret = this.newBridgedName;
-/*     */     
-/*  87 */     return (ret != null) ? ret : this.newName;
-/*     */   }
-/*     */   
-/*     */   public String getNewMappedName() {
-/*  91 */     return this.newName;
-/*     */   }
-/*     */   
-/*     */   public String getNewBridgedName() {
-/*  95 */     return this.newBridgedName;
-/*     */   }
-/*     */   
-/*     */   public boolean setNewName(String name, boolean fromBridge) {
-/*  99 */     if (name == null) throw new NullPointerException("null name");
-/*     */     
-/* 101 */     if (fromBridge) {
-/* 102 */       boolean bool = newBridgedNameUpdater.compareAndSet(this, null, name);
-/*     */       
-/* 104 */       return (bool || name.equals(this.newBridgedName));
-/*     */     } 
-/* 106 */     boolean ret = newNameUpdater.compareAndSet(this, null, name);
-/*     */     
-/* 108 */     return (ret || name.equals(this.newName));
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void forceSetNewName(String name) {
-/* 113 */     this.newName = name;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 118 */     return String.format("%s/%s%s", new Object[] { this.cls.getName(), this.name, this.desc });
-/*     */   }
-/*     */   
-/*     */   public static String getId(TrMember.MemberType type, String name, String desc, boolean ignoreFieldDesc) {
-/* 122 */     return (type == TrMember.MemberType.METHOD) ? getMethodId(name, desc) : getFieldId(name, desc, ignoreFieldDesc);
-/*     */   }
-/*     */   
-/*     */   public static String getMethodId(String name, String desc) {
-/* 126 */     return name.concat(desc);
-/*     */   }
-/*     */   
-/*     */   public static String getFieldId(String name, String desc, boolean ignoreDesc) {
-/* 130 */     return ignoreDesc ? name : (name + ";;" + desc);
-/*     */   }
-/*     */   
-/*     */   public static String getNameFromId(TrMember.MemberType type, String id, boolean ignoreFieldDesc) {
-/* 134 */     if (ignoreFieldDesc && type == TrMember.MemberType.FIELD) {
-/* 135 */       return id;
-/*     */     }
-/* 137 */     String separator = (type == TrMember.MemberType.METHOD) ? "(" : ";;";
-/* 138 */     int pos = id.lastIndexOf(separator);
-/* 139 */     if (pos < 0) throw new IllegalArgumentException(String.format("invalid %s id: %s", new Object[] { type.name(), id }));
-/*     */     
-/* 141 */     return id.substring(0, pos);
-/*     */   }
-/*     */ 
-/*     */   
-/* 145 */   private static final AtomicReferenceFieldUpdater<MemberInstance, String> newNameUpdater = AtomicReferenceFieldUpdater.newUpdater(MemberInstance.class, String.class, "newName");
-/* 146 */   private static final AtomicReferenceFieldUpdater<MemberInstance, String> newBridgedNameUpdater = AtomicReferenceFieldUpdater.newUpdater(MemberInstance.class, String.class, "newBridgedName");
-/*     */   final TrMember.MemberType type;
-/*     */   final ClassInstance cls;
-/*     */   final String name;
-/*     */   final String desc;
-/*     */   final int access;
-/*     */   final int index;
-/*     */   private volatile String newName;
-/*     */   private volatile String newBridgedName;
-/*     */   String newNameOriginatingCls;
-/*     */   MemberInstance bridgeTarget;
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\MemberInstance.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MetaInfFixer.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MetaInfFixer.java
deleted file mode 100644
index 07d59752e50fb3642f6d5772eecbdc7bcb1ffd18..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MetaInfFixer.java
+++ /dev/null
@@ -1,162 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.io.BufferedOutputStream;
-/*     */ import java.io.BufferedReader;
-/*     */ import java.io.BufferedWriter;
-/*     */ import java.io.IOException;
-/*     */ import java.io.InputStream;
-/*     */ import java.io.InputStreamReader;
-/*     */ import java.io.OutputStream;
-/*     */ import java.nio.file.Files;
-/*     */ import java.nio.file.OpenOption;
-/*     */ import java.nio.file.Path;
-/*     */ import java.nio.file.StandardOpenOption;
-/*     */ import java.nio.file.attribute.FileAttribute;
-/*     */ import java.util.Iterator;
-/*     */ import java.util.jar.Attributes;
-/*     */ import java.util.jar.Manifest;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class MetaInfFixer
-/*     */   implements OutputConsumerPath.ResourceRemapper
-/*     */ {
-/*  36 */   public static final MetaInfFixer INSTANCE = new MetaInfFixer();
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public boolean canTransform(TinyRemapper remapper, Path relativePath) {
-/*  42 */     return (relativePath.startsWith("META-INF") && (
-/*  43 */       shouldStripForFixMeta(relativePath) || relativePath
-/*  44 */       .getFileName().toString().equals("MANIFEST.MF") || (remapper != null && relativePath
-/*  45 */       .getNameCount() == 3 && relativePath.getName(1).toString().equals("services"))));
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void transform(Path destinationDirectory, Path relativePath, InputStream input, TinyRemapper remapper) throws IOException {
-/*  50 */     String fileName = relativePath.getFileName().toString();
-/*     */     
-/*  52 */     if (relativePath.getNameCount() == 2 && fileName.equals("MANIFEST.MF")) {
-/*  53 */       Manifest manifest = new Manifest(input);
-/*  54 */       fixManifest(manifest, remapper);
-/*     */       
-/*  56 */       Path outputFile = destinationDirectory.resolve(relativePath.toString());
-/*  57 */       Path outputDir = outputFile.getParent();
-/*  58 */       if (outputDir != null) Files.createDirectories(outputDir, (FileAttribute<?>[])new FileAttribute[0]);
-/*     */       
-/*  60 */       OutputStream os = new BufferedOutputStream(Files.newOutputStream(outputFile, new OpenOption[0])); 
-/*  61 */       try { manifest.write(os);
-/*  62 */         os.close(); } catch (Throwable throwable) { try { os.close(); } catch (Throwable throwable1) { throwable.addSuppressed(throwable1); }  throw throwable; } 
-/*  63 */     } else if (remapper != null && relativePath.getNameCount() == 3 && relativePath.getName(1).toString().equals("services")) {
-/*  64 */       Path outputDir = destinationDirectory.resolve(relativePath.toString()).getParent();
-/*  65 */       Files.createDirectories(outputDir, (FileAttribute<?>[])new FileAttribute[0]);
-/*  66 */       Path outputFile = outputDir.resolve(mapFullyQualifiedClassName(fileName, remapper));
-/*     */       
-/*  68 */       BufferedReader reader = new BufferedReader(new InputStreamReader(input)); 
-/*  69 */       try { BufferedWriter writer = Files.newBufferedWriter(outputFile, new OpenOption[] { StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE }); 
-/*  70 */         try { fixServiceDecl(reader, writer, remapper);
-/*  71 */           if (writer != null) writer.close();  } catch (Throwable throwable) { if (writer != null) try { writer.close(); } catch (Throwable throwable1) { throwable.addSuppressed(throwable1); }   throw throwable; }  reader.close(); }
-/*     */       catch (Throwable throwable) { try { reader.close(); }
-/*     */         catch (Throwable throwable1) { throwable.addSuppressed(throwable1); }
-/*     */          throw throwable; }
-/*     */     
-/*  76 */     }  } private static boolean shouldStripForFixMeta(Path file) { if (file.getNameCount() != 2) return false;
-/*     */     
-/*  78 */     assert file.getName(0).toString().equals("META-INF");
-/*     */     
-/*  80 */     String fileName = file.getFileName().toString();
-/*     */ 
-/*     */     
-/*  83 */     return (fileName.endsWith(".SF") || fileName
-/*  84 */       .endsWith(".DSA") || fileName
-/*  85 */       .endsWith(".RSA") || fileName
-/*  86 */       .endsWith(".EC") || fileName
-/*  87 */       .startsWith("SIG-")); }
-/*     */ 
-/*     */   
-/*     */   private static String mapFullyQualifiedClassName(String name, TinyRemapper tr) {
-/*  91 */     assert name.indexOf('/') < 0;
-/*     */     
-/*  93 */     return tr.defaultState.remapper.map(name.replace('.', '/')).replace('/', '.');
-/*     */   }
-/*     */   
-/*     */   private static void fixManifest(Manifest manifest, TinyRemapper remapper) {
-/*  97 */     Attributes mainAttrs = manifest.getMainAttributes();
-/*     */     
-/*  99 */     if (remapper != null) {
-/* 100 */       String val = mainAttrs.getValue(Attributes.Name.MAIN_CLASS);
-/* 101 */       if (val != null) mainAttrs.put(Attributes.Name.MAIN_CLASS, mapFullyQualifiedClassName(val, remapper));
-/*     */       
-/* 103 */       val = mainAttrs.getValue("Launcher-Agent-Class");
-/* 104 */       if (val != null) mainAttrs.putValue("Launcher-Agent-Class", mapFullyQualifiedClassName(val, remapper));
-/*     */     
-/*     */     } 
-/* 107 */     mainAttrs.remove(Attributes.Name.SIGNATURE_VERSION);
-/*     */     
-/* 109 */     for (Iterator<Attributes> it = manifest.getEntries().values().iterator(); it.hasNext(); ) {
-/* 110 */       Attributes attrs = it.next();
-/*     */       
-/* 112 */       for (Iterator<Object> it2 = attrs.keySet().iterator(); it2.hasNext(); ) {
-/* 113 */         Attributes.Name attrName = (Attributes.Name)it2.next();
-/* 114 */         String name = attrName.toString();
-/*     */         
-/* 116 */         if (name.endsWith("-Digest") || name.contains("-Digest-") || name.equals("Magic")) {
-/* 117 */           it2.remove();
-/*     */         }
-/*     */       } 
-/*     */       
-/* 121 */       if (attrs.isEmpty()) it.remove();
-/*     */     
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   private static void fixServiceDecl(BufferedReader reader, BufferedWriter writer, TinyRemapper remapper) throws IOException {
-/*     */     String line;
-/* 128 */     while ((line = reader.readLine()) != null) {
-/* 129 */       int end = line.indexOf('#');
-/* 130 */       if (end < 0) end = line.length();
-/*     */ 
-/*     */ 
-/*     */       
-/* 134 */       int start = 0;
-/*     */       
-/*     */       char c;
-/* 137 */       while (start < end && ((c = line.charAt(start)) == ' ' || c == '\t')) {
-/* 138 */         start++;
-/*     */       }
-/*     */       
-/* 141 */       while (end > start && ((c = line.charAt(end - 1)) == ' ' || c == '\t')) {
-/* 142 */         end--;
-/*     */       }
-/*     */       
-/* 145 */       if (start == end) {
-/* 146 */         writer.write(line);
-/*     */       } else {
-/* 148 */         writer.write(line, 0, start);
-/* 149 */         writer.write(mapFullyQualifiedClassName(line.substring(start, end), remapper));
-/* 150 */         writer.write(line, end, line.length() - end);
-/*     */       } 
-/*     */       
-/* 153 */       writer.newLine();
-/*     */     } 
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\MetaInfFixer.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MetaInfRemover.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MetaInfRemover.java
deleted file mode 100644
index d3158385c721663795475730497ee187dfcff3d8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/MetaInfRemover.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*    */ 
-/*    */ import java.io.InputStream;
-/*    */ import java.nio.file.Path;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class MetaInfRemover
-/*    */   implements OutputConsumerPath.ResourceRemapper
-/*    */ {
-/* 25 */   public static final MetaInfRemover INSTANCE = new MetaInfRemover();
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public boolean canTransform(TinyRemapper remapper, Path relativePath) {
-/* 31 */     return (relativePath.startsWith("META-INF") && relativePath.getNameCount() != 2);
-/*    */   }
-/*    */   
-/*    */   public void transform(Path destinationDirectory, Path relativePath, InputStream input, TinyRemapper remapper) {}
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\MetaInfRemover.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/NonClassCopyMode.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/NonClassCopyMode.java
deleted file mode 100644
index 8aff7ea18350b756c92542e7477a4f947333e822..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/NonClassCopyMode.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/OutputConsumerPath.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/OutputConsumerPath.java
deleted file mode 100644
index 8aff7ea18350b756c92542e7477a4f947333e822..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/OutputConsumerPath.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/PackageAccessChecker.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/PackageAccessChecker.java
deleted file mode 100644
index e6baa8079af9c69d0ea36da42d00606b394f8d28..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/PackageAccessChecker.java
+++ /dev/null
@@ -1,249 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.util.Locale;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ import org.objectweb.asm.ConstantDynamic;
-/*     */ import org.objectweb.asm.Handle;
-/*     */ import org.objectweb.asm.Type;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class PackageAccessChecker
-/*     */ {
-/*     */   public static void checkClass(String accessingClass, String targetClass, String source, AsmRemapper remapper) {
-/*  35 */     if (accessingClass.equals(targetClass)) {
-/*     */       return;
-/*     */     }
-/*     */     
-/*  39 */     ClassInstance targetCls = remapper.getClass(targetClass);
-/*  40 */     if (targetCls == null)
-/*  41 */       return;  targetCls = targetCls.getMrjOrigin();
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  46 */     if (targetCls.isPublicOrPrivate()) {
-/*     */       return;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  53 */     String mappedAccessor = remapper.map(accessingClass);
-/*  54 */     int pkgEnd = mappedAccessor.lastIndexOf('/');
-/*  55 */     String mappedTarget = remapper.map(targetClass);
-/*     */     
-/*  57 */     if (isSamePackage(mappedAccessor, pkgEnd, mappedTarget)) {
-/*     */       return;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  64 */     System.out.printf("Invalid access from %s in %s to package-private class %s after remapping.%n", new Object[] { source, mappedAccessor, mappedTarget });
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  69 */     remapper.tr.classesToMakePublic.add(targetCls);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static void checkDesc(String accessingClass, String targetDesc, String source, AsmRemapper remapper) {
-/*  76 */     int startPos = 0;
-/*     */     
-/*     */     int pos;
-/*  79 */     while ((pos = targetDesc.indexOf('L', startPos)) >= 0) {
-/*  80 */       pos++;
-/*  81 */       int end = targetDesc.indexOf(';', pos);
-/*  82 */       if (end < 0) throw new IllegalArgumentException("invalid descriptor: ".concat(targetDesc));
-/*     */       
-/*  84 */       checkClass(accessingClass, targetDesc.substring(pos, end), source, remapper);
-/*     */       
-/*  86 */       startPos = end + 1;
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static void checkValue(String accessingClass, Object value, String source, AsmRemapper remapper) {
-/*  94 */     if (value instanceof Type) {
-/*  95 */       checkDesc(accessingClass, ((Type)value).getDescriptor(), source, remapper);
-/*  96 */     } else if (value instanceof Handle) {
-/*  97 */       Handle handle = (Handle)value;
-/*  98 */       checkMember(accessingClass, handle.getOwner(), handle.getName(), handle.getDesc(), TrMember.MemberType.METHOD, source, remapper);
-/*  99 */     } else if (value instanceof ConstantDynamic) {
-/* 100 */       ConstantDynamic constantDynamic = (ConstantDynamic)value;
-/*     */       
-/* 102 */       for (int i = 0, max = constantDynamic.getBootstrapMethodArgumentCount(); i < max; i++) {
-/* 103 */         checkValue(accessingClass, constantDynamic.getBootstrapMethodArgument(i), source, remapper);
-/*     */       }
-/*     */       
-/* 106 */       checkValue(accessingClass, constantDynamic.getBootstrapMethod(), source, remapper);
-/* 107 */       checkDesc(accessingClass, constantDynamic.getDescriptor(), source, remapper);
-/*     */     } 
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public static void checkMember(String accessingOwner, String owner, String name, String desc, TrMember.MemberType type, String source, AsmRemapper remapper) {
-/*     */     String mappedName, mappedDesc;
-/* 115 */     checkDesc(accessingOwner, desc, source, remapper);
-/*     */     
-/* 117 */     ClassInstance cls = remapper.getClass(owner);
-/* 118 */     if (cls == null)
-/* 119 */       return;  cls = cls.getMrjOrigin();
-/*     */     
-/* 121 */     String id = MemberInstance.getId(type, name, desc, remapper.tr.ignoreFieldDesc);
-/* 122 */     MemberInstance member = cls.resolve(type, id);
-/*     */     
-/* 124 */     if (member == null) {
-/*     */       return;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 134 */     boolean clsAccessible = (cls.isPublicOrPrivate() || accessingOwner.equals(owner));
-/*     */ 
-/*     */     
-/* 137 */     boolean memberAccessible = (member.isPublic() || (member.isPrivate() && cls.getClassVersion() < 55) || accessingOwner.equals(member.cls.getName()));
-/*     */     
-/* 139 */     if (clsAccessible && memberAccessible) {
-/*     */       return;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 147 */     String mappedAccessor = remapper.map(accessingOwner);
-/* 148 */     int pkgEnd = mappedAccessor.lastIndexOf('/');
-/*     */     
-/* 150 */     if (!clsAccessible && isSamePackage(mappedAccessor, pkgEnd, remapper.map(owner))) {
-/* 151 */       if (memberAccessible || owner.equals(member.cls.getName())) {
-/*     */         return;
-/*     */       }
-/* 154 */       clsAccessible = true;
-/*     */     } 
-/*     */ 
-/*     */     
-/* 158 */     if (!memberAccessible && isSamePackage(mappedAccessor, pkgEnd, remapper.map(member.cls.getName()))) {
-/* 159 */       if (clsAccessible) {
-/*     */         return;
-/*     */       }
-/* 162 */       memberAccessible = true;
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 168 */     if (member.isProtected() && hasSuperCls(accessingOwner, member.cls.getName(), remapper))
-/*     */     {
-/*     */ 
-/*     */       
-/* 172 */       if (member.isStatic() || owner
-/* 173 */         .equals(accessingOwner) || owner.equals(member.cls.getName()) || 
-/* 174 */         hasSuperCls(owner, accessingOwner, remapper) || hasSuperCls(accessingOwner, owner, remapper)) {
-/*     */         return;
-/*     */       }
-/*     */     }
-/*     */     
-/* 179 */     assert !clsAccessible || !memberAccessible;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 186 */     if (type == TrMember.MemberType.FIELD) {
-/* 187 */       mappedName = remapper.mapFieldName(owner, name, desc);
-/* 188 */       mappedDesc = remapper.mapDesc(desc);
-/*     */     } else {
-/* 190 */       mappedName = remapper.mapMethodName(owner, name, desc);
-/* 191 */       mappedDesc = remapper.mapMethodDesc(desc);
-/*     */     } 
-/*     */     
-/* 194 */     String inaccessible = null;
-/*     */     
-/* 196 */     if (!clsAccessible) {
-/* 197 */       inaccessible = String.format("package-private class %s", new Object[] { remapper.map(owner) });
-/*     */     }
-/*     */     
-/* 200 */     if (!memberAccessible) {
-/* 201 */       String memberMsg = String.format("%s %s %s/%s", new Object[] {
-/* 202 */             member.isProtected() ? "protected" : (member.isPrivate() ? "private" : "package-private"), type
-/* 203 */             .name().toLowerCase(Locale.ENGLISH), remapper
-/* 204 */             .map(member.cls.getName()), 
-/* 205 */             MemberInstance.getId(type, mappedName, mappedDesc, remapper.tr.ignoreFieldDesc)
-/*     */           });
-/* 207 */       if (inaccessible == null) {
-/* 208 */         inaccessible = memberMsg;
-/*     */       } else {
-/* 210 */         inaccessible = String.format("%s, %s", new Object[] { inaccessible, memberMsg });
-/*     */       } 
-/*     */     } 
-/*     */     
-/* 214 */     System.out.printf("Invalid access from %s in %s to %s after remapping.%n", new Object[] { source, mappedAccessor, inaccessible });
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/* 219 */     if (!clsAccessible) remapper.tr.classesToMakePublic.add(cls); 
-/* 220 */     if (!memberAccessible) remapper.tr.membersToMakePublic.add(member); 
-/*     */   }
-/*     */   
-/*     */   private static boolean isSamePackage(String clsA, int pkgEnd, String clsB) {
-/* 224 */     return ((pkgEnd < 0 && clsB.indexOf('/') < 0) || (pkgEnd >= 0 && pkgEnd < clsB
-/*     */       
-/* 226 */       .length() && clsB
-/* 227 */       .charAt(pkgEnd) == '/' && clsB
-/* 228 */       .indexOf('/', pkgEnd + 1) < 0 && clsA
-/* 229 */       .regionMatches(0, clsB, 0, pkgEnd)));
-/*     */   }
-/*     */   
-/*     */   private static boolean hasSuperCls(String cls, String reqSuperCls, AsmRemapper remapper) {
-/* 233 */     assert !cls.equals(reqSuperCls);
-/*     */     
-/*     */     ClassInstance c;
-/*     */     
-/* 237 */     while ((c = remapper.getClass(cls)) != null && (cls = c.getSuperName()) != null) {
-/* 238 */       if (cls.equals(reqSuperCls)) return true;
-/*     */     
-/*     */     } 
-/* 241 */     return false;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\PackageAccessChecker.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/Propagator.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/Propagator.java
deleted file mode 100644
index e6675406c64ae400c96ca85f596a3f2c0ff56b45..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/Propagator.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*    */ 
-/*    */ import java.util.Set;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ final class Propagator
-/*    */ {
-/*    */   static void propagate(MemberInstance member, String memberId, String nameDst, Set<ClassInstance> visitedUp, Set<ClassInstance> visitedDown) {
-/* 31 */     ClassInstance cls = member.cls;
-/* 32 */     boolean isVirtual = member.isVirtual();
-/*    */     
-/* 34 */     visitedUp.add(cls);
-/* 35 */     visitedDown.add(cls);
-/* 36 */     cls.propagate(member.type, cls.getName(), memberId, nameDst, 
-/* 37 */         isVirtual ? TinyRemapper.Direction.ANY : TinyRemapper.Direction.DOWN, isVirtual, false, true, visitedUp, visitedDown);
-/*    */     
-/* 39 */     visitedUp.clear();
-/* 40 */     visitedDown.clear();
-/*    */     
-/* 42 */     if (cls.tr.propagateRecordComponents != TinyRemapper.LinkedMethodPropagation.DISABLED && cls
-/* 43 */       .isRecord() && member
-/* 44 */       .isField() && (member.access & 0x1A) == 18) {
-/*    */       
-/* 46 */       String getterIdSrc = MemberInstance.getMethodId(member.name, "()".concat(member.desc));
-/* 47 */       MemberInstance getter = cls.getMember(TrMember.MemberType.METHOD, getterIdSrc);
-/*    */       
-/* 49 */       if (getter != null && getter.isVirtual()) {
-/* 50 */         visitedUp.add(cls);
-/* 51 */         visitedDown.add(cls);
-/* 52 */         cls.propagate(TrMember.MemberType.METHOD, cls.getName(), getterIdSrc, nameDst, TinyRemapper.Direction.ANY, true, true, true, visitedUp, visitedDown);
-/* 53 */         visitedUp.clear();
-/* 54 */         visitedDown.clear();
-/*    */       } 
-/*    */     } 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\Propagator.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/TinyRemapper.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/TinyRemapper.java
deleted file mode 100644
index 8aff7ea18350b756c92542e7477a4f947333e822..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/TinyRemapper.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/TinyUtils.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/TinyUtils.java
deleted file mode 100644
index d2a8383f6fe565b9c99e0c4e6b73bddbb868b4f6..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/TinyUtils.java
+++ /dev/null
@@ -1,176 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper;
-/*     */ 
-/*     */ import java.io.IOException;
-/*     */ import java.util.List;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.FlatMappingVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.MappingVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.adapter.FlatAsRegularMappingVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.adapter.MappingDstNsReorder;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.adapter.MappingSourceNsSwitch;
-/*     */ import net.fabricmc.loader.impl.lib.mappingio.tree.MappingTreeView;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class TinyUtils
-/*     */ {
-/*     */   public static IMappingProvider createMappingProvider(MappingTreeView tree, String fromM, String toM) {
-/*  80 */     return out -> {
-/*     */         try {
-/*     */           tree.accept(createAdapter(fromM, toM, out));
-/*  83 */         } catch (IOException e) {
-/*     */           throw new RuntimeException(e);
-/*     */         } 
-/*     */       };
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   private static MappingVisitor createAdapter(String fromNs, String toNs, IMappingProvider.MappingAcceptor out) throws IOException {
-/*  95 */     return (MappingVisitor)new MappingSourceNsSwitch((MappingVisitor)new MappingDstNsReorder((MappingVisitor)new FlatAsRegularMappingVisitor(new MappingAdapter(out)), new String[] { toNs }), fromNs);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   private static final class MappingAdapter
-/*     */     implements FlatMappingVisitor
-/*     */   {
-/*     */     private final IMappingProvider.MappingAcceptor next;
-/*     */     
-/*     */     MappingAdapter(IMappingProvider.MappingAcceptor next) {
-/* 105 */       this.next = next;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public boolean visitClass(String srcName, String[] dstNames) throws IOException {
-/* 110 */       String dstName = dstNames[0];
-/* 111 */       if (!TinyUtils.bothNullOrEqual(srcName, dstName)) this.next.acceptClass(srcName, dstName); 
-/* 112 */       return true;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     public boolean visitField(String srcClsName, String srcName, String srcDesc, String[] dstClsNames, String[] dstNames, String[] dstDescs) throws IOException {
-/* 118 */       String dstName = dstNames[0];
-/* 119 */       if (!TinyUtils.bothNullOrEqual(srcName, dstName)) this.next.acceptField(new IMappingProvider.Member(srcClsName, srcName, srcDesc), dstName); 
-/* 120 */       return false;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     public boolean visitMethod(String srcClsName, String srcName, String srcDesc, String[] dstClsNames, String[] dstNames, String[] dstDescs) throws IOException {
-/* 126 */       String dstName = dstNames[0];
-/* 127 */       if (!TinyUtils.bothNullOrEqual(srcName, dstName)) this.next.acceptMethod(new IMappingProvider.Member(srcClsName, srcName, srcDesc), dstName); 
-/* 128 */       return true;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     public boolean visitMethodArg(String srcClsName, String srcMethodName, String srcMethodDesc, int argPosition, int lvIndex, String srcArgName, String[] dstClsNames, String[] dstMethodNames, String[] dstMethodDescs, String[] dstArgNames) throws IOException {
-/* 134 */       String dstName = dstArgNames[0];
-/* 135 */       if (!TinyUtils.firstNullOrEqual(dstName, srcArgName)) this.next.acceptMethodArg(new IMappingProvider.Member(srcClsName, srcMethodName, srcMethodDesc), lvIndex, dstName); 
-/* 136 */       return false;
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     public boolean visitMethodVar(String srcClsName, String srcMethodName, String srcMethodDesc, int lvtRowIndex, int lvIndex, int startOpIdx, int endOpIds, String srcVarName, String[] dstClsNames, String[] dstMethodNames, String[] dstMethodDescs, String[] dstVarNames) throws IOException {
-/* 142 */       String dstName = dstVarNames[0];
-/* 143 */       if (!TinyUtils.firstNullOrEqual(dstName, srcVarName)) this.next.acceptMethodVar(new IMappingProvider.Member(srcClsName, srcMethodName, srcMethodDesc), lvIndex, startOpIdx, -1, dstName); 
-/* 144 */       return false;
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public void visitNamespaces(String srcNamespace, List<String> dstNamespaces) throws IOException {}
-/*     */ 
-/*     */     
-/*     */     public void visitClassComment(String srcName, String[] dstNames, String comment) throws IOException {}
-/*     */ 
-/*     */     
-/*     */     public void visitFieldComment(String srcClsName, String srcName, String srcDesc, String[] dstClsNames, String[] dstNames, String[] dstDescs, String comment) throws IOException {}
-/*     */     
-/*     */     public void visitMethodComment(String srcClsName, String srcName, String srcDesc, String[] dstClsNames, String[] dstNames, String[] dstDescs, String comment) throws IOException {}
-/*     */     
-/*     */     public void visitMethodArgComment(String srcClsName, String srcMethodName, String srcMethodDesc, int argPosition, int lvIndex, String srcArgName, String[] dstClsNames, String[] dstMethodNames, String[] dstMethodDescs, String[] dstArgNames, String comment) throws IOException {}
-/*     */     
-/*     */     public void visitMethodVarComment(String srcClsName, String srcMethodName, String srcMethodDesc, int lvtRowIndex, int lvIndex, int startOpIdx, int endOpIdx, String srcVarName, String[] dstClsNames, String[] dstMethodNames, String[] dstMethodDescs, String[] dstVarNames, String comment) throws IOException {}
-/*     */   }
-/*     */   
-/*     */   private static boolean firstNullOrEqual(Object o1, Object o2) {
-/* 164 */     return (o1 == null || o1.equals(o2));
-/*     */   }
-/*     */   
-/*     */   private static boolean bothNullOrEqual(Object o1, Object o2) {
-/* 168 */     return (o2 == null || firstNullOrEqual(o1, o2));
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\TinyUtils.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/VisitTrackingClassRemapper.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/VisitTrackingClassRemapper.java
deleted file mode 100644
index 8aff7ea18350b756c92542e7477a4f947333e822..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/VisitTrackingClassRemapper.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrClass.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrClass.java
deleted file mode 100644
index 1c7ed94b8eea65b4363aef096ce659fc2314c3ce..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrClass.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.api;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import java.util.function.Predicate;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public interface TrClass
-/*     */ {
-/*     */   TrEnvironment getEnvironment();
-/*     */   
-/*     */   String getName();
-/*     */   
-/*     */   int getAccess();
-/*     */   
-/*     */   Collection<TrField> getFields(String paramString1, String paramString2, boolean paramBoolean, Predicate<TrField> paramPredicate, Collection<TrField> paramCollection);
-/*     */   
-/*     */   Collection<TrMethod> getMethods(String paramString1, String paramString2, boolean paramBoolean, Predicate<TrMethod> paramPredicate, Collection<TrMethod> paramCollection);
-/*     */   
-/*     */   Collection<TrField> resolveFields(String paramString1, String paramString2, boolean paramBoolean, Predicate<TrField> paramPredicate, Collection<TrField> paramCollection);
-/*     */   
-/*     */   Collection<TrMethod> resolveMethods(String paramString1, String paramString2, boolean paramBoolean, Predicate<TrMethod> paramPredicate, Collection<TrMethod> paramCollection);
-/*     */   
-/*     */   boolean isAssignableFrom(TrClass paramTrClass);
-/*     */   
-/*     */   default boolean isInterface() {
-/* 101 */     return ((getAccess() & 0x200) != 0);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   default boolean isRecord() {
-/* 136 */     return ((getAccess() & 0x10000) != 0);
-/*     */   }
-/*     */   
-/*     */   boolean isInput();
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\api\TrClass.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrEnvironment.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrEnvironment.java
deleted file mode 100644
index cf4a306860d7257314ceca9168b64d724a4aab16..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrEnvironment.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.api;
-
-public interface TrEnvironment {
-  int getMrjVersion();
-  
-  TrRemapper getRemapper();
-  
-  TrClass getClass(String paramString);
-  
-  void propagate(TrMember paramTrMember, String paramString);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\api\TrEnvironment.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrField.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrField.java
deleted file mode 100644
index e8ec2c73efe12683194f0f2a86427da48a65a872..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrField.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.api;
-
-public interface TrField extends TrMember {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\api\TrField.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrMember.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrMember.java
deleted file mode 100644
index 35eb36375e2693e9b82f1161a9a95af132783523..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrMember.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.api;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrMethod.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrMethod.java
deleted file mode 100644
index 6ffd64eaa6b5bc62d6c45190616deb8519caa3b5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrMethod.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.api;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public interface TrMethod
-/*    */   extends TrMember
-/*    */ {
-/*    */   default boolean isBridge() {
-/* 28 */     return (getType().equals(TrMember.MemberType.METHOD) && (getAccess() & 0x40) != 0);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   default boolean isAbstract() {
-/* 42 */     return (getType().equals(TrMember.MemberType.METHOD) && (getAccess() & 0x400) != 0);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   default boolean isVirtual() {
-/* 49 */     return (getType().equals(TrMember.MemberType.METHOD) && (getAccess() & 0xA) == 0);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\api\TrMethod.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrRemapper.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrRemapper.java
deleted file mode 100644
index f44356ab27f6333a8438c2cc8fcf4b5c4854f548..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/api/TrRemapper.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.api;
-/*    */ 
-/*    */ import org.objectweb.asm.commons.Remapper;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public abstract class TrRemapper
-/*    */   extends Remapper
-/*    */ {
-/*    */   @Deprecated
-/*    */   public String mapAnnotationAttributeName(String descriptor, String name) {
-/* 47 */     return super.mapAnnotationAttributeName(descriptor, name);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\api\TrRemapper.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/MixinExtension.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/MixinExtension.java
deleted file mode 100644
index 9e63407f8f3e60c08212eefc2354db3fe613db29..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/MixinExtension.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/Logger.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/Logger.java
deleted file mode 100644
index 01bddbb62e95a1da02feafcb69be8e7aee53129f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/Logger.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/MapUtility.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/MapUtility.java
deleted file mode 100644
index c5534487dab35534ff8868089af1cc1653dfbaec..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/MapUtility.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common;
-/*    */ 
-/*    */ import java.util.Arrays;
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrRemapper;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class MapUtility
-/*    */ {
-/*    */   private final TrRemapper remapper;
-/*    */   private final Logger logger;
-/* 33 */   public static final List<String> IGNORED_NAME = Arrays.asList(new String[] { "<init>", "<clinit>" });
-/*    */   
-/*    */   public MapUtility(TrRemapper remapper, Logger logger) {
-/* 36 */     this.remapper = Objects.<TrRemapper>requireNonNull(remapper);
-/* 37 */     this.logger = Objects.<Logger>requireNonNull(logger);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String mapName(TrMember member) {
-/* 45 */     if (member.isField()) {
-/* 46 */       return this.remapper.mapFieldName(member.getOwner().getName(), member.getName(), member.getDesc());
-/*    */     }
-/* 48 */     return this.remapper.mapMethodName(member.getOwner().getName(), member.getName(), member.getDesc());
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String mapDesc(TrMember member) {
-/* 57 */     if (member.isField()) {
-/* 58 */       return this.remapper.mapDesc(member.getDesc());
-/*    */     }
-/* 60 */     return this.remapper.mapMethodDesc(member.getDesc());
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public TrRemapper asTrRemapper() {
-/* 69 */     return this.remapper;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\common\MapUtility.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/ResolveUtility.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/ResolveUtility.java
deleted file mode 100644
index 5c33e3edd197e76d3577a773c19b26d99da5ba36..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/ResolveUtility.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import java.util.Comparator;
-/*     */ import java.util.Objects;
-/*     */ import java.util.Optional;
-/*     */ import java.util.function.Supplier;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrClass;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrEnvironment;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrField;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMethod;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class ResolveUtility
-/*     */ {
-/*  39 */   public static int FLAG_UNIQUE = 1;
-/*     */ 
-/*     */ 
-/*     */   
-/*  43 */   public static int FLAG_FIRST = 2;
-/*     */ 
-/*     */ 
-/*     */   
-/*  47 */   public static int FLAG_RECURSIVE = 4;
-/*     */ 
-/*     */ 
-/*     */   
-/*  51 */   public static int FLAG_NON_SYN = 8;
-/*     */   
-/*     */   private final TrEnvironment environment;
-/*     */   private final Logger logger;
-/*     */   
-/*     */   public ResolveUtility(TrEnvironment environment, Logger logger) {
-/*  57 */     this.environment = Objects.<TrEnvironment>requireNonNull(environment);
-/*  58 */     this.logger = Objects.<Logger>requireNonNull(logger);
-/*     */   }
-/*     */   
-/*     */   public Optional<TrClass> resolveClass(String name) {
-/*  62 */     TrClass _class = this.environment.getClass(name);
-/*     */     
-/*  64 */     if (_class == null && !StringUtility.isInternalClassName(name)) {
-/*  65 */       this.logger.error(String.format("Cannot resolve class %s", new Object[] { name }));
-/*     */     }
-/*     */     
-/*  68 */     return Optional.ofNullable(_class);
-/*     */   } private <T extends TrMember> Optional<T> resolveMember0(TrClass owner, String name, String desc, int flag, Supplier<Collection<T>> get, Supplier<Collection<T>> resolve) {
-/*     */     Collection<T> collection;
-/*     */     Comparator<T> comparator;
-/*  72 */     if ((flag & (FLAG_UNIQUE | FLAG_FIRST)) == 0)
-/*  73 */       throw new RuntimeException("Unspecified resolution strategy, please use FLAG_UNIQUE or FLAG_FIRST."); 
-/*  74 */     if (owner == null) {
-/*  75 */       return Optional.empty();
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*  80 */     if ((flag & FLAG_RECURSIVE) != 0) {
-/*  81 */       collection = resolve.get();
-/*     */     } else {
-/*  83 */       collection = get.get();
-/*     */     } 
-/*     */     
-/*  86 */     if ((flag & FLAG_UNIQUE) != 0) {
-/*  87 */       if (collection.size() > 1) {
-/*  88 */         throw new RuntimeException(String.format("The member %s:%s is ambiguous in class %s for FLAG_UNIQUE. Please use FLAG_FIRST.", new Object[] { name, desc, owner.getName() }));
-/*     */       }
-/*  90 */       return collection.stream().findFirst();
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  96 */     if ((flag & FLAG_NON_SYN) != 0) {
-/*  97 */       comparator = ((x, y) -> (Boolean.compare(x.isSynthetic(), y.isSynthetic()) != 0) ? Boolean.compare(x.isSynthetic(), y.isSynthetic()) : Integer.compare(x.getIndex(), y.getIndex()));
-/*     */     } else {
-/*     */       
-/* 100 */       comparator = Comparator.comparingInt(TrMember::getIndex);
-/*     */     } 
-/*     */     
-/* 103 */     return collection.stream().min(comparator);
-/*     */   }
-/*     */   
-/*     */   public Optional<TrField> resolveField(TrClass owner, String name, String desc, int flag) {
-/* 107 */     return resolveMember0(owner, name, desc, flag, () -> owner.getFields(name, desc, false, null, null), () -> owner.resolveFields(name, desc, false, null, null));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Optional<TrField> resolveField(String owner, String name, String desc, int flag) {
-/* 113 */     return resolveClass(owner).flatMap(cls -> resolveField(cls, name, desc, flag));
-/*     */   }
-/*     */   
-/*     */   public Optional<TrMethod> resolveMethod(TrClass owner, String name, String desc, int flag) {
-/* 117 */     return resolveMember0(owner, name, desc, flag, () -> owner.getMethods(name, desc, false, null, null), () -> owner.resolveMethods(name, desc, false, null, null));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public Optional<TrMethod> resolveMethod(String owner, String name, String desc, int flag) {
-/* 123 */     return resolveClass(owner).flatMap(cls -> resolveMethod(cls, name, desc, flag));
-/*     */   }
-/*     */   
-/*     */   public Optional<TrMember> resolveMember(TrClass owner, String name, String desc, int flag) {
-/* 127 */     if (desc == null) throw new RuntimeException("desc cannot be null for resolveMember. Please use resolveMethod or resolveField.");
-/*     */     
-/* 129 */     TrMember.MemberType type = StringUtility.getTypeByDesc(desc);
-/*     */     
-/* 131 */     if (type.equals(TrMember.MemberType.FIELD))
-/* 132 */       return resolveField(owner, name, desc, flag).map(m -> m); 
-/* 133 */     if (type.equals(TrMember.MemberType.METHOD)) {
-/* 134 */       return resolveMethod(owner, name, desc, flag).map(m -> m);
-/*     */     }
-/* 136 */     throw new RuntimeException(String.format("Unknown member type %s", new Object[] { type.name() }));
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public Optional<TrMember> resolveMember(String owner, String name, String desc, int flag) {
-/* 141 */     return resolveClass(owner).flatMap(cls -> resolveMember(cls, name, desc, flag));
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\common\ResolveUtility.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/StringUtility.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/StringUtility.java
deleted file mode 100644
index 191fa054ee67c400f0c627c7cb4fff015ac13c78..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/StringUtility.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common;
-/*     */ 
-/*     */ import java.util.Locale;
-/*     */ import java.util.regex.Pattern;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class StringUtility
-/*     */ {
-/*     */   public static String addPrefix(String prefix, String text) {
-/*  28 */     return prefix + text;
-/*     */   }
-/*     */   
-/*     */   public static String removePrefix(String prefix, String text) {
-/*  32 */     if (text.startsWith(prefix)) {
-/*  33 */       return text.substring(prefix.length());
-/*     */     }
-/*  35 */     throw new RuntimeException(String.format("%s does not start with %s", new Object[] { text, prefix }));
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public static String addCamelPrefix(String prefix, String text) {
-/*  40 */     if (text.isEmpty()) {
-/*  41 */       return prefix;
-/*     */     }
-/*  43 */     return prefix + text.substring(0, 1).toUpperCase(Locale.ROOT) + text.substring(1);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public static String removeCamelPrefix(String prefix, String text) {
-/*  48 */     text = removePrefix(prefix, text);
-/*     */     
-/*  50 */     if (text.isEmpty() || text.toUpperCase(Locale.ROOT).equals(text)) {
-/*  51 */       return text;
-/*     */     }
-/*  53 */     if (Character.isLowerCase(text.charAt(0))) throw new RuntimeException(String.format("%s does not start with camel prefix %s", new Object[] { text, prefix })); 
-/*  54 */     return text.substring(0, 1).toLowerCase(Locale.ROOT) + text.substring(1);
-/*     */   }
-/*     */ 
-/*     */   
-/*  58 */   private static final Pattern CLASS_NAME_PATTERN = Pattern.compile("([A-Za-z0-9_$]+/)*[A-Za-z0-9_$]+");
-/*  59 */   private static final Pattern CLASS_DESC_PATTERN = Pattern.compile("L" + CLASS_NAME_PATTERN + ";");
-/*     */   
-/*     */   public static boolean isClassName(String text) {
-/*  62 */     return CLASS_NAME_PATTERN.matcher(text).matches();
-/*     */   }
-/*     */   
-/*     */   public static boolean isClassDesc(String text) {
-/*  66 */     return CLASS_DESC_PATTERN.matcher(text).matches();
-/*     */   }
-/*     */   
-/*  69 */   private static final Pattern FIELD_DESC_PATTERN = Pattern.compile("\\[*(" + CLASS_DESC_PATTERN + "|[BCDFIJSZ])");
-/*  70 */   private static final Pattern METHOD_DESC_PATTERN = Pattern.compile("\\((" + FIELD_DESC_PATTERN + ")*\\)(" + FIELD_DESC_PATTERN + "|V)");
-/*     */   
-/*     */   public static boolean isFieldDesc(String text) {
-/*  73 */     return FIELD_DESC_PATTERN.matcher(text).matches();
-/*     */   }
-/*     */   
-/*     */   public static boolean isMethodDesc(String text) {
-/*  77 */     return METHOD_DESC_PATTERN.matcher(text).matches();
-/*     */   }
-/*     */   
-/*     */   public static TrMember.MemberType getTypeByDesc(String text) {
-/*  81 */     if (isFieldDesc(text))
-/*  82 */       return TrMember.MemberType.FIELD; 
-/*  83 */     if (isMethodDesc(text)) {
-/*  84 */       return TrMember.MemberType.METHOD;
-/*     */     }
-/*  86 */     throw new RuntimeException(String.format("%s is neither field descriptor nor method descriptor.", new Object[] { text }));
-/*     */   }
-/*     */ 
-/*     */   
-/*  90 */   private static final Pattern INTERNAL_CLASS_PATTERN = Pattern.compile("java/.*");
-/*     */   
-/*     */   public static boolean isInternalClassName(String className) {
-/*  93 */     if (!isClassName(className)) throw new RuntimeException(String.format("%s is not a class name.", new Object[] { className }));
-/*     */     
-/*  95 */     if (INTERNAL_CLASS_PATTERN.matcher(className).matches()) {
-/*  96 */       return true;
-/*     */     }
-/*     */     
-/*     */     try {
-/* 100 */       Class.forName(className.replace('/', '.'));
-/* 101 */       return true;
-/* 102 */     } catch (Exception e) {
-/* 103 */       return false;
-/*     */     } 
-/*     */   }
-/*     */   
-/*     */   public static String classNameToDesc(String className) {
-/* 108 */     if (!isClassName(className)) throw new RuntimeException(String.format("%s is not a class name.", new Object[] { className })); 
-/* 109 */     return "L" + className + ";";
-/*     */   }
-/*     */   
-/*     */   public static String classDescToName(String classDesc) {
-/* 113 */     if (!isClassDesc(classDesc)) throw new RuntimeException(String.format("%s is not a class descriptor.", new Object[] { classDesc })); 
-/* 114 */     return classDesc.substring(1, classDesc.length() - 1);
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\common\StringUtility.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/CommonData.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/CommonData.java
deleted file mode 100644
index f2bdad8edffad6c9b26eacb63a9adb6ba619bc1c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/CommonData.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrEnvironment;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.Logger;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.MapUtility;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.ResolveUtility;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class CommonData
-/*    */ {
-/*    */   private final TrEnvironment environment;
-/*    */   public final Logger logger;
-/*    */   public final ResolveUtility resolver;
-/*    */   public final MapUtility mapper;
-/*    */   
-/*    */   public CommonData(TrEnvironment environment, Logger logger) {
-/* 37 */     this.environment = Objects.<TrEnvironment>requireNonNull(environment);
-/* 38 */     this.logger = Objects.<Logger>requireNonNull(logger);
-/*    */     
-/* 40 */     this.resolver = new ResolveUtility(environment, logger);
-/* 41 */     this.mapper = new MapUtility(environment.getRemapper(), logger);
-/*    */   }
-/*    */   
-/*    */   public void propagate(TrMember member, String newName) {
-/* 45 */     this.environment.propagate(member, newName);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\common\data\CommonData.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/MxClass.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/MxClass.java
deleted file mode 100644
index 03a80fc18182b968b14f68a3781ec48cb50f3206..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/MxClass.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class MxClass
-/*    */ {
-/*    */   private final String name;
-/*    */   
-/*    */   public MxClass(String name) {
-/* 30 */     this.name = Objects.<String>requireNonNull(name);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public MxMember getField(String name, String desc) {
-/* 38 */     return new MxMember(this.name, name, desc);
-/*    */   }
-/*    */   
-/*    */   public MxMember getMethod(String name, String desc) {
-/* 42 */     return new MxMember(this.name, name, desc);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\common\data\MxClass.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/MxMember.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/MxMember.java
deleted file mode 100644
index 1d8251c5c39e56fa93072538fbe00e2293b6a3dd..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/MxMember.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.ResolveUtility;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class MxMember
-/*    */ {
-/*    */   private final String owner;
-/*    */   private final String name;
-/*    */   private final String desc;
-/*    */   
-/*    */   MxMember(String owner, String name, String desc) {
-/* 34 */     this.owner = Objects.<String>requireNonNull(owner);
-/* 35 */     this.name = Objects.<String>requireNonNull(name);
-/* 36 */     this.desc = Objects.<String>requireNonNull(desc);
-/*    */   }
-/*    */   
-/*    */   public String getName() {
-/* 40 */     return this.name;
-/*    */   }
-/*    */   
-/*    */   public String getDesc() {
-/* 44 */     return this.desc;
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public TrMember asTrMember(ResolveUtility resolver) {
-/* 56 */     return (TrMember)resolver.resolveMember(this.owner, this.name, this.desc, ResolveUtility.FLAG_UNIQUE)
-/* 57 */       .orElseThrow(() -> new RuntimeException(String.format("Cannot convert %s %s %s to TrMember", new Object[] { this.owner, this.name, this.desc })));
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\common\data\MxMember.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/Pair.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/Pair.java
deleted file mode 100644
index e0862215d8ba81badcac1fa5cc32d0fac1caa85b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/common/data/Pair.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public final class Pair<L, R>
-/*    */ {
-/*    */   private final L first;
-/*    */   private final R second;
-/*    */   
-/*    */   private Pair(L first, R second) {
-/* 28 */     this.first = first;
-/* 29 */     this.second = second;
-/*    */   }
-/*    */   
-/*    */   public static <L, R> Pair<L, R> of(L first, R second) {
-/* 33 */     return new Pair<>(first, second);
-/*    */   }
-/*    */   
-/*    */   public L first() {
-/* 37 */     return this.first;
-/*    */   }
-/*    */   
-/*    */   public R second() {
-/* 41 */     return this.second;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public boolean equals(Object o) {
-/* 46 */     if (this == o) return true; 
-/* 47 */     if (o == null || getClass() != o.getClass()) return false;
-/*    */     
-/* 49 */     Pair<?, ?> pair = (Pair<?, ?>)o;
-/*    */     
-/* 51 */     if (!Objects.equals(this.first, pair.first)) return false; 
-/* 52 */     return Objects.equals(this.second, pair.second);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public int hashCode() {
-/* 57 */     int result = (this.first != null) ? this.first.hashCode() : 0;
-/* 58 */     result = 31 * result + ((this.second != null) ? this.second.hashCode() : 0);
-/* 59 */     return result;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\common\data\Pair.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinClassVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinClassVisitor.java
deleted file mode 100644
index 37caa1fed26c1085dc65c24ef5437908dc8b652b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinClassVisitor.java
+++ /dev/null
@@ -1,117 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard;
-/*     */ 
-/*     */ import java.util.ArrayList;
-/*     */ import java.util.Collection;
-/*     */ import java.util.Collections;
-/*     */ import java.util.List;
-/*     */ import java.util.Objects;
-/*     */ import java.util.concurrent.atomic.AtomicBoolean;
-/*     */ import java.util.function.Consumer;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.MapUtility;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxClass;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation.ImplementsAnnotationVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation.MixinAnnotationVisitor;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.data.SoftInterface;
-/*     */ import org.objectweb.asm.AnnotationVisitor;
-/*     */ import org.objectweb.asm.ClassVisitor;
-/*     */ import org.objectweb.asm.FieldVisitor;
-/*     */ import org.objectweb.asm.MethodVisitor;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class HardTargetMixinClassVisitor
-/*     */   extends ClassVisitor
-/*     */ {
-/*     */   private final Collection<Consumer<CommonData>> tasks;
-/*     */   private MxClass _class;
-/*  49 */   private final AtomicBoolean remap = new AtomicBoolean();
-/*  50 */   private final List<String> targets = new ArrayList<>();
-/*     */ 
-/*     */   
-/*  53 */   private final List<SoftInterface> interfaces = new ArrayList<>();
-/*     */   
-/*     */   public HardTargetMixinClassVisitor(Collection<Consumer<CommonData>> tasks, ClassVisitor delegate) {
-/*  56 */     super(589824, delegate);
-/*  57 */     this.tasks = Objects.<Collection<Consumer<CommonData>>>requireNonNull(tasks);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
-/*  65 */     this._class = new MxClass(name);
-/*  66 */     super.visit(version, access, name, signature, superName, interfaces);
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {
-/*     */     MixinAnnotationVisitor mixinAnnotationVisitor;
-/*     */     ImplementsAnnotationVisitor implementsAnnotationVisitor;
-/*  74 */     AnnotationVisitor av = super.visitAnnotation(descriptor, visible);
-/*     */     
-/*  76 */     if ("Lorg/spongepowered/asm/mixin/Mixin;".equals(descriptor)) {
-/*  77 */       mixinAnnotationVisitor = new MixinAnnotationVisitor(av, this.remap, this.targets);
-/*  78 */     } else if ("Lorg/spongepowered/asm/mixin/Implements;".equals(descriptor)) {
-/*  79 */       implementsAnnotationVisitor = new ImplementsAnnotationVisitor((AnnotationVisitor)mixinAnnotationVisitor, this.interfaces);
-/*     */     } 
-/*     */     
-/*  82 */     return (AnnotationVisitor)implementsAnnotationVisitor;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {
-/*  87 */     FieldVisitor fv = super.visitField(access, name, descriptor, signature, value);
-/*  88 */     MxMember field = this._class.getField(name, descriptor);
-/*     */     
-/*  90 */     if (this.targets.isEmpty()) {
-/*  91 */       return fv;
-/*     */     }
-/*  93 */     return new HardTargetMixinFieldVisitor(this.tasks, fv, field, this.remap.get(), Collections.unmodifiableList(this.targets));
-/*     */   }
-/*     */ 
-/*     */ 
-/*     */   
-/*     */   public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
-/*  99 */     MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);
-/* 100 */     MxMember method = this._class.getMethod(name, descriptor);
-/*     */     
-/* 102 */     if (!this.interfaces.isEmpty() && !MapUtility.IGNORED_NAME.contains(name)) {
-/* 103 */       ImplementsAnnotationVisitor.visitMethod(this.tasks, method, this.interfaces);
-/*     */     }
-/*     */     
-/* 106 */     if (this.targets.isEmpty()) {
-/* 107 */       return mv;
-/*     */     }
-/* 109 */     return new HardTargetMixinMethodVisitor(this.tasks, mv, method, this.remap.get(), Collections.unmodifiableList(this.targets));
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\hard\HardTargetMixinClassVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinFieldVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinFieldVisitor.java
deleted file mode 100644
index 599fcc180496e22bb31193da0b4814e2e4ca2139..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinFieldVisitor.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard;
-/*    */ 
-/*    */ import java.util.Collection;
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import java.util.function.Consumer;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation.ShadowAnnotationVisitor;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ import org.objectweb.asm.FieldVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ class HardTargetMixinFieldVisitor
-/*    */   extends FieldVisitor
-/*    */ {
-/*    */   private final Collection<Consumer<CommonData>> tasks;
-/*    */   private final MxMember field;
-/*    */   private final boolean remap;
-/*    */   private final List<String> targets;
-/*    */   
-/*    */   HardTargetMixinFieldVisitor(Collection<Consumer<CommonData>> tasks, FieldVisitor delegate, MxMember field, boolean remap, List<String> targets) {
-/* 44 */     super(589824, delegate);
-/* 45 */     this.tasks = Objects.<Collection<Consumer<CommonData>>>requireNonNull(tasks);
-/* 46 */     this.field = Objects.<MxMember>requireNonNull(field);
-/*    */     
-/* 48 */     this.remap = remap;
-/* 49 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*    */   }
-/*    */   
-/*    */   public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {
-/*    */     ShadowAnnotationVisitor shadowAnnotationVisitor;
-/* 54 */     AnnotationVisitor av = super.visitAnnotation(descriptor, visible);
-/*    */     
-/* 56 */     if ("Lorg/spongepowered/asm/mixin/Shadow;".equals(descriptor)) {
-/* 57 */       shadowAnnotationVisitor = new ShadowAnnotationVisitor(this.tasks, av, this.field, this.remap, this.targets);
-/*    */     }
-/*    */     
-/* 60 */     return (AnnotationVisitor)shadowAnnotationVisitor;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\hard\HardTargetMixinFieldVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinMethodVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinMethodVisitor.java
deleted file mode 100644
index 8acc5f6fb0b64b6811522fb9676d16ef98b3fbcc..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/HardTargetMixinMethodVisitor.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard;
-/*    */ 
-/*    */ import java.util.Collection;
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import java.util.function.Consumer;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation.AccessorAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation.InvokerAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation.OverwriteAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation.ShadowAnnotationVisitor;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ import org.objectweb.asm.MethodVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ class HardTargetMixinMethodVisitor
-/*    */   extends MethodVisitor
-/*    */ {
-/*    */   private final Collection<Consumer<CommonData>> data;
-/*    */   private final MxMember method;
-/*    */   private final boolean remap;
-/*    */   private final List<String> targets;
-/*    */   
-/*    */   HardTargetMixinMethodVisitor(Collection<Consumer<CommonData>> data, MethodVisitor delegate, MxMember method, boolean remap, List<String> targets) {
-/* 46 */     super(589824, delegate);
-/* 47 */     this.data = Objects.<Collection<Consumer<CommonData>>>requireNonNull(data);
-/* 48 */     this.method = Objects.<MxMember>requireNonNull(method);
-/*    */     
-/* 50 */     this.remap = remap;
-/* 51 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*    */   }
-/*    */   public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {
-/*    */     ShadowAnnotationVisitor shadowAnnotationVisitor;
-/*    */     InvokerAnnotationVisitor invokerAnnotationVisitor;
-/* 56 */     AnnotationVisitor av = super.visitAnnotation(descriptor, visible);
-/*    */     
-/* 58 */     if ("Lorg/spongepowered/asm/mixin/Shadow;".equals(descriptor))
-/* 59 */     { shadowAnnotationVisitor = new ShadowAnnotationVisitor(this.data, av, this.method, this.remap, this.targets); }
-/* 60 */     else { OverwriteAnnotationVisitor overwriteAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/Overwrite;".equals(descriptor))
-/* 61 */       { overwriteAnnotationVisitor = new OverwriteAnnotationVisitor(this.data, (AnnotationVisitor)shadowAnnotationVisitor, this.method, this.remap, this.targets); }
-/* 62 */       else { AccessorAnnotationVisitor accessorAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/gen/Accessor;".equals(descriptor)) {
-/* 63 */           accessorAnnotationVisitor = new AccessorAnnotationVisitor(this.data, (AnnotationVisitor)overwriteAnnotationVisitor, this.method, this.remap, this.targets);
-/* 64 */         } else if ("Lorg/spongepowered/asm/mixin/gen/Invoker;".equals(descriptor)) {
-/* 65 */           invokerAnnotationVisitor = new InvokerAnnotationVisitor(this.data, (AnnotationVisitor)accessorAnnotationVisitor, this.method, this.remap, this.targets);
-/*    */         }  }
-/*    */        }
-/* 68 */      return (AnnotationVisitor)invokerAnnotationVisitor;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\hard\HardTargetMixinMethodVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/AccessorAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/AccessorAnnotationVisitor.java
deleted file mode 100644
index 76071d3cbbe959a5d155ec16a5b153f682471a8b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/AccessorAnnotationVisitor.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import java.util.List;
-/*     */ import java.util.Objects;
-/*     */ import java.util.function.Consumer;
-/*     */ import java.util.regex.Matcher;
-/*     */ import java.util.regex.Pattern;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.CamelPrefixString;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.ConvertibleMappable;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.IConvertibleString;
-/*     */ import org.objectweb.asm.AnnotationVisitor;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class AccessorAnnotationVisitor
-/*     */   extends AnnotationVisitor
-/*     */ {
-/*     */   private final Collection<Consumer<CommonData>> tasks;
-/*     */   private final MxMember method;
-/*     */   private final List<String> targets;
-/*     */   private boolean remap;
-/*     */   private boolean isSoftTarget;
-/*     */   
-/*     */   public AccessorAnnotationVisitor(Collection<Consumer<CommonData>> tasks, AnnotationVisitor delegate, MxMember method, boolean remap, List<String> targets) {
-/*  53 */     super(589824, delegate);
-/*     */     
-/*  55 */     this.tasks = Objects.<Collection<Consumer<CommonData>>>requireNonNull(tasks);
-/*  56 */     this.method = Objects.<MxMember>requireNonNull(method);
-/*  57 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*     */     
-/*  59 */     this.remap = remap;
-/*  60 */     this.isSoftTarget = false;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visit(String name, Object value) {
-/*  65 */     if (name.equals("remap")) {
-/*  66 */       this.remap = ((Boolean)Objects.<Boolean>requireNonNull((Boolean)value)).booleanValue();
-/*  67 */     } else if (name.equals("value")) {
-/*  68 */       this.isSoftTarget = true;
-/*     */     } 
-/*     */     
-/*  71 */     super.visit(name, value);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitEnd() {
-/*  76 */     if (this.remap && !this.isSoftTarget) {
-/*  77 */       this.tasks.add(data -> (new AccessorMappable(data, this.method, this.targets)).result());
-/*     */     }
-/*     */     
-/*  80 */     super.visitEnd();
-/*     */   }
-/*     */   
-/*     */   private static class AccessorMappable
-/*     */     extends ConvertibleMappable {
-/*     */     private final String prefix;
-/*     */     private final String fieldDesc;
-/*  87 */     private static final Pattern GETTER_PATTERN = Pattern.compile("(?<=\\(\\)).*");
-/*  88 */     private static final Pattern SETTER_PATTERN = Pattern.compile("(?<=\\().*(?=\\)V)");
-/*     */     
-/*     */     AccessorMappable(CommonData data, MxMember self, Collection<String> targets) {
-/*  91 */       super(data, self, targets);
-/*     */       
-/*  93 */       if (self.getName().startsWith("get")) {
-/*  94 */         this.prefix = "get";
-/*  95 */       } else if (self.getName().startsWith("set")) {
-/*  96 */         this.prefix = "set";
-/*  97 */       } else if (self.getName().startsWith("is")) {
-/*  98 */         this.prefix = "is";
-/*     */       } else {
-/* 100 */         throw new RuntimeException(String.format("%s does not start with get, set or is.", new Object[] { self.getName() }));
-/*     */       } 
-/*     */       
-/* 103 */       Matcher getterMatcher = GETTER_PATTERN.matcher(self.getDesc());
-/* 104 */       Matcher setterMatcher = SETTER_PATTERN.matcher(self.getDesc());
-/*     */       
-/* 106 */       if (getterMatcher.find()) {
-/* 107 */         this.fieldDesc = getterMatcher.group();
-/* 108 */       } else if (setterMatcher.find()) {
-/* 109 */         this.fieldDesc = setterMatcher.group();
-/*     */       } else {
-/* 111 */         throw new RuntimeException(String.format("%s is not getter or setter descriptor", new Object[] { self.getDesc() }));
-/*     */       } 
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     protected IConvertibleString getName() {
-/* 117 */       return (IConvertibleString)new CamelPrefixString(this.prefix, this.self.getName());
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     protected String getDesc() {
-/* 122 */       return this.fieldDesc;
-/*     */     }
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\hard\annotation\AccessorAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/ImplementsAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/ImplementsAnnotationVisitor.java
deleted file mode 100644
index 7897658354e5f7d83d0e824b0e17e93f326847ab..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/ImplementsAnnotationVisitor.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/InvokerAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/InvokerAnnotationVisitor.java
deleted file mode 100644
index 1204fa59ed01e001f8d46afd0449bb7676981f34..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/InvokerAnnotationVisitor.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import java.util.List;
-/*     */ import java.util.Objects;
-/*     */ import java.util.function.Consumer;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.CamelPrefixString;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.ConvertibleMappable;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.IConvertibleString;
-/*     */ import org.objectweb.asm.AnnotationVisitor;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class InvokerAnnotationVisitor
-/*     */   extends AnnotationVisitor
-/*     */ {
-/*     */   private final Collection<Consumer<CommonData>> tasks;
-/*     */   private final MxMember method;
-/*     */   private final List<String> targets;
-/*     */   private boolean remap;
-/*     */   private boolean isSoftTarget;
-/*     */   
-/*     */   public InvokerAnnotationVisitor(Collection<Consumer<CommonData>> tasks, AnnotationVisitor delegate, MxMember method, boolean remap, List<String> targets) {
-/*  51 */     super(589824, delegate);
-/*     */     
-/*  53 */     this.tasks = Objects.<Collection<Consumer<CommonData>>>requireNonNull(tasks);
-/*  54 */     this.method = Objects.<MxMember>requireNonNull(method);
-/*  55 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*     */     
-/*  57 */     this.remap = remap;
-/*  58 */     this.isSoftTarget = false;
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visit(String name, Object value) {
-/*  63 */     if (name.equals("remap")) {
-/*  64 */       this.remap = ((Boolean)Objects.<Boolean>requireNonNull((Boolean)value)).booleanValue();
-/*  65 */     } else if (name.equals("value")) {
-/*  66 */       this.isSoftTarget = true;
-/*     */     } 
-/*     */     
-/*  69 */     super.visit(name, value);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitEnd() {
-/*  74 */     if (this.remap && !this.isSoftTarget) {
-/*  75 */       this.tasks.add(data -> (new InvokerMappable(data, this.method, this.targets)).result());
-/*     */     }
-/*     */     
-/*  78 */     super.visitEnd();
-/*     */   }
-/*     */   
-/*     */   private static class InvokerMappable extends ConvertibleMappable {
-/*     */     private final String prefix;
-/*     */     
-/*     */     InvokerMappable(CommonData data, MxMember self, Collection<String> targets) {
-/*  85 */       super(data, self, targets);
-/*     */       
-/*  87 */       if (self.getName().startsWith("call")) {
-/*  88 */         this.prefix = "call";
-/*  89 */       } else if (self.getName().startsWith("invoke")) {
-/*  90 */         this.prefix = "invoke";
-/*  91 */       } else if (self.getName().startsWith("new")) {
-/*  92 */         this.prefix = "new";
-/*  93 */       } else if (self.getName().startsWith("create")) {
-/*  94 */         this.prefix = "create";
-/*     */       } else {
-/*  96 */         throw new RuntimeException(String.format("%s does not start with call or invoke.", new Object[] { self.getName() }));
-/*     */       } 
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     protected IConvertibleString getName() {
-/* 102 */       return (IConvertibleString)new CamelPrefixString(this.prefix, this.self.getName());
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     protected String getDesc() {
-/* 107 */       return this.self.getDesc();
-/*     */     }
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\hard\annotation\InvokerAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/MixinAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/MixinAnnotationVisitor.java
deleted file mode 100644
index 7897658354e5f7d83d0e824b0e17e93f326847ab..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/MixinAnnotationVisitor.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/OverwriteAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/OverwriteAnnotationVisitor.java
deleted file mode 100644
index 18e7cbf4a7000192fe99b133ac9249decad7d311..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/OverwriteAnnotationVisitor.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation;
-/*    */ 
-/*    */ import java.util.Collection;
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import java.util.function.Consumer;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.ConvertibleMappable;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.IConvertibleString;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.IdentityString;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class OverwriteAnnotationVisitor
-/*    */   extends AnnotationVisitor
-/*    */ {
-/*    */   private final Collection<Consumer<CommonData>> tasks;
-/*    */   private final MxMember method;
-/*    */   private final List<String> targets;
-/*    */   private boolean remap;
-/*    */   
-/*    */   public OverwriteAnnotationVisitor(Collection<Consumer<CommonData>> tasks, AnnotationVisitor delegate, MxMember method, boolean remap, List<String> targets) {
-/* 48 */     super(589824, delegate);
-/*    */     
-/* 50 */     this.tasks = Objects.<Collection<Consumer<CommonData>>>requireNonNull(tasks);
-/* 51 */     this.method = Objects.<MxMember>requireNonNull(method);
-/* 52 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*    */     
-/* 54 */     this.remap = remap;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visit(String name, Object value) {
-/* 59 */     if (name.equals("remap")) {
-/* 60 */       this.remap = ((Boolean)Objects.<Boolean>requireNonNull((Boolean)value)).booleanValue();
-/*    */     }
-/*    */     
-/* 63 */     super.visit(name, value);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitEnd() {
-/* 68 */     if (this.remap) {
-/* 69 */       this.tasks.add(data -> (new OverwriteMappable(data, this.method, this.targets)).result());
-/*    */     }
-/*    */     
-/* 72 */     super.visitEnd();
-/*    */   }
-/*    */   
-/*    */   private static class OverwriteMappable extends ConvertibleMappable {
-/*    */     OverwriteMappable(CommonData data, MxMember self, Collection<String> targets) {
-/* 77 */       super(data, self, targets);
-/*    */     }
-/*    */ 
-/*    */     
-/*    */     protected IConvertibleString getName() {
-/* 82 */       return (IConvertibleString)new IdentityString(this.self.getName());
-/*    */     }
-/*    */ 
-/*    */     
-/*    */     protected String getDesc() {
-/* 87 */       return this.self.getDesc();
-/*    */     }
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\hard\annotation\OverwriteAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/ShadowAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/ShadowAnnotationVisitor.java
deleted file mode 100644
index 943b4a7919dd9da323d53b3a2c92710240efcad0..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/annotation/ShadowAnnotationVisitor.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.annotation;
-/*     */ 
-/*     */ import java.util.Collection;
-/*     */ import java.util.List;
-/*     */ import java.util.Objects;
-/*     */ import java.util.function.Consumer;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.ConvertibleMappable;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.IConvertibleString;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.IdentityString;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util.PrefixString;
-/*     */ import org.objectweb.asm.AnnotationVisitor;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class ShadowAnnotationVisitor
-/*     */   extends AnnotationVisitor
-/*     */ {
-/*     */   private final Collection<Consumer<CommonData>> tasks;
-/*     */   private final MxMember member;
-/*     */   private final List<String> targets;
-/*     */   private boolean remap;
-/*     */   private String prefix;
-/*     */   
-/*     */   public ShadowAnnotationVisitor(Collection<Consumer<CommonData>> tasks, AnnotationVisitor delegate, MxMember member, boolean remap, List<String> targets) {
-/*  51 */     super(589824, delegate);
-/*  52 */     this.tasks = Objects.<Collection<Consumer<CommonData>>>requireNonNull(tasks);
-/*  53 */     this.member = Objects.<MxMember>requireNonNull(member);
-/*     */     
-/*  55 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*  56 */     this.remap = remap;
-/*  57 */     this.prefix = "shadow$";
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visit(String name, Object value) {
-/*  62 */     if (name.equals("remap")) {
-/*  63 */       this.remap = ((Boolean)Objects.<Boolean>requireNonNull((Boolean)value)).booleanValue();
-/*  64 */     } else if (name.equals("prefix")) {
-/*  65 */       this.prefix = Objects.<String>requireNonNull((String)value);
-/*     */     } 
-/*     */     
-/*  68 */     super.visit(name, value);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitEnd() {
-/*  73 */     if (this.remap) {
-/*  74 */       this.tasks.add(data -> (new ShadowPrefixMappable(data, this.member, this.targets, this.prefix)).result());
-/*     */     }
-/*     */     
-/*  77 */     super.visitEnd();
-/*     */   }
-/*     */   
-/*     */   private static class ShadowPrefixMappable extends ConvertibleMappable {
-/*     */     private final String prefix;
-/*     */     
-/*     */     ShadowPrefixMappable(CommonData data, MxMember self, Collection<String> targets, String prefix) {
-/*  84 */       super(data, self, targets);
-/*  85 */       Objects.requireNonNull(prefix);
-/*     */       
-/*  87 */       this.prefix = self.getName().startsWith(prefix) ? prefix : "";
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     protected IConvertibleString getName() {
-/*  92 */       if (this.prefix.isEmpty()) {
-/*  93 */         return (IConvertibleString)new IdentityString(this.self.getName());
-/*     */       }
-/*  95 */       return (IConvertibleString)new PrefixString(this.prefix, this.self.getName());
-/*     */     }
-/*     */ 
-/*     */ 
-/*     */     
-/*     */     protected String getDesc() {
-/* 101 */       return this.self.getDesc();
-/*     */     }
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\hard\annotation\ShadowAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/data/SoftInterface.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/data/SoftInterface.java
deleted file mode 100644
index efbb61e1093838367bb01913a99bea9088530e89..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/data/SoftInterface.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.data;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/CamelPrefixString.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/CamelPrefixString.java
deleted file mode 100644
index 7cb140acf76a11ea8249c2a117ff0b87344b4822..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/CamelPrefixString.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.StringUtility;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class CamelPrefixString
-/*    */   implements IConvertibleString
-/*    */ {
-/*    */   private final String prefix;
-/*    */   private final String text;
-/*    */   
-/*    */   public CamelPrefixString(String prefix, String text) {
-/* 30 */     this.prefix = Objects.<String>requireNonNull(prefix);
-/* 31 */     this.text = StringUtility.removeCamelPrefix(prefix, text);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String getConverted() {
-/* 41 */     return this.text;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String getReverted(String newText) {
-/* 46 */     return StringUtility.addCamelPrefix(this.prefix, newText);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\har\\util\CamelPrefixString.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/ConvertibleMappable.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/ConvertibleMappable.java
deleted file mode 100644
index a12309dd5c359ed58be790f881bf816595c6cdea..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/ConvertibleMappable.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util;
-/*    */ 
-/*    */ import java.util.Collection;
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import java.util.Optional;
-/*    */ import java.util.stream.Collector;
-/*    */ import java.util.stream.Collectors;
-/*    */ import java.util.stream.Stream;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrClass;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.ResolveUtility;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.Pair;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public abstract class ConvertibleMappable
-/*    */   extends HardTargetMappable
-/*    */ {
-/*    */   private final Collection<TrClass> targets;
-/*    */   
-/*    */   public ConvertibleMappable(CommonData data, MxMember self, Collection<String> targets) {
-/* 39 */     super(data, self);
-/*    */ 
-/*    */     
-/* 42 */     Objects.requireNonNull(data.resolver);
-/*    */ 
-/*    */     
-/* 45 */     this.targets = (Collection<TrClass>)((Collection)Objects.<Collection>requireNonNull(targets)).stream().map(data.resolver::resolveClass).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   protected Stream<String> mapMultiTarget(IConvertibleString name, String desc) {
-/* 52 */     return this.targets.stream()
-/* 53 */       .map(target -> Pair.of(name, this.data.resolver.resolveMember(target, name.getConverted(), desc, ResolveUtility.FLAG_UNIQUE | ResolveUtility.FLAG_RECURSIVE)))
-/* 54 */       .filter(x -> ((Optional)x.second()).isPresent())
-/* 55 */       .map(x -> Pair.of(x.first(), this.data.mapper.mapName(((Optional<TrMember>)x.second()).get())))
-/* 56 */       .map(x -> ((IConvertibleString)x.first()).getReverted((String)x.second()));
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   protected Optional<String> getMappedName() {
-/* 62 */     List<String> collection = mapMultiTarget(getName(), getDesc()).collect((Collector)Collectors.toList());
-/*    */     
-/* 64 */     if (collection.size() > 1) {
-/* 65 */       this.data.logger.error(String.format("Conflict mapping detected, %s -> %s.", new Object[] { this.self.getName(), collection }));
-/* 66 */     } else if (collection.isEmpty()) {
-/* 67 */       this.data.logger.warn(String.format("Cannot remap %s because it does not exists in any of the targets %s or their parents.", new Object[] { this.self.getName(), this.targets }));
-/*    */     } 
-/*    */     
-/* 70 */     return collection.stream().findFirst();
-/*    */   }
-/*    */   
-/*    */   protected abstract IConvertibleString getName();
-/*    */   
-/*    */   protected abstract String getDesc();
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\har\\util\ConvertibleMappable.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/HardTargetMappable.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/HardTargetMappable.java
deleted file mode 100644
index e6539f76f1395f064d434cbfe4ab560bfbf26b00..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/HardTargetMappable.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ import java.util.Optional;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public abstract class HardTargetMappable
-/*    */ {
-/*    */   protected CommonData data;
-/*    */   protected MxMember self;
-/*    */   
-/*    */   public HardTargetMappable(CommonData data, MxMember self) {
-/* 33 */     this.data = Objects.<CommonData>requireNonNull(data);
-/* 34 */     this.self = Objects.<MxMember>requireNonNull(self);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   protected abstract Optional<String> getMappedName();
-/*    */   
-/*    */   public Void result() {
-/* 41 */     getMappedName().ifPresent(x -> this.data.propagate(this.self.asTrMember(this.data.resolver), x));
-/* 42 */     return null;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\har\\util\HardTargetMappable.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/IConvertibleString.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/IConvertibleString.java
deleted file mode 100644
index dd1afa97f5a97a02e064652f4c198a65c40b1eb1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/IConvertibleString.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util;
-
-public interface IConvertibleString {
-  String getConverted();
-  
-  String getReverted(String paramString);
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\har\\util\IConvertibleString.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/IdentityString.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/IdentityString.java
deleted file mode 100644
index 9814b01ac94f577ab662c13c7420c7fa0580168e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/IdentityString.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class IdentityString
-/*    */   implements IConvertibleString
-/*    */ {
-/*    */   private final String text;
-/*    */   
-/*    */   public IdentityString(String text) {
-/* 27 */     this.text = Objects.<String>requireNonNull(text);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String getConverted() {
-/* 37 */     return this.text;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String getReverted(String newText) {
-/* 42 */     return newText;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\har\\util\IdentityString.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/PrefixString.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/PrefixString.java
deleted file mode 100644
index d9bf7a4375be893377b2c06dbbcb84d0267e9fd8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/hard/util/PrefixString.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.hard.util;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.StringUtility;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class PrefixString
-/*    */   implements IConvertibleString
-/*    */ {
-/*    */   private final String prefix;
-/*    */   private final String text;
-/*    */   
-/*    */   public PrefixString(String prefix, String text) {
-/* 30 */     this.prefix = Objects.<String>requireNonNull(prefix);
-/* 31 */     this.text = StringUtility.removePrefix(prefix, text);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public String getConverted() {
-/* 41 */     return this.text;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String getReverted(String newText) {
-/* 46 */     return StringUtility.addPrefix(this.prefix, newText);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\har\\util\PrefixString.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/SoftTargetMixinClassVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/SoftTargetMixinClassVisitor.java
deleted file mode 100644
index 90ab15b5c629dc2a93278a7ea8d329f9c0d79980..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/SoftTargetMixinClassVisitor.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft;
-/*    */ 
-/*    */ import java.util.ArrayList;
-/*    */ import java.util.Collections;
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import java.util.concurrent.atomic.AtomicBoolean;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxClass;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.MixinAnnotationVisitor;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ import org.objectweb.asm.ClassVisitor;
-/*    */ import org.objectweb.asm.MethodVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class SoftTargetMixinClassVisitor
-/*    */   extends ClassVisitor
-/*    */ {
-/*    */   private final CommonData data;
-/*    */   private MxClass _class;
-/* 43 */   private final AtomicBoolean remap = new AtomicBoolean();
-/* 44 */   private final List<String> targets = new ArrayList<>();
-/*    */   
-/*    */   public SoftTargetMixinClassVisitor(CommonData data, ClassVisitor delegate) {
-/* 47 */     super(589824, delegate);
-/* 48 */     this.data = Objects.<CommonData>requireNonNull(data);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
-/* 56 */     this._class = new MxClass(name);
-/* 57 */     super.visit(version, access, name, signature, superName, interfaces);
-/*    */   }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */   
-/*    */   public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {
-/*    */     MixinAnnotationVisitor mixinAnnotationVisitor;
-/* 65 */     AnnotationVisitor av = super.visitAnnotation(descriptor, visible);
-/*    */     
-/* 67 */     if ("Lorg/spongepowered/asm/mixin/Mixin;".equals(descriptor)) {
-/* 68 */       mixinAnnotationVisitor = new MixinAnnotationVisitor(this.data, av, this.remap, this.targets);
-/*    */     }
-/*    */     
-/* 71 */     return (AnnotationVisitor)mixinAnnotationVisitor;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public MethodVisitor visitMethod(int access, String name, String descriptor, String signature, String[] exceptions) {
-/* 76 */     MethodVisitor mv = super.visitMethod(access, name, descriptor, signature, exceptions);
-/* 77 */     MxMember method = this._class.getMethod(name, descriptor);
-/*    */     
-/* 79 */     if (this.targets.isEmpty()) {
-/* 80 */       return mv;
-/*    */     }
-/* 82 */     return new SoftTargetMixinMethodVisitor(this.data, mv, method, this.remap.get(), Collections.unmodifiableList(this.targets));
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\SoftTargetMixinClassVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/SoftTargetMixinMethodVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/SoftTargetMixinMethodVisitor.java
deleted file mode 100644
index efd73b54308ab04ba9f4d88f3b3a037dfa63bc62..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/SoftTargetMixinMethodVisitor.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.AccessorAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.InvokerAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.InjectAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.ModifyArgAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.ModifyArgsAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.ModifyConstantAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.ModifyExpressionValueAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.ModifyReceiverAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.ModifyReturnValueAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.ModifyVariableAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.RedirectAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.WrapMethodAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.WrapOperationAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.WrapWithConditionAnnotationVisitor;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection.WrapWithConditionV2AnnotationVisitor;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ import org.objectweb.asm.MethodVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ class SoftTargetMixinMethodVisitor
-/*    */   extends MethodVisitor
-/*    */ {
-/*    */   private final CommonData data;
-/*    */   private final MxMember method;
-/*    */   private final boolean remap;
-/*    */   private final List<String> targets;
-/*    */   
-/*    */   SoftTargetMixinMethodVisitor(CommonData data, MethodVisitor delegate, MxMember method, boolean remap, List<String> targets) {
-/* 55 */     super(589824, delegate);
-/* 56 */     this.data = Objects.<CommonData>requireNonNull(data);
-/* 57 */     this.method = Objects.<MxMember>requireNonNull(method);
-/*    */     
-/* 59 */     this.remap = remap;
-/* 60 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*    */   }
-/*    */   public AnnotationVisitor visitAnnotation(String descriptor, boolean visible) {
-/*    */     AccessorAnnotationVisitor accessorAnnotationVisitor;
-/*    */     WrapWithConditionV2AnnotationVisitor wrapWithConditionV2AnnotationVisitor;
-/* 65 */     AnnotationVisitor av = super.visitAnnotation(descriptor, visible);
-/*    */     
-/* 67 */     if ("Lorg/spongepowered/asm/mixin/gen/Accessor;".equals(descriptor))
-/* 68 */     { accessorAnnotationVisitor = new AccessorAnnotationVisitor(this.data, av, this.method, this.remap, this.targets); }
-/* 69 */     else { InvokerAnnotationVisitor invokerAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/gen/Invoker;".equals(descriptor))
-/* 70 */       { invokerAnnotationVisitor = new InvokerAnnotationVisitor(this.data, (AnnotationVisitor)accessorAnnotationVisitor, this.method, this.remap, this.targets); }
-/* 71 */       else { InjectAnnotationVisitor injectAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/injection/Inject;".equals(descriptor))
-/* 72 */         { injectAnnotationVisitor = new InjectAnnotationVisitor(this.data, (AnnotationVisitor)invokerAnnotationVisitor, this.remap, this.targets); }
-/* 73 */         else { ModifyArgAnnotationVisitor modifyArgAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/injection/ModifyArg;".equals(descriptor))
-/* 74 */           { modifyArgAnnotationVisitor = new ModifyArgAnnotationVisitor(this.data, (AnnotationVisitor)injectAnnotationVisitor, this.remap, this.targets); }
-/* 75 */           else { ModifyArgsAnnotationVisitor modifyArgsAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/injection/ModifyArgs;".equals(descriptor))
-/* 76 */             { modifyArgsAnnotationVisitor = new ModifyArgsAnnotationVisitor(this.data, (AnnotationVisitor)modifyArgAnnotationVisitor, this.remap, this.targets); }
-/* 77 */             else { ModifyConstantAnnotationVisitor modifyConstantAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/injection/ModifyConstant;".equals(descriptor))
-/* 78 */               { modifyConstantAnnotationVisitor = new ModifyConstantAnnotationVisitor(this.data, (AnnotationVisitor)modifyArgsAnnotationVisitor, this.remap, this.targets); }
-/* 79 */               else { ModifyVariableAnnotationVisitor modifyVariableAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/injection/ModifyVariable;".equals(descriptor))
-/* 80 */                 { modifyVariableAnnotationVisitor = new ModifyVariableAnnotationVisitor(this.data, (AnnotationVisitor)modifyConstantAnnotationVisitor, this.remap, this.targets); }
-/* 81 */                 else { RedirectAnnotationVisitor redirectAnnotationVisitor; if ("Lorg/spongepowered/asm/mixin/injection/Redirect;".equals(descriptor))
-/* 82 */                   { redirectAnnotationVisitor = new RedirectAnnotationVisitor(this.data, (AnnotationVisitor)modifyVariableAnnotationVisitor, this.remap, this.targets); }
-/* 83 */                   else { ModifyExpressionValueAnnotationVisitor modifyExpressionValueAnnotationVisitor; if ("Lcom/llamalad7/mixinextras/injector/ModifyExpressionValue;".equals(descriptor))
-/* 84 */                     { modifyExpressionValueAnnotationVisitor = new ModifyExpressionValueAnnotationVisitor(this.data, (AnnotationVisitor)redirectAnnotationVisitor, this.remap, this.targets); }
-/* 85 */                     else { ModifyReceiverAnnotationVisitor modifyReceiverAnnotationVisitor; if ("Lcom/llamalad7/mixinextras/injector/ModifyReceiver;".equals(descriptor))
-/* 86 */                       { modifyReceiverAnnotationVisitor = new ModifyReceiverAnnotationVisitor(this.data, (AnnotationVisitor)modifyExpressionValueAnnotationVisitor, this.remap, this.targets); }
-/* 87 */                       else { ModifyReturnValueAnnotationVisitor modifyReturnValueAnnotationVisitor; if ("Lcom/llamalad7/mixinextras/injector/ModifyReturnValue;".equals(descriptor))
-/* 88 */                         { modifyReturnValueAnnotationVisitor = new ModifyReturnValueAnnotationVisitor(this.data, (AnnotationVisitor)modifyReceiverAnnotationVisitor, this.remap, this.targets); }
-/* 89 */                         else { WrapMethodAnnotationVisitor wrapMethodAnnotationVisitor; if ("Lcom/llamalad7/mixinextras/injector/wrapmethod/WrapMethod;".equals(descriptor))
-/* 90 */                           { wrapMethodAnnotationVisitor = new WrapMethodAnnotationVisitor(this.data, (AnnotationVisitor)modifyReturnValueAnnotationVisitor, this.remap, this.targets); }
-/* 91 */                           else { WrapOperationAnnotationVisitor wrapOperationAnnotationVisitor; if ("Lcom/llamalad7/mixinextras/injector/wrapoperation/WrapOperation;".equals(descriptor))
-/* 92 */                             { wrapOperationAnnotationVisitor = new WrapOperationAnnotationVisitor(this.data, (AnnotationVisitor)wrapMethodAnnotationVisitor, this.remap, this.targets); }
-/* 93 */                             else { WrapWithConditionAnnotationVisitor wrapWithConditionAnnotationVisitor; if ("Lcom/llamalad7/mixinextras/injector/WrapWithCondition;".equals(descriptor))
-/* 94 */                               { wrapWithConditionAnnotationVisitor = new WrapWithConditionAnnotationVisitor(this.data, (AnnotationVisitor)wrapOperationAnnotationVisitor, this.remap, this.targets); }
-/* 95 */                               else if ("Lcom/llamalad7/mixinextras/injector/v2/WrapWithCondition;".equals(descriptor))
-/* 96 */                               { wrapWithConditionV2AnnotationVisitor = new WrapWithConditionV2AnnotationVisitor(this.data, (AnnotationVisitor)wrapWithConditionAnnotationVisitor, this.remap, this.targets); }  }  }  }  }  }  }  }  }  }  }  }
-/*    */          }
-/*    */        }
-/* 99 */      return (AnnotationVisitor)wrapWithConditionV2AnnotationVisitor;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\SoftTargetMixinMethodVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/AccessorAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/AccessorAnnotationVisitor.java
deleted file mode 100644
index 9ecbe341bea041bb210f9a301e3fdfe2d0baef21..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/AccessorAnnotationVisitor.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation;
-/*     */ 
-/*     */ import java.util.List;
-/*     */ import java.util.Objects;
-/*     */ import java.util.regex.Matcher;
-/*     */ import java.util.regex.Pattern;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.util.NamedMappable;
-/*     */ import org.objectweb.asm.AnnotationVisitor;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public class AccessorAnnotationVisitor
-/*     */   extends FirstPassAnnotationVisitor
-/*     */ {
-/*     */   private final CommonData data;
-/*     */   private final AnnotationVisitor delegate;
-/*     */   private final MxMember method;
-/*     */   private final List<String> targets;
-/*     */   
-/*     */   public AccessorAnnotationVisitor(CommonData data, AnnotationVisitor delegate, MxMember method, boolean remap, List<String> targets) {
-/*  47 */     super("Lorg/spongepowered/asm/mixin/gen/Accessor;", remap);
-/*     */     
-/*  49 */     this.data = Objects.<CommonData>requireNonNull(data);
-/*  50 */     this.delegate = Objects.<AnnotationVisitor>requireNonNull(delegate);
-/*  51 */     this.method = Objects.<MxMember>requireNonNull(method);
-/*     */     
-/*  53 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public void visitEnd() {
-/*  58 */     if (this.remap) {
-/*  59 */       accept(new AccessorSecondPassAnnotationVisitor(this.data, this.delegate, this.method, this.targets));
-/*     */     } else {
-/*  61 */       accept(this.delegate);
-/*     */     } 
-/*     */     
-/*  64 */     super.visitEnd();
-/*     */   }
-/*     */   
-/*     */   private static class AccessorSecondPassAnnotationVisitor
-/*     */     extends AnnotationVisitor {
-/*     */     private final CommonData data;
-/*     */     private final List<String> targets;
-/*     */     private final String fieldDesc;
-/*  72 */     private static final Pattern GETTER_PATTERN = Pattern.compile("(?<=\\(\\)).*");
-/*  73 */     private static final Pattern SETTER_PATTERN = Pattern.compile("(?<=\\().*(?=\\)V)");
-/*     */     
-/*     */     AccessorSecondPassAnnotationVisitor(CommonData data, AnnotationVisitor delegate, MxMember method, List<String> targets) {
-/*  76 */       super(589824, delegate);
-/*     */       
-/*  78 */       this.data = Objects.<CommonData>requireNonNull(data);
-/*  79 */       this.targets = Objects.<List<String>>requireNonNull(targets);
-/*     */       
-/*  81 */       Matcher getterMatcher = GETTER_PATTERN.matcher(method.getDesc());
-/*  82 */       Matcher setterMatcher = SETTER_PATTERN.matcher(method.getDesc());
-/*     */       
-/*  84 */       if (getterMatcher.find()) {
-/*  85 */         this.fieldDesc = getterMatcher.group();
-/*  86 */       } else if (setterMatcher.find()) {
-/*  87 */         this.fieldDesc = setterMatcher.group();
-/*     */       } else {
-/*  89 */         throw new RuntimeException(method.getDesc() + " is not getter or setter");
-/*     */       } 
-/*     */     }
-/*     */ 
-/*     */     
-/*     */     public void visit(String name, Object value) {
-/*  95 */       if (name.equals("value")) {
-/*  96 */         String fieldName = Objects.<String>requireNonNull((String)value);
-/*     */         
-/*  98 */         value = (new NamedMappable(this.data, fieldName, this.fieldDesc, this.targets)).result();
-/*     */       } 
-/*     */       
-/* 101 */       super.visit(name, value);
-/*     */     }
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\AccessorAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/FirstPassAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/FirstPassAnnotationVisitor.java
deleted file mode 100644
index 4555069fb097c9c4d128af81f7dacf1734cd5e2a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/FirstPassAnnotationVisitor.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ import org.objectweb.asm.tree.AnnotationNode;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class FirstPassAnnotationVisitor
-/*    */   extends AnnotationNode
-/*    */ {
-/*    */   protected boolean remap;
-/*    */   
-/*    */   public FirstPassAnnotationVisitor(String descriptor, boolean remapDefault) {
-/* 35 */     super(589824, descriptor);
-/* 36 */     this.remap = remapDefault;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visit(String name, Object value) {
-/* 41 */     if (name.equals("remap")) {
-/* 42 */       this.remap = ((Boolean)Objects.<Boolean>requireNonNull((Boolean)value)).booleanValue();
-/*    */     }
-/*    */     
-/* 45 */     super.visit(name, value);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\FirstPassAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/InvokerAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/InvokerAnnotationVisitor.java
deleted file mode 100644
index 73889ebee8235506ba6c3af5d5385fc872a5402a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/InvokerAnnotationVisitor.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.MxMember;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.util.NamedMappable;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class InvokerAnnotationVisitor
-/*    */   extends FirstPassAnnotationVisitor
-/*    */ {
-/*    */   private final CommonData data;
-/*    */   private final AnnotationVisitor delegate;
-/*    */   private final MxMember method;
-/*    */   private final List<String> targets;
-/*    */   
-/*    */   public InvokerAnnotationVisitor(CommonData data, AnnotationVisitor delegate, MxMember method, boolean remap, List<String> targets) {
-/* 45 */     super("Lorg/spongepowered/asm/mixin/gen/Invoker;", remap);
-/*    */     
-/* 47 */     this.data = Objects.<CommonData>requireNonNull(data);
-/* 48 */     this.delegate = Objects.<AnnotationVisitor>requireNonNull(delegate);
-/* 49 */     this.method = Objects.<MxMember>requireNonNull(method);
-/*    */     
-/* 51 */     this.targets = Objects.<List<String>>requireNonNull(targets);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void visitEnd() {
-/* 56 */     if (this.remap) {
-/* 57 */       accept(new InvokerSecondPassAnnotationVisitor(this.data, this.delegate, this.method, this.targets));
-/*    */     } else {
-/* 59 */       accept(this.delegate);
-/*    */     } 
-/*    */     
-/* 62 */     super.visitEnd();
-/*    */   }
-/*    */   
-/*    */   private static class InvokerSecondPassAnnotationVisitor extends AnnotationVisitor {
-/*    */     private final CommonData data;
-/*    */     private final MxMember method;
-/*    */     private final List<String> targets;
-/*    */     
-/*    */     InvokerSecondPassAnnotationVisitor(CommonData data, AnnotationVisitor delegate, MxMember method, List<String> targets) {
-/* 71 */       super(589824, delegate);
-/*    */       
-/* 73 */       this.data = Objects.<CommonData>requireNonNull(data);
-/* 74 */       this.method = Objects.<MxMember>requireNonNull(method);
-/* 75 */       this.targets = Objects.<List<String>>requireNonNull(targets);
-/*    */     }
-/*    */ 
-/*    */     
-/*    */     public void visit(String name, Object value) {
-/* 80 */       if (name.equals("value")) {
-/* 81 */         String methodName = Objects.<String>requireNonNull((String)value);
-/* 82 */         String methodDesc = this.method.getDesc();
-/*    */         
-/* 84 */         value = (new NamedMappable(this.data, methodName, methodDesc, this.targets)).result();
-/*    */       } 
-/*    */       
-/* 87 */       super.visit(name, value);
-/*    */     }
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\InvokerAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/MixinAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/MixinAnnotationVisitor.java
deleted file mode 100644
index 2a1e957d9190ad9aac78e763977dd63abd883d0a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/MixinAnnotationVisitor.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/AtAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/AtAnnotationVisitor.java
deleted file mode 100644
index d1333227441784d7ec69528f747f70779088558c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/AtAnnotationVisitor.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/CommonInjectionAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/CommonInjectionAnnotationVisitor.java
deleted file mode 100644
index d1333227441784d7ec69528f747f70779088558c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/CommonInjectionAnnotationVisitor.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/DescAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/DescAnnotationVisitor.java
deleted file mode 100644
index d1333227441784d7ec69528f747f70779088558c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/DescAnnotationVisitor.java
+++ /dev/null
@@ -1 +0,0 @@
-package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;// INTERNAL ERROR //
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/InjectAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/InjectAnnotationVisitor.java
deleted file mode 100644
index 1859672b9dc1ba421ce22d48668374ed33ce64c6..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/InjectAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class InjectAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public InjectAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lorg/spongepowered/asm/mixin/injection/Inject;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\InjectAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyArgAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyArgAnnotationVisitor.java
deleted file mode 100644
index 2baf250e942f0e6b43aa729a0212d93ddc1f8d6f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyArgAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ModifyArgAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public ModifyArgAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lorg/spongepowered/asm/mixin/injection/ModifyArg;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\ModifyArgAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyArgsAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyArgsAnnotationVisitor.java
deleted file mode 100644
index a50487abccd923cf4123c2ae3e47b4aeaad8ae2d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyArgsAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ModifyArgsAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public ModifyArgsAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lorg/spongepowered/asm/mixin/injection/ModifyArgs;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\ModifyArgsAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyConstantAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyConstantAnnotationVisitor.java
deleted file mode 100644
index 94bb590c49e16a8b4150018f37afd73644fb7b8b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyConstantAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ModifyConstantAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public ModifyConstantAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lorg/spongepowered/asm/mixin/injection/ModifyConstant;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\ModifyConstantAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyExpressionValueAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyExpressionValueAnnotationVisitor.java
deleted file mode 100644
index 00f4cdee8845cee91adc84e3caf82c7017cf2de5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyExpressionValueAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ModifyExpressionValueAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public ModifyExpressionValueAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lcom/llamalad7/mixinextras/injector/ModifyExpressionValue;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\ModifyExpressionValueAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyReceiverAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyReceiverAnnotationVisitor.java
deleted file mode 100644
index 29a19a6578dd677f7139a4adefa8de8a6025adc8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyReceiverAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ModifyReceiverAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public ModifyReceiverAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lcom/llamalad7/mixinextras/injector/ModifyReceiver;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\ModifyReceiverAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyReturnValueAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyReturnValueAnnotationVisitor.java
deleted file mode 100644
index 98ba83428b98e643dd97b6324fbc5d17512d0800..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyReturnValueAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ModifyReturnValueAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public ModifyReturnValueAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lcom/llamalad7/mixinextras/injector/ModifyReturnValue;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\ModifyReturnValueAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyVariableAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyVariableAnnotationVisitor.java
deleted file mode 100644
index 860e4f9f7cd8c8a001c16289bc3c23d506a823a8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/ModifyVariableAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class ModifyVariableAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public ModifyVariableAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lorg/spongepowered/asm/mixin/injection/ModifyVariable;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\ModifyVariableAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/RedirectAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/RedirectAnnotationVisitor.java
deleted file mode 100644
index 37306b7a8d20acd3c3df9967b7b591efbae93832..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/RedirectAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class RedirectAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public RedirectAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lorg/spongepowered/asm/mixin/injection/Redirect;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\RedirectAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/SliceAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/SliceAnnotationVisitor.java
deleted file mode 100644
index a94d9ea71227589ea5b25d92e75499d29027c046..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/SliceAnnotationVisitor.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.Objects;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class SliceAnnotationVisitor
-/*    */   extends AnnotationVisitor
-/*    */ {
-/*    */   private final CommonData data;
-/*    */   private final boolean remap;
-/*    */   
-/*    */   public SliceAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap) {
-/* 35 */     super(589824, delegate);
-/* 36 */     this.data = Objects.<CommonData>requireNonNull(data);
-/* 37 */     this.remap = remap;
-/*    */   }
-/*    */   
-/*    */   public AnnotationVisitor visitAnnotation(String name, String descriptor) {
-/*    */     AtAnnotationVisitor atAnnotationVisitor;
-/* 42 */     AnnotationVisitor av = super.visitAnnotation(name, descriptor);
-/*    */     
-/* 44 */     if (name.equals("from") || name.equals("to")) {
-/* 45 */       if (!descriptor.equals("Lorg/spongepowered/asm/mixin/injection/At;")) {
-/* 46 */         throw new RuntimeException("Unexpected annotation " + descriptor);
-/*    */       }
-/*    */       
-/* 49 */       atAnnotationVisitor = new AtAnnotationVisitor(this.data, av, this.remap);
-/*    */     } 
-/*    */     
-/* 52 */     return (AnnotationVisitor)atAnnotationVisitor;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\SliceAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapMethodAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapMethodAnnotationVisitor.java
deleted file mode 100644
index ad3a454f85b986aa671af8fcea46dcfaa61d3cdc..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapMethodAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class WrapMethodAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public WrapMethodAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lcom/llamalad7/mixinextras/injector/wrapmethod/WrapMethod;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\WrapMethodAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapOperationAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapOperationAnnotationVisitor.java
deleted file mode 100644
index e30c625256a5938c34b1fa92f43ceb494a1a9ea1..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapOperationAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class WrapOperationAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public WrapOperationAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lcom/llamalad7/mixinextras/injector/wrapoperation/WrapOperation;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\WrapOperationAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapWithConditionAnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapWithConditionAnnotationVisitor.java
deleted file mode 100644
index ead8f466a428203c4693411476cfffaab7f61a0d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapWithConditionAnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class WrapWithConditionAnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public WrapWithConditionAnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lcom/llamalad7/mixinextras/injector/WrapWithCondition;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\WrapWithConditionAnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapWithConditionV2AnnotationVisitor.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapWithConditionV2AnnotationVisitor.java
deleted file mode 100644
index 06ff571995f92c21ee674d5ce4ffb7254c32343e..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/annotation/injection/WrapWithConditionV2AnnotationVisitor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.annotation.injection;
-/*    */ 
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ import org.objectweb.asm.AnnotationVisitor;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class WrapWithConditionV2AnnotationVisitor
-/*    */   extends CommonInjectionAnnotationVisitor
-/*    */ {
-/*    */   public WrapWithConditionV2AnnotationVisitor(CommonData data, AnnotationVisitor delegate, boolean remap, List<String> targets) {
-/* 30 */     super("Lcom/llamalad7/mixinextras/injector/v2/WrapWithCondition;", data, delegate, remap, targets);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\annotation\injection\WrapWithConditionV2AnnotationVisitor.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/data/MemberInfo.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/data/MemberInfo.java
deleted file mode 100644
index 615be961e17343e28e5de055c9a397ab506cdff8..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/data/MemberInfo.java
+++ /dev/null
@@ -1,142 +0,0 @@
-/*     */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.data;
-/*     */ 
-/*     */ import java.util.Objects;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrMember;
-/*     */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.StringUtility;
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ public final class MemberInfo
-/*     */ {
-/*     */   private final String owner;
-/*     */   private final String name;
-/*     */   private final String quantifier;
-/*     */   private final String desc;
-/*     */   
-/*     */   public MemberInfo(String owner, String name, String quantifier, String desc) {
-/*  33 */     this.owner = Objects.<String>requireNonNull(owner);
-/*  34 */     this.name = Objects.<String>requireNonNull(name);
-/*  35 */     this.quantifier = Objects.<String>requireNonNull(quantifier);
-/*  36 */     this.desc = Objects.<String>requireNonNull(desc);
-/*     */   }
-/*     */   
-/*     */   public String getOwner() {
-/*  40 */     return this.owner;
-/*     */   }
-/*     */   
-/*     */   public String getName() {
-/*  44 */     return this.name;
-/*     */   }
-/*     */   
-/*     */   public String getQuantifier() {
-/*  48 */     return this.quantifier;
-/*     */   }
-/*     */   
-/*     */   public String getDesc() {
-/*  52 */     return this.desc;
-/*     */   }
-/*     */   
-/*     */   public TrMember.MemberType getType() {
-/*  56 */     if (this.desc.isEmpty()) {
-/*  57 */       return null;
-/*     */     }
-/*     */     
-/*  60 */     return StringUtility.isMethodDesc(this.desc) ? TrMember.MemberType.METHOD : TrMember.MemberType.FIELD;
-/*     */   }
-/*     */   
-/*     */   public boolean isFullyQualified() {
-/*  64 */     return (!this.owner.isEmpty() && !this.name.isEmpty() && !this.desc.isEmpty());
-/*     */   }
-/*     */   
-/*     */   public static boolean isRegex(String str) {
-/*  68 */     return str.endsWith("/");
-/*     */   }
-/*     */   
-/*     */   public static boolean isDynamic(String str) {
-/*  72 */     return str.startsWith("@");
-/*     */   }
-/*     */   
-/*     */   public static MemberInfo parse(String str) {
-/*  76 */     if (isRegex(str) || isDynamic(str)) {
-/*  77 */       return null;
-/*     */     }
-/*     */     
-/*  80 */     str = str.replaceAll("\\s", "");
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */ 
-/*     */     
-/*  86 */     String descriptor = "", quantifier = descriptor, name = quantifier, owner = name;
-/*     */     int sep;
-/*  88 */     if ((sep = str.indexOf('(')) >= 0) {
-/*  89 */       descriptor = str.substring(sep);
-/*  90 */       str = str.substring(0, sep);
-/*  91 */     } else if ((sep = str.indexOf(":")) >= 0) {
-/*  92 */       descriptor = str.substring(sep + 1);
-/*  93 */       str = str.substring(0, sep);
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/*  98 */     if ((sep = str.indexOf('*')) >= 0) {
-/*  99 */       quantifier = str.substring(sep);
-/* 100 */       str = str.substring(0, sep);
-/* 101 */     } else if ((sep = str.indexOf('+')) >= 0) {
-/* 102 */       quantifier = str.substring(sep);
-/* 103 */       str = str.substring(0, sep);
-/* 104 */     } else if ((sep = str.indexOf('{')) >= 0) {
-/* 105 */       quantifier = str.substring(sep);
-/* 106 */       str = str.substring(0, sep);
-/*     */     } 
-/*     */ 
-/*     */ 
-/*     */     
-/* 111 */     if ((sep = str.indexOf(';')) >= 0) {
-/* 112 */       owner = StringUtility.classDescToName(str.substring(0, sep + 1));
-/* 113 */       str = str.substring(sep + 1);
-/* 114 */     } else if ((sep = str.lastIndexOf('.')) >= 0) {
-/* 115 */       owner = str.substring(0, sep).replace('.', '/');
-/* 116 */       str = str.substring(sep + 1);
-/*     */     } 
-/*     */ 
-/*     */     
-/* 120 */     if (str.contains("/") || str.contains(".")) {
-/* 121 */       owner = str.replace('.', '/');
-/*     */     } else {
-/* 123 */       name = str;
-/*     */     } 
-/*     */     
-/* 126 */     return new MemberInfo(owner, name, quantifier, descriptor);
-/*     */   }
-/*     */ 
-/*     */   
-/*     */   public String toString() {
-/* 131 */     String owner = getOwner().isEmpty() ? "" : StringUtility.classNameToDesc(getOwner());
-/* 132 */     String desc = getDesc().isEmpty() ? "" : ((Objects.equals(getType(), TrMember.MemberType.FIELD) ? ":" : "") + getDesc());
-/*     */     
-/* 134 */     return owner + this.name + this.quantifier + desc;
-/*     */   }
-/*     */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\soft\data\MemberInfo.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/util/NamedMappable.java b/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/util/NamedMappable.java
deleted file mode 100644
index c1a540acaafaa3ceded1beeba33ee4c758eda42a..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/impl/lib/tinyremapper/extension/mixin/soft/util/NamedMappable.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*    */ package net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.soft.util;
-/*    */ 
-/*    */ import java.util.Collection;
-/*    */ import java.util.Objects;
-/*    */ import java.util.Optional;
-/*    */ import java.util.stream.Collectors;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.api.TrClass;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.MapUtility;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.ResolveUtility;
-/*    */ import net.fabricmc.loader.impl.lib.tinyremapper.extension.mixin.common.data.CommonData;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ public class NamedMappable
-/*    */ {
-/*    */   private final CommonData data;
-/*    */   private final String name;
-/*    */   private final String desc;
-/*    */   private final Collection<TrClass> targets;
-/*    */   
-/*    */   public NamedMappable(CommonData data, String name, String desc, Collection<String> targets) {
-/* 40 */     this.data = Objects.<CommonData>requireNonNull(data);
-/* 41 */     this.name = Objects.<String>requireNonNull(name);
-/* 42 */     this.desc = Objects.<String>requireNonNull(desc);
-/*    */     
-/* 44 */     Objects.requireNonNull(data.resolver);
-/*    */ 
-/*    */     
-/* 47 */     this.targets = (Collection<TrClass>)((Collection)Objects.<Collection>requireNonNull(targets)).stream().map(data.resolver::resolveClass).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String result() {
-/* 52 */     if (MapUtility.IGNORED_NAME.contains(this.name)) {
-/* 53 */       return this.name;
-/*    */     }
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */     
-/* 60 */     Objects.requireNonNull(this.data.mapper);
-/* 61 */     Collection<String> collection = (Collection<String>)this.targets.stream().map(target -> this.data.resolver.resolveMember(target, this.name, this.desc, ResolveUtility.FLAG_UNIQUE | ResolveUtility.FLAG_RECURSIVE)).filter(Optional::isPresent).map(Optional::get).map(this.data.mapper::mapName).distinct().collect(Collectors.toList());
-/*    */     
-/* 63 */     if (collection.size() > 1) {
-/* 64 */       this.data.logger.error(String.format("Conflict mapping detected, %s -> %s.", new Object[] { this.name, collection }));
-/* 65 */     } else if (collection.isEmpty()) {
-/* 66 */       this.data.logger.warn(String.format("Cannot remap %s because it does not exists in any of the targets %s or their parents.", new Object[] { this.name, this.targets }));
-/*    */     } 
-/*    */     
-/* 69 */     return collection.stream().findFirst().orElse(this.name);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\lib\tinyremapper\extension\mixin\sof\\util\NamedMappable.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/impl/metadata/LoaderModMetadata.java b/src/main/java/net/fabricmc/loader/impl/metadata/LoaderModMetadata.java
index ab11950fc94a0771f92d16e1e79f8c2ab5d3f779..aed8fbab9084b0983e6ed28c05261a7fcbb425da 100644
--- a/src/main/java/net/fabricmc/loader/impl/metadata/LoaderModMetadata.java
+++ b/src/main/java/net/fabricmc/loader/impl/metadata/LoaderModMetadata.java
@@ -6,7 +6,7 @@
 /*    */ import net.fabricmc.api.EnvType;
 /*    */ import net.fabricmc.loader.api.Version;
 /*    */ import net.fabricmc.loader.api.metadata.ModDependency;
-/*    */ import net.fabricmc.loader.metadata.LoaderModMetadata;
+/*    */ import net.fabricmc.loader.api.metadata.ModMetadata;
 /*    */ 
 /*    */ 
 /*    */ 
@@ -26,8 +26,7 @@
 /*    */ 
 /*    */ 
 /*    */ 
-/*    */ public interface LoaderModMetadata
-/*    */   extends LoaderModMetadata
+/*    */ public interface LoaderModMetadata extends ModMetadata
 /*    */ {
 /*    */   int getSchemaVersion();
 /*    */   
@@ -62,4 +61,4 @@
 /* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\impl\metadata\LoaderModMetadata.class
  * Java compiler version: 8 (52.0)
  * JD-Core Version:       1.1.3
- */
\ No newline at end of file
+ */
diff --git a/src/main/java/net/fabricmc/loader/language/JavaLanguageAdapter.java b/src/main/java/net/fabricmc/loader/language/JavaLanguageAdapter.java
deleted file mode 100644
index 65ef62d1b413bbea374802c74a57ae8fa8b09685..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/language/JavaLanguageAdapter.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*    */ package net.fabricmc.loader.language;
-/*    */ 
-/*    */ import java.io.IOException;
-/*    */ import java.io.InputStream;
-/*    */ import java.lang.reflect.Constructor;
-/*    */ import java.lang.reflect.InvocationTargetException;
-/*    */ import net.fabricmc.api.EnvType;
-/*    */ import net.fabricmc.loader.api.FabricLoader;
-/*    */ import net.fabricmc.loader.impl.launch.FabricLauncherBase;
-/*    */ import net.fabricmc.loader.impl.util.LoaderUtil;
-/*    */ import org.objectweb.asm.ClassReader;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class JavaLanguageAdapter
-/*    */   implements LanguageAdapter
-/*    */ {
-/*    */   private static boolean canApplyInterface(String itfString) throws IOException {
-/* 35 */     switch (itfString) {
-/*    */       case "net/fabricmc/api/ClientModInitializer":
-/* 37 */         if (FabricLoader.getInstance().getEnvironmentType() == EnvType.SERVER) {
-/* 38 */           return false;
-/*    */         }
-/*    */         break;
-/*    */       
-/*    */       case "net/fabricmc/api/DedicatedServerModInitializer":
-/* 43 */         if (FabricLoader.getInstance().getEnvironmentType() == EnvType.CLIENT) {
-/* 44 */           return false;
-/*    */         }
-/*    */         break;
-/*    */     } 
-/* 48 */     InputStream stream = FabricLauncherBase.getLauncher().getResourceAsStream(LoaderUtil.getClassFileName(itfString));
-/* 49 */     if (stream == null) return false;
-/*    */     
-/* 51 */     ClassReader reader = new ClassReader(stream);
-/*    */     
-/* 53 */     for (String s : reader.getInterfaces()) {
-/* 54 */       if (!canApplyInterface(s)) {
-/* 55 */         stream.close();
-/* 56 */         return false;
-/*    */       } 
-/*    */     } 
-/*    */     
-/* 60 */     stream.close();
-/* 61 */     return true;
-/*    */   }
-/*    */   
-/*    */   public static Class<?> getClass(String className, Options options) throws ClassNotFoundException, IOException {
-/* 65 */     InputStream stream = FabricLauncherBase.getLauncher().getResourceAsStream(LoaderUtil.getClassFileName(className));
-/* 66 */     if (stream == null) throw new ClassNotFoundException("Could not find or load class " + className);
-/*    */     
-/* 68 */     ClassReader reader = new ClassReader(stream);
-/*    */     
-/* 70 */     for (String s : reader.getInterfaces()) {
-/* 71 */       if (!canApplyInterface(s)) {
-/* 72 */         switch (options.getMissingSuperclassBehavior()) {
-/*    */           case RETURN_NULL:
-/* 74 */             stream.close();
-/* 75 */             return null;
-/*    */         } 
-/*    */         
-/* 78 */         stream.close();
-/* 79 */         throw new ClassNotFoundException("Could not find or load class " + s);
-/*    */       } 
-/*    */     } 
-/*    */ 
-/*    */     
-/* 84 */     stream.close();
-/* 85 */     return FabricLauncherBase.getClass(className);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public Object createInstance(Class<?> modClass, Options options) throws LanguageAdapterException {
-/*    */     try {
-/* 91 */       Constructor<?> constructor = modClass.getDeclaredConstructor(new Class[0]);
-/* 92 */       return constructor.newInstance(new Object[0]);
-/* 93 */     } catch (NoSuchMethodException e) {
-/* 94 */       throw new LanguageAdapterException("Could not find constructor for class " + modClass.getName() + "!", e);
-/* 95 */     } catch (IllegalAccessException e) {
-/* 96 */       throw new LanguageAdapterException("Could not access constructor of class " + modClass.getName() + "!", e);
-/* 97 */     } catch (InvocationTargetException|IllegalArgumentException|InstantiationException e) {
-/* 98 */       throw new LanguageAdapterException("Could not instantiate class " + modClass.getName() + "!", e);
-/*    */     } 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\language\JavaLanguageAdapter.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/language/LanguageAdapter.java b/src/main/java/net/fabricmc/loader/language/LanguageAdapter.java
deleted file mode 100644
index 32299333bcb362c5118d78ae38b2e2511a9cac95..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/language/LanguageAdapter.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*    */ package net.fabricmc.loader.language;
-/*    */ 
-/*    */ import java.io.IOException;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public interface LanguageAdapter
-/*    */ {
-/*    */   public enum MissingSuperclassBehavior
-/*    */   {
-/* 24 */     RETURN_NULL,
-/* 25 */     CRASH;
-/*    */   }
-/*    */   
-/*    */   default Object createInstance(String classString, Options options) throws ClassNotFoundException, LanguageAdapterException {
-/*    */     try {
-/* 30 */       Class<?> c = JavaLanguageAdapter.getClass(classString, options);
-/*    */       
-/* 32 */       if (c != null) {
-/* 33 */         return createInstance(c, options);
-/*    */       }
-/* 35 */       return null;
-/*    */     }
-/* 37 */     catch (IOException e) {
-/* 38 */       throw new LanguageAdapterException("I/O error!", e);
-/*    */     } 
-/*    */   }
-/*    */   
-/*    */   Object createInstance(Class<?> paramClass, Options paramOptions) throws LanguageAdapterException;
-/*    */   
-/*    */   public static class Options {
-/*    */     private MissingSuperclassBehavior missingSuperclassBehavior;
-/*    */     
-/*    */     public MissingSuperclassBehavior getMissingSuperclassBehavior() {
-/* 48 */       return this.missingSuperclassBehavior;
-/*    */     }
-/*    */ 
-/*    */ 
-/*    */     
-/*    */     public static class Builder
-/*    */     {
-/* 55 */       private final Options options = new Options();
-/*    */ 
-/*    */       
-/*    */       public static Builder create() {
-/* 59 */         return new Builder();
-/*    */       }
-/*    */       
-/*    */       public Builder missingSuperclassBehaviour(MissingSuperclassBehavior value) {
-/* 63 */         this.options.missingSuperclassBehavior = value;
-/* 64 */         return this;
-/*    */       }
-/*    */       
-/*    */       public Options build() {
-/* 68 */         return this.options;
-/*    */       }
-/*    */     }
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\language\LanguageAdapter.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/language/LanguageAdapterException.java b/src/main/java/net/fabricmc/loader/language/LanguageAdapterException.java
deleted file mode 100644
index 05ba681dbd32902bb462dd87c30b18ab6f6d3198..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/language/LanguageAdapterException.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*    */ package net.fabricmc.loader.language;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class LanguageAdapterException
-/*    */   extends Exception
-/*    */ {
-/*    */   public LanguageAdapterException(String s) {
-/* 23 */     super(s);
-/*    */   }
-/*    */   
-/*    */   public LanguageAdapterException(String s, Throwable t) {
-/* 27 */     super(s, t);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\language\LanguageAdapterException.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/launch/FabricClientTweaker.java b/src/main/java/net/fabricmc/loader/launch/FabricClientTweaker.java
deleted file mode 100644
index 1996cd21df0f945609eda0a69e480a59805a5ab5..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/launch/FabricClientTweaker.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package net.fabricmc.loader.launch;
-
-import net.fabricmc.loader.impl.game.minecraft.launchwrapper.FabricClientTweaker;
-
-@Deprecated
-public final class FabricClientTweaker extends FabricClientTweaker {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\launch\FabricClientTweaker.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/launch/FabricServerTweaker.java b/src/main/java/net/fabricmc/loader/launch/FabricServerTweaker.java
deleted file mode 100644
index 3002ab204700abb1a5fb2a597150283e6e88e522..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/launch/FabricServerTweaker.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package net.fabricmc.loader.launch;
-
-import net.fabricmc.loader.impl.game.minecraft.launchwrapper.FabricServerTweaker;
-
-@Deprecated
-public final class FabricServerTweaker extends FabricServerTweaker {}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\launch\FabricServerTweaker.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/launch/common/FabricLauncher.java b/src/main/java/net/fabricmc/loader/launch/common/FabricLauncher.java
deleted file mode 100644
index cfa26f3b57bf1f9ae353b188400d39b39f007e2f..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/launch/common/FabricLauncher.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package net.fabricmc.loader.launch.common;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.util.Collection;
-import net.fabricmc.api.EnvType;
-
-@Deprecated
-public interface FabricLauncher {
-  void propose(URL paramURL);
-  
-  EnvType getEnvironmentType();
-  
-  boolean isClassLoaded(String paramString);
-  
-  InputStream getResourceAsStream(String paramString);
-  
-  ClassLoader getTargetClassLoader();
-  
-  byte[] getClassByteArray(String paramString, boolean paramBoolean) throws IOException;
-  
-  boolean isDevelopment();
-  
-  Collection<URL> getLoadTimeDependencies();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\launch\common\FabricLauncher.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/launch/common/FabricLauncherBase.java b/src/main/java/net/fabricmc/loader/launch/common/FabricLauncherBase.java
deleted file mode 100644
index a63376cdf49eb7dff01aa6e7b8832ff9f936b6e0..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/launch/common/FabricLauncherBase.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*    */ package net.fabricmc.loader.launch.common;
-/*    */ 
-/*    */ import java.io.IOException;
-/*    */ import java.io.InputStream;
-/*    */ import java.net.MalformedURLException;
-/*    */ import java.net.URL;
-/*    */ import java.nio.file.Path;
-/*    */ import java.util.ArrayList;
-/*    */ import java.util.Collection;
-/*    */ import java.util.List;
-/*    */ import net.fabricmc.api.EnvType;
-/*    */ import net.fabricmc.loader.api.FabricLoader;
-/*    */ import net.fabricmc.loader.impl.launch.FabricLauncher;
-/*    */ import net.fabricmc.loader.impl.util.UrlUtil;
-/*    */ 
-/*    */
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class FabricLauncherBase
-/*    */   implements FabricLauncher
-/*    */ {
-/* 37 */   private final FabricLauncher parent = net.fabricmc.loader.impl.launch.FabricLauncherBase.getLauncher();
-/*    */   
-/*    */   public static Class<?> getClass(String className) throws ClassNotFoundException {
-/* 40 */     return Class.forName(className, true, getLauncher().getTargetClassLoader());
-/*    */   }
-/*    */   
-/*    */   public static FabricLauncher getLauncher() {
-/* 44 */     return new FabricLauncherBase();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public void propose(URL url) {
-/* 49 */     this.parent.addToClassPath(UrlUtil.asPath(url), new String[0]);
-/*    */   }
-/*    */
-/*    */   
-/*    */   public EnvType getEnvironmentType() {
-/* 54 */     return FabricLoader.getInstance().getEnvironmentType();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public boolean isClassLoaded(String name) {
-/* 59 */     return this.parent.isClassLoaded(name);
-/*    */   }
-/*    */
-/*    */   
-/*    */   public InputStream getResourceAsStream(String name) {
-/* 64 */     return this.parent.getResourceAsStream(name);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public ClassLoader getTargetClassLoader() {
-/* 69 */     return this.parent.getTargetClassLoader();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public byte[] getClassByteArray(String name, boolean runTransformers) throws IOException {
-/* 74 */     return this.parent.getClassByteArray(name, runTransformers);
-/*    */   }
-/*    */
-/*    */   
-/*    */   public boolean isDevelopment() {
-/* 79 */     return FabricLoader.getInstance().isDevelopmentEnvironment();
-/*    */   }
-/*    */
-/*    */   
-/*    */   public Collection<URL> getLoadTimeDependencies() {
-/* 84 */     List<URL> ret = new ArrayList<>();
-/*    */     
-/* 86 */     for (Path path : this.parent.getClassPath()) {
-/*    */       try {
-/* 88 */         ret.add(UrlUtil.asUrl(path));
-/* 89 */       } catch (MalformedURLException e) {
-/* 90 */         throw new RuntimeException(e);
-/*    */       } 
-/*    */     } 
-/*    */     
-/* 94 */     return ret;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\launch\common\FabricLauncherBase.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/launch/knot/KnotClient.java b/src/main/java/net/fabricmc/loader/launch/knot/KnotClient.java
deleted file mode 100644
index de4df6358fa1711707c78d2d013b28e960ba15d0..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/launch/knot/KnotClient.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*    */ package net.fabricmc.loader.launch.knot;
-/*    */ 
-/*    */ import net.fabricmc.api.EnvType;
-/*    */ import net.fabricmc.loader.impl.launch.knot.Knot;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public final class KnotClient
-/*    */ {
-/*    */   public static void main(String[] args) {
-/* 28 */     Knot.launch(args, EnvType.CLIENT);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\launch\knot\KnotClient.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/launch/knot/KnotServer.java b/src/main/java/net/fabricmc/loader/launch/knot/KnotServer.java
deleted file mode 100644
index 882c142a7bcd6a898c4ff84c3cfb5be324b5db1c..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/launch/knot/KnotServer.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*    */ package net.fabricmc.loader.launch.knot;
-/*    */ 
-/*    */ import net.fabricmc.api.EnvType;
-/*    */ import net.fabricmc.loader.impl.launch.knot.Knot;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public final class KnotServer
-/*    */ {
-/*    */   public static void main(String[] args) {
-/* 28 */     Knot.launch(args, EnvType.SERVER);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\launch\knot\KnotServer.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/launch/server/FabricServerLauncher.java b/src/main/java/net/fabricmc/loader/launch/server/FabricServerLauncher.java
deleted file mode 100644
index 018cb5f25b5dc658ecb4ba112116a31d29ce20c9..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/launch/server/FabricServerLauncher.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*    */ package net.fabricmc.loader.launch.server;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public final class FabricServerLauncher
-/*    */ {
-/*    */   public static void main(String[] args) {
-/* 25 */     net.fabricmc.loader.impl.launch.server.FabricServerLauncher.main(args);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\launch\server\FabricServerLauncher.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/metadata/EntrypointMetadata.java b/src/main/java/net/fabricmc/loader/metadata/EntrypointMetadata.java
deleted file mode 100644
index afee9570ce610a8be0a6278921218591840d801b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/metadata/EntrypointMetadata.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package net.fabricmc.loader.metadata;
-
-@Deprecated
-public interface EntrypointMetadata {
-  String getAdapter();
-  
-  String getValue();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\metadata\EntrypointMetadata.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/metadata/LoaderModMetadata.java b/src/main/java/net/fabricmc/loader/metadata/LoaderModMetadata.java
deleted file mode 100644
index 726c71053dc3dc322c21688d1786e96b1b05139b..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/metadata/LoaderModMetadata.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package net.fabricmc.loader.metadata;
-
-import java.util.Collection;
-import java.util.List;
-import net.fabricmc.api.EnvType;
-import net.fabricmc.loader.api.metadata.ModMetadata;
-
-@Deprecated
-public interface LoaderModMetadata extends ModMetadata {
-  boolean loadsInEnvironment(EnvType paramEnvType);
-  
-  List<? extends EntrypointMetadata> getEntrypoints(String paramString);
-  
-  Collection<String> getEntrypointKeys();
-}
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\metadata\LoaderModMetadata.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/metadata/MapBackedContactInformation.java b/src/main/java/net/fabricmc/loader/metadata/MapBackedContactInformation.java
deleted file mode 100644
index 5e5ce3c42f70c837ddb9b1a36499e0fd34a7fdd2..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/metadata/MapBackedContactInformation.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*    */ package net.fabricmc.loader.metadata;
-/*    */ 
-/*    */ import java.util.Collections;
-/*    */ import java.util.Map;
-/*    */ import java.util.Optional;
-/*    */ import net.fabricmc.loader.api.metadata.ContactInformation;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class MapBackedContactInformation
-/*    */   implements ContactInformation
-/*    */ {
-/*    */   private final Map<String, String> map;
-/*    */   
-/*    */   public MapBackedContactInformation(Map<String, String> map) {
-/* 33 */     this.map = Collections.unmodifiableMap(map);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public Optional<String> get(String key) {
-/* 38 */     return Optional.ofNullable(this.map.get(key));
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public Map<String, String> asMap() {
-/* 43 */     return this.map;
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loader\metadata\MapBackedContactInformation.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/util/DefaultLanguageAdapter.java b/src/main/java/net/fabricmc/loader/util/DefaultLanguageAdapter.java
deleted file mode 100644
index 15989ed1ec3afbea03c5f449c2f502ad2bab6e08..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/util/DefaultLanguageAdapter.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*    */ package net.fabricmc.loader.util;
-/*    */ 
-/*    */ import net.fabricmc.loader.api.LanguageAdapter;
-/*    */ import net.fabricmc.loader.api.LanguageAdapterException;
-/*    */ import net.fabricmc.loader.api.ModContainer;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public final class DefaultLanguageAdapter
-/*    */   implements LanguageAdapter
-/*    */ {
-/* 28 */   public static final DefaultLanguageAdapter INSTANCE = new DefaultLanguageAdapter();
-/*    */ 
-/*    */   
-/*    */   public <T> T create(ModContainer mod, String value, Class<T> type) throws LanguageAdapterException {
-/* 32 */     return (T)LanguageAdapter.getDefault().create(mod, value, type);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loade\\util\DefaultLanguageAdapter.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/util/UrlConversionException.java b/src/main/java/net/fabricmc/loader/util/UrlConversionException.java
deleted file mode 100644
index 73ae6114a8b54f96852de30f3e3dfa8057230524..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/util/UrlConversionException.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*    */ package net.fabricmc.loader.util;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class UrlConversionException
-/*    */   extends Exception
-/*    */ {
-/*    */   public UrlConversionException() {}
-/*    */   
-/*    */   public UrlConversionException(String s) {
-/* 30 */     super(s);
-/*    */   }
-/*    */   
-/*    */   public UrlConversionException(Throwable t) {
-/* 34 */     super(t);
-/*    */   }
-/*    */   
-/*    */   public UrlConversionException(String s, Throwable t) {
-/* 38 */     super(s, t);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loade\\util\UrlConversionException.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/util/UrlUtil.java b/src/main/java/net/fabricmc/loader/util/UrlUtil.java
deleted file mode 100644
index b05903eecf20222f98e642e05bce97e15f58ea58..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/util/UrlUtil.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*    */ package net.fabricmc.loader.util;
-/*    */ 
-/*    */ import java.net.URL;
-/*    */ import java.nio.file.Path;
-/*    */ import net.fabricmc.loader.impl.util.ExceptionUtil;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public final class UrlUtil
-/*    */ {
-/*    */   public static Path asPath(URL url) throws UrlConversionException {
-/*    */     try {
-/* 33 */       return net.fabricmc.loader.impl.util.UrlUtil.asPath(url);
-/* 34 */     } catch (ExceptionUtil.WrappedException e) {
-/* 35 */       throw new UrlConversionException(e.getCause());
-/*    */     } 
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loade\\util\UrlUtil.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
diff --git a/src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java b/src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java
deleted file mode 100644
index cca1c81e9dcdc6d3fcc947fbeb8cf48a424cf77d..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/util/version/SemanticVersionImpl.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*    */ package net.fabricmc.loader.util.version;
-/*    */ 
-/*    */ import java.util.Optional;
-/*    */ import net.fabricmc.loader.api.SemanticVersion;
-/*    */ import net.fabricmc.loader.api.Version;
-/*    */ import net.fabricmc.loader.api.VersionParsingException;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class SemanticVersionImpl
-/*    */   implements SemanticVersion
-/*    */ {
-/*    */   private final SemanticVersion parent;
-/*    */   
-/*    */   protected SemanticVersionImpl() {
-/* 33 */     this.parent = null;
-/*    */   }
-/*    */   
-/*    */   public SemanticVersionImpl(String version, boolean storeX) throws VersionParsingException {
-/* 37 */     this.parent = SemanticVersion.parse(version);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public int getVersionComponentCount() {
-/* 42 */     return this.parent.getVersionComponentCount();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public int getVersionComponent(int pos) {
-/* 47 */     return this.parent.getVersionComponent(pos);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public Optional<String> getPrereleaseKey() {
-/* 52 */     return this.parent.getPrereleaseKey();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public Optional<String> getBuildKey() {
-/* 57 */     return this.parent.getBuildKey();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String getFriendlyString() {
-/* 62 */     return this.parent.getFriendlyString();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public boolean equals(Object o) {
-/* 67 */     return this.parent.equals(o);
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public int hashCode() {
-/* 72 */     return this.parent.hashCode();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public String toString() {
-/* 77 */     return this.parent.toString();
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public boolean hasWildcard() {
-/* 82 */     return this.parent.hasWildcard();
-/*    */   }
-/*    */   
-/*    */   public boolean equalsComponentsExactly(SemanticVersionImpl other) {
-/* 86 */     for (int i = 0; i < Math.max(getVersionComponentCount(), other.getVersionComponentCount()); i++) {
-/* 87 */       if (getVersionComponent(i) != other.getVersionComponent(i)) {
-/* 88 */         return false;
-/*    */       }
-/*    */     } 
-/*    */     
-/* 92 */     return true;
-/*    */   }
-/*    */ 
-/*    */   
-/*    */   public int compareTo(Version o) {
-/* 97 */     return this.parent.compareTo(o);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loade\\util\version\SemanticVersionImpl.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/util/version/SemanticVersionPredicateParser.java b/src/main/java/net/fabricmc/loader/util/version/SemanticVersionPredicateParser.java
deleted file mode 100644
index 529c51550d1fa2eafe0df5a5ede32f94b55e6fde..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/util/version/SemanticVersionPredicateParser.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/*    */ package net.fabricmc.loader.util.version;
-/*    */ 
-/*    */ import java.util.function.Predicate;
-/*    */ import net.fabricmc.loader.api.VersionParsingException;
-/*    */ import net.fabricmc.loader.api.metadata.version.VersionPredicate;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public final class SemanticVersionPredicateParser
-/*    */ {
-/*    */   public static Predicate<SemanticVersionImpl> create(String text) throws VersionParsingException {
-/* 30 */     VersionPredicate predicate = VersionPredicate.parse(text);
-/*    */     
-/* 32 */     return v -> predicate.test(v);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loade\\util\version\SemanticVersionPredicateParser.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
diff --git a/src/main/java/net/fabricmc/loader/util/version/VersionParsingException.java b/src/main/java/net/fabricmc/loader/util/version/VersionParsingException.java
deleted file mode 100644
index 2e58aa0e6a3653668cdcaf5cfa513b915f11c680..0000000000000000000000000000000000000000
--- a/src/main/java/net/fabricmc/loader/util/version/VersionParsingException.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*    */ package net.fabricmc.loader.util.version;
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ 
-/*    */ @Deprecated
-/*    */ public class VersionParsingException
-/*    */   extends Exception
-/*    */ {
-/*    */   public VersionParsingException() {}
-/*    */   
-/*    */   public VersionParsingException(Throwable t) {
-/* 28 */     super(t);
-/*    */   }
-/*    */   
-/*    */   public VersionParsingException(String s) {
-/* 32 */     super(s);
-/*    */   }
-/*    */   
-/*    */   public VersionParsingException(String s, Throwable t) {
-/* 36 */     super(s, t);
-/*    */   }
-/*    */ }
-
-
-/* Location:              C:\Users\vital\.gradle\caches\modules-2\files-2.1\net.fabricmc\fabric-loader\0.16.13\98c9beaf1e9b7290882be44120b8a3967e7b1f28\fabric-loader-0.16.13.jar!\net\fabricmc\loade\\util\version\VersionParsingException.class
- * Java compiler version: 8 (52.0)
- * JD-Core Version:       1.1.3
- */
\ No newline at end of file
